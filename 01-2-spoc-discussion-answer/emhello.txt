root/usr/emhello.c  1: #include <u.h>
root/lib/u.h  1: // u.h
root/lib/u.h  2: 
root/lib/u.h  3: // instruction set
root/lib/u.h  4: enum {
root/lib/u.h  5:   HALT,ENT ,LEV ,JMP ,JMPI,JSR ,JSRA,LEA ,LEAG,CYC ,MCPY,MCMP,MCHR,MSET, // system
root/lib/u.h  6:   LL  ,LLS ,LLH ,LLC ,LLB ,LLD ,LLF ,LG  ,LGS ,LGH ,LGC ,LGB ,LGD ,LGF , // load a
root/lib/u.h  7:   LX  ,LXS ,LXH ,LXC ,LXB ,LXD ,LXF ,LI  ,LHI ,LIF ,
root/lib/u.h  8:   LBL ,LBLS,LBLH,LBLC,LBLB,LBLD,LBLF,LBG ,LBGS,LBGH,LBGC,LBGB,LBGD,LBGF, // load b
root/lib/u.h  9:   LBX ,LBXS,LBXH,LBXC,LBXB,LBXD,LBXF,LBI ,LBHI,LBIF,LBA ,LBAD,
root/lib/u.h  10:   SL  ,SLH ,SLB ,SLD ,SLF ,SG  ,SGH ,SGB ,SGD ,SGF ,                     // store
root/lib/u.h  11:   SX  ,SXH ,SXB ,SXD ,SXF ,
root/lib/u.h  12:   ADDF,SUBF,MULF,DIVF,                                                   // arithmetic
root/lib/u.h  13:   ADD ,ADDI,ADDL,SUB ,SUBI,SUBL,MUL ,MULI,MULL,DIV ,DIVI,DIVL,
root/lib/u.h  14:   DVU ,DVUI,DVUL,MOD ,MODI,MODL,MDU ,MDUI,MDUL,AND ,ANDI,ANDL,
root/lib/u.h  15:   OR  ,ORI ,ORL ,XOR ,XORI,XORL,SHL ,SHLI,SHLL,SHR ,SHRI,SHRL,
root/lib/u.h  16:   SRU ,SRUI,SRUL,EQ  ,EQF ,NE  ,NEF ,LT  ,LTU ,LTF ,GE  ,GEU ,GEF ,      // logical
root/lib/u.h  17:   BZ  ,BZF ,BNZ ,BNZF,BE  ,BEF ,BNE ,BNEF,BLT ,BLTU,BLTF,BGE ,BGEU,BGEF, // conditional
root/lib/u.h  18:   CID ,CUD ,CDI ,CDU ,                                                   // conversion
root/lib/u.h  19:   CLI ,STI ,RTI ,BIN ,BOUT,NOP ,SSP ,PSHA,PSHI,PSHF,PSHB,POPB,POPF,POPA, // misc
root/lib/u.h  20:   IVEC,PDIR,SPAG,TIME,LVAD,TRAP,LUSP,SUSP,LCL ,LCA ,PSHC,POPC,MSIZ,
root/lib/u.h  21:   PSHG,POPG,NET1,NET2,NET3,NET4,NET5,NET6,NET7,NET8,NET9,
root/lib/u.h  22:   POW ,ATN2,FABS,ATAN,LOG ,LOGT,EXP ,FLOR,CEIL,HYPO,SIN ,COS ,TAN ,ASIN, // math
root/lib/u.h  23:   ACOS,SINH,COSH,TANH,SQRT,FMOD,
root/lib/u.h  24:   IDLE
root/lib/u.h  25: };
root/lib/u.h  26: 
root/lib/u.h  27: // system calls
root/lib/u.h  28: enum {
root/lib/u.h  29:   S_fork=1, S_exit,   S_wait,   S_pipe,   S_write,  S_read,   S_close,  S_kill,
root/lib/u.h  30:   S_exec,   S_open,   S_mknod,  S_unlink, S_fstat,  S_link,   S_mkdir,  S_chdir,
root/lib/u.h  31:   S_dup2,   S_getpid, S_sbrk,   S_sleep,  S_uptime, S_lseek,  S_mount,  S_umount,
root/lib/u.h  32:   S_socket, S_bind,   S_listen, S_poll,   S_accept, S_connect, 
root/lib/u.h  33: };
root/lib/u.h  34: 
root/lib/u.h  35: typedef unsigned char uchar;
root/lib/u.h  36: typedef unsigned short ushort;
root/lib/u.h  37: typedef unsigned int uint;
root/lib/u.h  38: 
root/usr/emhello.c  2: 
root/usr/emhello.c  3: out(port, val)
root/usr/emhello.c  4: {
root/usr/emhello.c  5:   asm(LL,8);   // load register a with port
00000000  0000080e  LL    8
root/usr/emhello.c  6:   asm(LBL,16); // load register b with val
00000004  00001026  LBL   16
root/usr/emhello.c  7:   asm(BOUT);   // output byte to console
00000008  0000009a  BOUT
root/usr/emhello.c  8: }
root/usr/emhello.c  9: 
root/usr/emhello.c  10: write(int f, char *s, int n)
0000000c  00000002  LEV   0
root/usr/emhello.c  11: {
root/usr/emhello.c  12:   while (n--)
00000010  00000003  JMP   <fwd>
root/usr/emhello.c  13:     out(f, *s++);
00000014  0000100e  LL    16
00000018  ffffff57  SUBI  -1
0000001c  00001040  SL    16
00000020  ffffff1f  LXC   -1
00000024  0000009d  PSHA
00000028  0000100e  LL    16
0000002c  0000009d  PSHA
00000030  ffffcc05  JSR   -52
00000034  00001001  ENT   16
root/usr/emhello.c  14: }  
00000038  0000180e  LL    24
0000003c  00000157  SUBI  1
00000040  00001840  SL    24
00000044  00000154  ADDI  1
00000048  00000086  BNZ   <fwd>
root/usr/emhello.c  15:   
root/usr/emhello.c  16: main()
0000004c  00000002  LEV   0
root/usr/emhello.c  17: {
root/usr/emhello.c  18:   write(1, "Hello world.\n", 13);
00000050  00000d9e  PSHI  13
00000054  00000008  LEAG  0
00000058  0000009d  PSHA
0000005c  0000019e  PSHI  1
00000060  ffffac05  JSR   -84
00000064  00001801  ENT   24
root/usr/emhello.c  19:   asm(HALT);
00000068  00000000  HALT
root/usr/emhello.c  20: }
root/usr/emhello.c  21: 
0000006c  00000002  LEV   0
