
bin/kernel：     文件格式 elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 f0 12 00 	lgdtl  0x12f018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 f0 12 c0       	mov    $0xc012f000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));

static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 18             	sub    $0x18,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba 60 3e 1b c0       	mov    $0xc01b3e60,%edx
c0100035:	b8 dc 0c 1b c0       	mov    $0xc01b0cdc,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	83 ec 04             	sub    $0x4,%esp
c0100041:	50                   	push   %eax
c0100042:	6a 00                	push   $0x0
c0100044:	68 dc 0c 1b c0       	push   $0xc01b0cdc
c0100049:	e8 a2 c4 00 00       	call   c010c4f0 <memset>
c010004e:	83 c4 10             	add    $0x10,%esp

    cons_init();                // init the console
c0100051:	e8 f8 31 00 00       	call   c010324e <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c0100056:	c7 45 f4 a0 cd 10 c0 	movl   $0xc010cda0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c010005d:	83 ec 08             	sub    $0x8,%esp
c0100060:	ff 75 f4             	pushl  -0xc(%ebp)
c0100063:	68 bc cd 10 c0       	push   $0xc010cdbc
c0100068:	e8 16 02 00 00       	call   c0100283 <cprintf>
c010006d:	83 c4 10             	add    $0x10,%esp

    print_kerninfo();
c0100070:	e8 e7 1c 00 00       	call   c0101d5c <print_kerninfo>

    grade_backtrace();
c0100075:	e8 90 00 00 00       	call   c010010a <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007a:	e8 6b 50 00 00       	call   c01050ea <pmm_init>

    pic_init();                 // init interrupt controller
c010007f:	e8 3c 33 00 00       	call   c01033c0 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100084:	e8 9d 34 00 00       	call   c0103526 <idt_init>

    vmm_init();                 // init virtual memory management
c0100089:	e8 36 6b 00 00       	call   c0106bc4 <vmm_init>
    sched_init();               // init scheduler
c010008e:	e8 69 b9 00 00       	call   c010b9fc <sched_init>
    proc_init();                // init process table
c0100093:	e8 fb b5 00 00       	call   c010b693 <proc_init>
    
    ide_init();                 // init ide devices
c0100098:	e8 80 21 00 00       	call   c010221d <ide_init>
    swap_init();                // init swap
c010009d:	e8 58 75 00 00       	call   c01075fa <swap_init>

    clock_init();               // init clock interrupt
c01000a2:	e8 4e 29 00 00       	call   c01029f5 <clock_init>
    intr_enable();              // enable irq interrupt
c01000a7:	e8 51 34 00 00       	call   c01034fd <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000ac:	e8 7f b7 00 00       	call   c010b830 <cpu_idle>

c01000b1 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000b1:	55                   	push   %ebp
c01000b2:	89 e5                	mov    %esp,%ebp
c01000b4:	83 ec 08             	sub    $0x8,%esp
    mon_backtrace(0, NULL, NULL);
c01000b7:	83 ec 04             	sub    $0x4,%esp
c01000ba:	6a 00                	push   $0x0
c01000bc:	6a 00                	push   $0x0
c01000be:	6a 00                	push   $0x0
c01000c0:	e8 ec 20 00 00       	call   c01021b1 <mon_backtrace>
c01000c5:	83 c4 10             	add    $0x10,%esp
}
c01000c8:	90                   	nop
c01000c9:	c9                   	leave  
c01000ca:	c3                   	ret    

c01000cb <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000cb:	55                   	push   %ebp
c01000cc:	89 e5                	mov    %esp,%ebp
c01000ce:	53                   	push   %ebx
c01000cf:	83 ec 04             	sub    $0x4,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000d2:	8d 4d 0c             	lea    0xc(%ebp),%ecx
c01000d5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01000d8:	8d 5d 08             	lea    0x8(%ebp),%ebx
c01000db:	8b 45 08             	mov    0x8(%ebp),%eax
c01000de:	51                   	push   %ecx
c01000df:	52                   	push   %edx
c01000e0:	53                   	push   %ebx
c01000e1:	50                   	push   %eax
c01000e2:	e8 ca ff ff ff       	call   c01000b1 <grade_backtrace2>
c01000e7:	83 c4 10             	add    $0x10,%esp
}
c01000ea:	90                   	nop
c01000eb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01000ee:	c9                   	leave  
c01000ef:	c3                   	ret    

c01000f0 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c01000f0:	55                   	push   %ebp
c01000f1:	89 e5                	mov    %esp,%ebp
c01000f3:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace1(arg0, arg2);
c01000f6:	83 ec 08             	sub    $0x8,%esp
c01000f9:	ff 75 10             	pushl  0x10(%ebp)
c01000fc:	ff 75 08             	pushl  0x8(%ebp)
c01000ff:	e8 c7 ff ff ff       	call   c01000cb <grade_backtrace1>
c0100104:	83 c4 10             	add    $0x10,%esp
}
c0100107:	90                   	nop
c0100108:	c9                   	leave  
c0100109:	c3                   	ret    

c010010a <grade_backtrace>:

void
grade_backtrace(void) {
c010010a:	55                   	push   %ebp
c010010b:	89 e5                	mov    %esp,%ebp
c010010d:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100110:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0100115:	83 ec 04             	sub    $0x4,%esp
c0100118:	68 00 00 ff ff       	push   $0xffff0000
c010011d:	50                   	push   %eax
c010011e:	6a 00                	push   $0x0
c0100120:	e8 cb ff ff ff       	call   c01000f0 <grade_backtrace0>
c0100125:	83 c4 10             	add    $0x10,%esp
}
c0100128:	90                   	nop
c0100129:	c9                   	leave  
c010012a:	c3                   	ret    

c010012b <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c010012b:	55                   	push   %ebp
c010012c:	89 e5                	mov    %esp,%ebp
c010012e:	83 ec 18             	sub    $0x18,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100131:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100134:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100137:	8c 45 f2             	mov    %es,-0xe(%ebp)
c010013a:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c010013d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100141:	0f b7 c0             	movzwl %ax,%eax
c0100144:	83 e0 03             	and    $0x3,%eax
c0100147:	89 c2                	mov    %eax,%edx
c0100149:	a1 e0 0c 1b c0       	mov    0xc01b0ce0,%eax
c010014e:	83 ec 04             	sub    $0x4,%esp
c0100151:	52                   	push   %edx
c0100152:	50                   	push   %eax
c0100153:	68 c1 cd 10 c0       	push   $0xc010cdc1
c0100158:	e8 26 01 00 00       	call   c0100283 <cprintf>
c010015d:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  cs = %x\n", round, reg1);
c0100160:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100164:	0f b7 d0             	movzwl %ax,%edx
c0100167:	a1 e0 0c 1b c0       	mov    0xc01b0ce0,%eax
c010016c:	83 ec 04             	sub    $0x4,%esp
c010016f:	52                   	push   %edx
c0100170:	50                   	push   %eax
c0100171:	68 cf cd 10 c0       	push   $0xc010cdcf
c0100176:	e8 08 01 00 00       	call   c0100283 <cprintf>
c010017b:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ds = %x\n", round, reg2);
c010017e:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0100182:	0f b7 d0             	movzwl %ax,%edx
c0100185:	a1 e0 0c 1b c0       	mov    0xc01b0ce0,%eax
c010018a:	83 ec 04             	sub    $0x4,%esp
c010018d:	52                   	push   %edx
c010018e:	50                   	push   %eax
c010018f:	68 dd cd 10 c0       	push   $0xc010cddd
c0100194:	e8 ea 00 00 00       	call   c0100283 <cprintf>
c0100199:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  es = %x\n", round, reg3);
c010019c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001a0:	0f b7 d0             	movzwl %ax,%edx
c01001a3:	a1 e0 0c 1b c0       	mov    0xc01b0ce0,%eax
c01001a8:	83 ec 04             	sub    $0x4,%esp
c01001ab:	52                   	push   %edx
c01001ac:	50                   	push   %eax
c01001ad:	68 eb cd 10 c0       	push   $0xc010cdeb
c01001b2:	e8 cc 00 00 00       	call   c0100283 <cprintf>
c01001b7:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ss = %x\n", round, reg4);
c01001ba:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001be:	0f b7 d0             	movzwl %ax,%edx
c01001c1:	a1 e0 0c 1b c0       	mov    0xc01b0ce0,%eax
c01001c6:	83 ec 04             	sub    $0x4,%esp
c01001c9:	52                   	push   %edx
c01001ca:	50                   	push   %eax
c01001cb:	68 f9 cd 10 c0       	push   $0xc010cdf9
c01001d0:	e8 ae 00 00 00       	call   c0100283 <cprintf>
c01001d5:	83 c4 10             	add    $0x10,%esp
    round ++;
c01001d8:	a1 e0 0c 1b c0       	mov    0xc01b0ce0,%eax
c01001dd:	83 c0 01             	add    $0x1,%eax
c01001e0:	a3 e0 0c 1b c0       	mov    %eax,0xc01b0ce0
}
c01001e5:	90                   	nop
c01001e6:	c9                   	leave  
c01001e7:	c3                   	ret    

c01001e8 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c01001e8:	55                   	push   %ebp
c01001e9:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c01001eb:	90                   	nop
c01001ec:	5d                   	pop    %ebp
c01001ed:	c3                   	ret    

c01001ee <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c01001ee:	55                   	push   %ebp
c01001ef:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c01001f1:	90                   	nop
c01001f2:	5d                   	pop    %ebp
c01001f3:	c3                   	ret    

c01001f4 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c01001f4:	55                   	push   %ebp
c01001f5:	89 e5                	mov    %esp,%ebp
c01001f7:	83 ec 08             	sub    $0x8,%esp
    lab1_print_cur_status();
c01001fa:	e8 2c ff ff ff       	call   c010012b <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c01001ff:	83 ec 0c             	sub    $0xc,%esp
c0100202:	68 08 ce 10 c0       	push   $0xc010ce08
c0100207:	e8 77 00 00 00       	call   c0100283 <cprintf>
c010020c:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_user();
c010020f:	e8 d4 ff ff ff       	call   c01001e8 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100214:	e8 12 ff ff ff       	call   c010012b <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100219:	83 ec 0c             	sub    $0xc,%esp
c010021c:	68 28 ce 10 c0       	push   $0xc010ce28
c0100221:	e8 5d 00 00 00       	call   c0100283 <cprintf>
c0100226:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_kernel();
c0100229:	e8 c0 ff ff ff       	call   c01001ee <lab1_switch_to_kernel>
    lab1_print_cur_status();
c010022e:	e8 f8 fe ff ff       	call   c010012b <lab1_print_cur_status>
}
c0100233:	90                   	nop
c0100234:	c9                   	leave  
c0100235:	c3                   	ret    

c0100236 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100236:	55                   	push   %ebp
c0100237:	89 e5                	mov    %esp,%ebp
c0100239:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c010023c:	83 ec 0c             	sub    $0xc,%esp
c010023f:	ff 75 08             	pushl  0x8(%ebp)
c0100242:	e8 38 30 00 00       	call   c010327f <cons_putc>
c0100247:	83 c4 10             	add    $0x10,%esp
    (*cnt) ++;
c010024a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010024d:	8b 00                	mov    (%eax),%eax
c010024f:	8d 50 01             	lea    0x1(%eax),%edx
c0100252:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100255:	89 10                	mov    %edx,(%eax)
}
c0100257:	90                   	nop
c0100258:	c9                   	leave  
c0100259:	c3                   	ret    

c010025a <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c010025a:	55                   	push   %ebp
c010025b:	89 e5                	mov    %esp,%ebp
c010025d:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c0100260:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c0100267:	ff 75 0c             	pushl  0xc(%ebp)
c010026a:	ff 75 08             	pushl  0x8(%ebp)
c010026d:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100270:	50                   	push   %eax
c0100271:	68 36 02 10 c0       	push   $0xc0100236
c0100276:	e8 ab c5 00 00       	call   c010c826 <vprintfmt>
c010027b:	83 c4 10             	add    $0x10,%esp
    return cnt;
c010027e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100281:	c9                   	leave  
c0100282:	c3                   	ret    

c0100283 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100283:	55                   	push   %ebp
c0100284:	89 e5                	mov    %esp,%ebp
c0100286:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0100289:	8d 45 0c             	lea    0xc(%ebp),%eax
c010028c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c010028f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100292:	83 ec 08             	sub    $0x8,%esp
c0100295:	50                   	push   %eax
c0100296:	ff 75 08             	pushl  0x8(%ebp)
c0100299:	e8 bc ff ff ff       	call   c010025a <vcprintf>
c010029e:	83 c4 10             	add    $0x10,%esp
c01002a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01002a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01002a7:	c9                   	leave  
c01002a8:	c3                   	ret    

c01002a9 <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c01002a9:	55                   	push   %ebp
c01002aa:	89 e5                	mov    %esp,%ebp
c01002ac:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c01002af:	83 ec 0c             	sub    $0xc,%esp
c01002b2:	ff 75 08             	pushl  0x8(%ebp)
c01002b5:	e8 c5 2f 00 00       	call   c010327f <cons_putc>
c01002ba:	83 c4 10             	add    $0x10,%esp
}
c01002bd:	90                   	nop
c01002be:	c9                   	leave  
c01002bf:	c3                   	ret    

c01002c0 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c01002c0:	55                   	push   %ebp
c01002c1:	89 e5                	mov    %esp,%ebp
c01002c3:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c01002c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01002cd:	eb 14                	jmp    c01002e3 <cputs+0x23>
        cputch(c, &cnt);
c01002cf:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01002d3:	83 ec 08             	sub    $0x8,%esp
c01002d6:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01002d9:	52                   	push   %edx
c01002da:	50                   	push   %eax
c01002db:	e8 56 ff ff ff       	call   c0100236 <cputch>
c01002e0:	83 c4 10             	add    $0x10,%esp
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01002e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01002e6:	8d 50 01             	lea    0x1(%eax),%edx
c01002e9:	89 55 08             	mov    %edx,0x8(%ebp)
c01002ec:	0f b6 00             	movzbl (%eax),%eax
c01002ef:	88 45 f7             	mov    %al,-0x9(%ebp)
c01002f2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01002f6:	75 d7                	jne    c01002cf <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01002f8:	83 ec 08             	sub    $0x8,%esp
c01002fb:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01002fe:	50                   	push   %eax
c01002ff:	6a 0a                	push   $0xa
c0100301:	e8 30 ff ff ff       	call   c0100236 <cputch>
c0100306:	83 c4 10             	add    $0x10,%esp
    return cnt;
c0100309:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010030c:	c9                   	leave  
c010030d:	c3                   	ret    

c010030e <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c010030e:	55                   	push   %ebp
c010030f:	89 e5                	mov    %esp,%ebp
c0100311:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0100314:	e8 af 2f 00 00       	call   c01032c8 <cons_getc>
c0100319:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010031c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100320:	74 f2                	je     c0100314 <getchar+0x6>
        /* do nothing */;
    return c;
c0100322:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100325:	c9                   	leave  
c0100326:	c3                   	ret    

c0100327 <rb_node_create>:
#include <rb_tree.h>
#include <assert.h>

/* rb_node_create - create a new rb_node */
static inline rb_node *
rb_node_create(void) {
c0100327:	55                   	push   %ebp
c0100328:	89 e5                	mov    %esp,%ebp
c010032a:	83 ec 08             	sub    $0x8,%esp
    return kmalloc(sizeof(rb_node));
c010032d:	83 ec 0c             	sub    $0xc,%esp
c0100330:	6a 10                	push   $0x10
c0100332:	e8 3e 83 00 00       	call   c0108675 <kmalloc>
c0100337:	83 c4 10             	add    $0x10,%esp
}
c010033a:	c9                   	leave  
c010033b:	c3                   	ret    

c010033c <rb_tree_empty>:

/* rb_tree_empty - tests if tree is empty */
static inline bool
rb_tree_empty(rb_tree *tree) {
c010033c:	55                   	push   %ebp
c010033d:	89 e5                	mov    %esp,%ebp
c010033f:	83 ec 10             	sub    $0x10,%esp
    rb_node *nil = tree->nil, *root = tree->root;
c0100342:	8b 45 08             	mov    0x8(%ebp),%eax
c0100345:	8b 40 04             	mov    0x4(%eax),%eax
c0100348:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010034b:	8b 45 08             	mov    0x8(%ebp),%eax
c010034e:	8b 40 08             	mov    0x8(%eax),%eax
c0100351:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return root->left == nil;
c0100354:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100357:	8b 40 08             	mov    0x8(%eax),%eax
c010035a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010035d:	0f 94 c0             	sete   %al
c0100360:	0f b6 c0             	movzbl %al,%eax
}
c0100363:	c9                   	leave  
c0100364:	c3                   	ret    

c0100365 <rb_tree_create>:
 * Note that, root->left should always point to the node that is the root
 * of the tree. And nil points to a 'NULL' node which should always be
 * black and may have arbitrary children and parent node.
 * */
rb_tree *
rb_tree_create(int (*compare)(rb_node *node1, rb_node *node2)) {
c0100365:	55                   	push   %ebp
c0100366:	89 e5                	mov    %esp,%ebp
c0100368:	83 ec 18             	sub    $0x18,%esp
    assert(compare != NULL);
c010036b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010036f:	75 16                	jne    c0100387 <rb_tree_create+0x22>
c0100371:	68 48 ce 10 c0       	push   $0xc010ce48
c0100376:	68 58 ce 10 c0       	push   $0xc010ce58
c010037b:	6a 1f                	push   $0x1f
c010037d:	68 6d ce 10 c0       	push   $0xc010ce6d
c0100382:	e8 da 13 00 00       	call   c0101761 <__panic>

    rb_tree *tree;
    rb_node *nil, *root;

    if ((tree = kmalloc(sizeof(rb_tree))) == NULL) {
c0100387:	83 ec 0c             	sub    $0xc,%esp
c010038a:	6a 0c                	push   $0xc
c010038c:	e8 e4 82 00 00       	call   c0108675 <kmalloc>
c0100391:	83 c4 10             	add    $0x10,%esp
c0100394:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100397:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010039b:	0f 84 b5 00 00 00    	je     c0100456 <rb_tree_create+0xf1>
        goto bad_tree;
    }

    tree->compare = compare;
c01003a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01003a4:	8b 55 08             	mov    0x8(%ebp),%edx
c01003a7:	89 10                	mov    %edx,(%eax)

    if ((nil = rb_node_create()) == NULL) {
c01003a9:	e8 79 ff ff ff       	call   c0100327 <rb_node_create>
c01003ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01003b1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01003b5:	0f 84 8a 00 00 00    	je     c0100445 <rb_tree_create+0xe0>
        goto bad_node_cleanup_tree;
    }

    nil->parent = nil->left = nil->right = nil;
c01003bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003be:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01003c1:	89 50 0c             	mov    %edx,0xc(%eax)
c01003c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003c7:	8b 50 0c             	mov    0xc(%eax),%edx
c01003ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003cd:	89 50 08             	mov    %edx,0x8(%eax)
c01003d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003d3:	8b 50 08             	mov    0x8(%eax),%edx
c01003d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003d9:	89 50 04             	mov    %edx,0x4(%eax)
    nil->red = 0;
c01003dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01003df:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    tree->nil = nil;
c01003e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01003e8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01003eb:	89 50 04             	mov    %edx,0x4(%eax)

    if ((root = rb_node_create()) == NULL) {
c01003ee:	e8 34 ff ff ff       	call   c0100327 <rb_node_create>
c01003f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01003f6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01003fa:	74 38                	je     c0100434 <rb_tree_create+0xcf>
        goto bad_node_cleanup_nil;
    }

    root->parent = root->left = root->right = nil;
c01003fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01003ff:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100402:	89 50 0c             	mov    %edx,0xc(%eax)
c0100405:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100408:	8b 50 0c             	mov    0xc(%eax),%edx
c010040b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010040e:	89 50 08             	mov    %edx,0x8(%eax)
c0100411:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100414:	8b 50 08             	mov    0x8(%eax),%edx
c0100417:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010041a:	89 50 04             	mov    %edx,0x4(%eax)
    root->red = 0;
c010041d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100420:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    tree->root = root;
c0100426:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100429:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010042c:	89 50 08             	mov    %edx,0x8(%eax)
    return tree;
c010042f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100432:	eb 28                	jmp    c010045c <rb_tree_create+0xf7>
    nil->parent = nil->left = nil->right = nil;
    nil->red = 0;
    tree->nil = nil;

    if ((root = rb_node_create()) == NULL) {
        goto bad_node_cleanup_nil;
c0100434:	90                   	nop
    root->red = 0;
    tree->root = root;
    return tree;

bad_node_cleanup_nil:
    kfree(nil);
c0100435:	83 ec 0c             	sub    $0xc,%esp
c0100438:	ff 75 f0             	pushl  -0x10(%ebp)
c010043b:	e8 4d 82 00 00       	call   c010868d <kfree>
c0100440:	83 c4 10             	add    $0x10,%esp
c0100443:	eb 01                	jmp    c0100446 <rb_tree_create+0xe1>
    }

    tree->compare = compare;

    if ((nil = rb_node_create()) == NULL) {
        goto bad_node_cleanup_tree;
c0100445:	90                   	nop
    return tree;

bad_node_cleanup_nil:
    kfree(nil);
bad_node_cleanup_tree:
    kfree(tree);
c0100446:	83 ec 0c             	sub    $0xc,%esp
c0100449:	ff 75 f4             	pushl  -0xc(%ebp)
c010044c:	e8 3c 82 00 00       	call   c010868d <kfree>
c0100451:	83 c4 10             	add    $0x10,%esp
c0100454:	eb 01                	jmp    c0100457 <rb_tree_create+0xf2>

    rb_tree *tree;
    rb_node *nil, *root;

    if ((tree = kmalloc(sizeof(rb_tree))) == NULL) {
        goto bad_tree;
c0100456:	90                   	nop
bad_node_cleanup_nil:
    kfree(nil);
bad_node_cleanup_tree:
    kfree(tree);
bad_tree:
    return NULL;
c0100457:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010045c:	c9                   	leave  
c010045d:	c3                   	ret    

c010045e <rb_left_rotate>:
    y->_left = x;                                               \
    x->parent = y;                                              \
    assert(!(nil->red));                                        \
}

FUNC_ROTATE(rb_left_rotate, left, right);
c010045e:	55                   	push   %ebp
c010045f:	89 e5                	mov    %esp,%ebp
c0100461:	83 ec 18             	sub    $0x18,%esp
c0100464:	8b 45 08             	mov    0x8(%ebp),%eax
c0100467:	8b 40 04             	mov    0x4(%eax),%eax
c010046a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010046d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100470:	8b 40 0c             	mov    0xc(%eax),%eax
c0100473:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100476:	8b 45 08             	mov    0x8(%ebp),%eax
c0100479:	8b 40 08             	mov    0x8(%eax),%eax
c010047c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010047f:	74 10                	je     c0100491 <rb_left_rotate+0x33>
c0100481:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100484:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100487:	74 08                	je     c0100491 <rb_left_rotate+0x33>
c0100489:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010048c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010048f:	75 16                	jne    c01004a7 <rb_left_rotate+0x49>
c0100491:	68 84 ce 10 c0       	push   $0xc010ce84
c0100496:	68 58 ce 10 c0       	push   $0xc010ce58
c010049b:	6a 64                	push   $0x64
c010049d:	68 6d ce 10 c0       	push   $0xc010ce6d
c01004a2:	e8 ba 12 00 00       	call   c0101761 <__panic>
c01004a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004aa:	8b 50 08             	mov    0x8(%eax),%edx
c01004ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004b0:	89 50 0c             	mov    %edx,0xc(%eax)
c01004b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004b6:	8b 40 08             	mov    0x8(%eax),%eax
c01004b9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01004bc:	74 0c                	je     c01004ca <rb_left_rotate+0x6c>
c01004be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004c1:	8b 40 08             	mov    0x8(%eax),%eax
c01004c4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01004c7:	89 50 04             	mov    %edx,0x4(%eax)
c01004ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004cd:	8b 50 04             	mov    0x4(%eax),%edx
c01004d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d3:	89 50 04             	mov    %edx,0x4(%eax)
c01004d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004d9:	8b 40 04             	mov    0x4(%eax),%eax
c01004dc:	8b 40 08             	mov    0x8(%eax),%eax
c01004df:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01004e2:	75 0e                	jne    c01004f2 <rb_left_rotate+0x94>
c01004e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004e7:	8b 40 04             	mov    0x4(%eax),%eax
c01004ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004ed:	89 50 08             	mov    %edx,0x8(%eax)
c01004f0:	eb 0c                	jmp    c01004fe <rb_left_rotate+0xa0>
c01004f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004f5:	8b 40 04             	mov    0x4(%eax),%eax
c01004f8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004fb:	89 50 0c             	mov    %edx,0xc(%eax)
c01004fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100501:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100504:	89 50 08             	mov    %edx,0x8(%eax)
c0100507:	8b 45 0c             	mov    0xc(%ebp),%eax
c010050a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010050d:	89 50 04             	mov    %edx,0x4(%eax)
c0100510:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100513:	8b 00                	mov    (%eax),%eax
c0100515:	85 c0                	test   %eax,%eax
c0100517:	74 16                	je     c010052f <rb_left_rotate+0xd1>
c0100519:	68 ac ce 10 c0       	push   $0xc010ceac
c010051e:	68 58 ce 10 c0       	push   $0xc010ce58
c0100523:	6a 64                	push   $0x64
c0100525:	68 6d ce 10 c0       	push   $0xc010ce6d
c010052a:	e8 32 12 00 00       	call   c0101761 <__panic>
c010052f:	90                   	nop
c0100530:	c9                   	leave  
c0100531:	c3                   	ret    

c0100532 <rb_right_rotate>:
FUNC_ROTATE(rb_right_rotate, right, left);
c0100532:	55                   	push   %ebp
c0100533:	89 e5                	mov    %esp,%ebp
c0100535:	83 ec 18             	sub    $0x18,%esp
c0100538:	8b 45 08             	mov    0x8(%ebp),%eax
c010053b:	8b 40 04             	mov    0x4(%eax),%eax
c010053e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100541:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100544:	8b 40 08             	mov    0x8(%eax),%eax
c0100547:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010054a:	8b 45 08             	mov    0x8(%ebp),%eax
c010054d:	8b 40 08             	mov    0x8(%eax),%eax
c0100550:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0100553:	74 10                	je     c0100565 <rb_right_rotate+0x33>
c0100555:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100558:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010055b:	74 08                	je     c0100565 <rb_right_rotate+0x33>
c010055d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100560:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100563:	75 16                	jne    c010057b <rb_right_rotate+0x49>
c0100565:	68 84 ce 10 c0       	push   $0xc010ce84
c010056a:	68 58 ce 10 c0       	push   $0xc010ce58
c010056f:	6a 65                	push   $0x65
c0100571:	68 6d ce 10 c0       	push   $0xc010ce6d
c0100576:	e8 e6 11 00 00       	call   c0101761 <__panic>
c010057b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010057e:	8b 50 0c             	mov    0xc(%eax),%edx
c0100581:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100584:	89 50 08             	mov    %edx,0x8(%eax)
c0100587:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010058a:	8b 40 0c             	mov    0xc(%eax),%eax
c010058d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100590:	74 0c                	je     c010059e <rb_right_rotate+0x6c>
c0100592:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100595:	8b 40 0c             	mov    0xc(%eax),%eax
c0100598:	8b 55 0c             	mov    0xc(%ebp),%edx
c010059b:	89 50 04             	mov    %edx,0x4(%eax)
c010059e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005a1:	8b 50 04             	mov    0x4(%eax),%edx
c01005a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005a7:	89 50 04             	mov    %edx,0x4(%eax)
c01005aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005ad:	8b 40 04             	mov    0x4(%eax),%eax
c01005b0:	8b 40 0c             	mov    0xc(%eax),%eax
c01005b3:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01005b6:	75 0e                	jne    c01005c6 <rb_right_rotate+0x94>
c01005b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005bb:	8b 40 04             	mov    0x4(%eax),%eax
c01005be:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005c1:	89 50 0c             	mov    %edx,0xc(%eax)
c01005c4:	eb 0c                	jmp    c01005d2 <rb_right_rotate+0xa0>
c01005c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005c9:	8b 40 04             	mov    0x4(%eax),%eax
c01005cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005cf:	89 50 08             	mov    %edx,0x8(%eax)
c01005d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005d5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01005d8:	89 50 0c             	mov    %edx,0xc(%eax)
c01005db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005de:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005e1:	89 50 04             	mov    %edx,0x4(%eax)
c01005e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01005e7:	8b 00                	mov    (%eax),%eax
c01005e9:	85 c0                	test   %eax,%eax
c01005eb:	74 16                	je     c0100603 <rb_right_rotate+0xd1>
c01005ed:	68 ac ce 10 c0       	push   $0xc010ceac
c01005f2:	68 58 ce 10 c0       	push   $0xc010ce58
c01005f7:	6a 65                	push   $0x65
c01005f9:	68 6d ce 10 c0       	push   $0xc010ce6d
c01005fe:	e8 5e 11 00 00       	call   c0101761 <__panic>
c0100603:	90                   	nop
c0100604:	c9                   	leave  
c0100605:	c3                   	ret    

c0100606 <rb_insert_binary>:
 * rb_insert_binary - insert @node to red-black @tree as if it were
 * a regular binary tree. This function is only intended to be called
 * by function rb_insert.
 * */
static inline void
rb_insert_binary(rb_tree *tree, rb_node *node) {
c0100606:	55                   	push   %ebp
c0100607:	89 e5                	mov    %esp,%ebp
c0100609:	83 ec 28             	sub    $0x28,%esp
    rb_node *x, *y, *z = node, *nil = tree->nil, *root = tree->root;
c010060c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010060f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100612:	8b 45 08             	mov    0x8(%ebp),%eax
c0100615:	8b 40 04             	mov    0x4(%eax),%eax
c0100618:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010061b:	8b 45 08             	mov    0x8(%ebp),%eax
c010061e:	8b 40 08             	mov    0x8(%eax),%eax
c0100621:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    z->left = z->right = nil;
c0100624:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100627:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010062a:	89 50 0c             	mov    %edx,0xc(%eax)
c010062d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100630:	8b 50 0c             	mov    0xc(%eax),%edx
c0100633:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100636:	89 50 08             	mov    %edx,0x8(%eax)
    y = root, x = y->left;
c0100639:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010063c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010063f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100642:	8b 40 08             	mov    0x8(%eax),%eax
c0100645:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (x != nil) {
c0100648:	eb 2e                	jmp    c0100678 <rb_insert_binary+0x72>
        y = x;
c010064a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010064d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        x = (COMPARE(tree, x, node) > 0) ? x->left : x->right;
c0100650:	8b 45 08             	mov    0x8(%ebp),%eax
c0100653:	8b 00                	mov    (%eax),%eax
c0100655:	83 ec 08             	sub    $0x8,%esp
c0100658:	ff 75 0c             	pushl  0xc(%ebp)
c010065b:	ff 75 f4             	pushl  -0xc(%ebp)
c010065e:	ff d0                	call   *%eax
c0100660:	83 c4 10             	add    $0x10,%esp
c0100663:	85 c0                	test   %eax,%eax
c0100665:	7e 08                	jle    c010066f <rb_insert_binary+0x69>
c0100667:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010066a:	8b 40 08             	mov    0x8(%eax),%eax
c010066d:	eb 06                	jmp    c0100675 <rb_insert_binary+0x6f>
c010066f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100672:	8b 40 0c             	mov    0xc(%eax),%eax
c0100675:	89 45 f4             	mov    %eax,-0xc(%ebp)
rb_insert_binary(rb_tree *tree, rb_node *node) {
    rb_node *x, *y, *z = node, *nil = tree->nil, *root = tree->root;

    z->left = z->right = nil;
    y = root, x = y->left;
    while (x != nil) {
c0100678:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010067b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010067e:	75 ca                	jne    c010064a <rb_insert_binary+0x44>
        y = x;
        x = (COMPARE(tree, x, node) > 0) ? x->left : x->right;
    }
    z->parent = y;
c0100680:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100683:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100686:	89 50 04             	mov    %edx,0x4(%eax)
    if (y == root || COMPARE(tree, y, z) > 0) {
c0100689:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010068c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010068f:	74 17                	je     c01006a8 <rb_insert_binary+0xa2>
c0100691:	8b 45 08             	mov    0x8(%ebp),%eax
c0100694:	8b 00                	mov    (%eax),%eax
c0100696:	83 ec 08             	sub    $0x8,%esp
c0100699:	ff 75 ec             	pushl  -0x14(%ebp)
c010069c:	ff 75 f0             	pushl  -0x10(%ebp)
c010069f:	ff d0                	call   *%eax
c01006a1:	83 c4 10             	add    $0x10,%esp
c01006a4:	85 c0                	test   %eax,%eax
c01006a6:	7e 0b                	jle    c01006b3 <rb_insert_binary+0xad>
        y->left = z;
c01006a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01006ab:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01006ae:	89 50 08             	mov    %edx,0x8(%eax)
c01006b1:	eb 09                	jmp    c01006bc <rb_insert_binary+0xb6>
    }
    else {
        y->right = z;
c01006b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01006b6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01006b9:	89 50 0c             	mov    %edx,0xc(%eax)
    }
}
c01006bc:	90                   	nop
c01006bd:	c9                   	leave  
c01006be:	c3                   	ret    

c01006bf <rb_insert>:

/* rb_insert - insert a node to red-black tree */
void
rb_insert(rb_tree *tree, rb_node *node) {
c01006bf:	55                   	push   %ebp
c01006c0:	89 e5                	mov    %esp,%ebp
c01006c2:	83 ec 18             	sub    $0x18,%esp
    rb_insert_binary(tree, node);
c01006c5:	83 ec 08             	sub    $0x8,%esp
c01006c8:	ff 75 0c             	pushl  0xc(%ebp)
c01006cb:	ff 75 08             	pushl  0x8(%ebp)
c01006ce:	e8 33 ff ff ff       	call   c0100606 <rb_insert_binary>
c01006d3:	83 c4 10             	add    $0x10,%esp
    node->red = 1;
c01006d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006d9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    rb_node *x = node, *y;
c01006df:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
            x->parent->parent->red = 1;                         \
            rb_##_right##_rotate(tree, x->parent->parent);      \
        }                                                       \
    } while (0)

    while (x->parent->red) {
c01006e5:	e9 6c 01 00 00       	jmp    c0100856 <rb_insert+0x197>
        if (x->parent == x->parent->parent->left) {
c01006ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006ed:	8b 50 04             	mov    0x4(%eax),%edx
c01006f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006f3:	8b 40 04             	mov    0x4(%eax),%eax
c01006f6:	8b 40 04             	mov    0x4(%eax),%eax
c01006f9:	8b 40 08             	mov    0x8(%eax),%eax
c01006fc:	39 c2                	cmp    %eax,%edx
c01006fe:	0f 85 ad 00 00 00    	jne    c01007b1 <rb_insert+0xf2>
            RB_INSERT_SUB(left, right);
c0100704:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100707:	8b 40 04             	mov    0x4(%eax),%eax
c010070a:	8b 40 04             	mov    0x4(%eax),%eax
c010070d:	8b 40 0c             	mov    0xc(%eax),%eax
c0100710:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100713:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100716:	8b 00                	mov    (%eax),%eax
c0100718:	85 c0                	test   %eax,%eax
c010071a:	74 35                	je     c0100751 <rb_insert+0x92>
c010071c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010071f:	8b 40 04             	mov    0x4(%eax),%eax
c0100722:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100728:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010072b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100731:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100734:	8b 40 04             	mov    0x4(%eax),%eax
c0100737:	8b 40 04             	mov    0x4(%eax),%eax
c010073a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100740:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100743:	8b 40 04             	mov    0x4(%eax),%eax
c0100746:	8b 40 04             	mov    0x4(%eax),%eax
c0100749:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010074c:	e9 05 01 00 00       	jmp    c0100856 <rb_insert+0x197>
c0100751:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100754:	8b 40 04             	mov    0x4(%eax),%eax
c0100757:	8b 40 0c             	mov    0xc(%eax),%eax
c010075a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010075d:	75 1a                	jne    c0100779 <rb_insert+0xba>
c010075f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100762:	8b 40 04             	mov    0x4(%eax),%eax
c0100765:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100768:	83 ec 08             	sub    $0x8,%esp
c010076b:	ff 75 f4             	pushl  -0xc(%ebp)
c010076e:	ff 75 08             	pushl  0x8(%ebp)
c0100771:	e8 e8 fc ff ff       	call   c010045e <rb_left_rotate>
c0100776:	83 c4 10             	add    $0x10,%esp
c0100779:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010077c:	8b 40 04             	mov    0x4(%eax),%eax
c010077f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100785:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100788:	8b 40 04             	mov    0x4(%eax),%eax
c010078b:	8b 40 04             	mov    0x4(%eax),%eax
c010078e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100794:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100797:	8b 40 04             	mov    0x4(%eax),%eax
c010079a:	8b 40 04             	mov    0x4(%eax),%eax
c010079d:	83 ec 08             	sub    $0x8,%esp
c01007a0:	50                   	push   %eax
c01007a1:	ff 75 08             	pushl  0x8(%ebp)
c01007a4:	e8 89 fd ff ff       	call   c0100532 <rb_right_rotate>
c01007a9:	83 c4 10             	add    $0x10,%esp
c01007ac:	e9 a5 00 00 00       	jmp    c0100856 <rb_insert+0x197>
        }
        else {
            RB_INSERT_SUB(right, left);
c01007b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007b4:	8b 40 04             	mov    0x4(%eax),%eax
c01007b7:	8b 40 04             	mov    0x4(%eax),%eax
c01007ba:	8b 40 08             	mov    0x8(%eax),%eax
c01007bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01007c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01007c3:	8b 00                	mov    (%eax),%eax
c01007c5:	85 c0                	test   %eax,%eax
c01007c7:	74 32                	je     c01007fb <rb_insert+0x13c>
c01007c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007cc:	8b 40 04             	mov    0x4(%eax),%eax
c01007cf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c01007d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01007d8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c01007de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007e1:	8b 40 04             	mov    0x4(%eax),%eax
c01007e4:	8b 40 04             	mov    0x4(%eax),%eax
c01007e7:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c01007ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007f0:	8b 40 04             	mov    0x4(%eax),%eax
c01007f3:	8b 40 04             	mov    0x4(%eax),%eax
c01007f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01007f9:	eb 5b                	jmp    c0100856 <rb_insert+0x197>
c01007fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007fe:	8b 40 04             	mov    0x4(%eax),%eax
c0100801:	8b 40 08             	mov    0x8(%eax),%eax
c0100804:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100807:	75 1a                	jne    c0100823 <rb_insert+0x164>
c0100809:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010080c:	8b 40 04             	mov    0x4(%eax),%eax
c010080f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100812:	83 ec 08             	sub    $0x8,%esp
c0100815:	ff 75 f4             	pushl  -0xc(%ebp)
c0100818:	ff 75 08             	pushl  0x8(%ebp)
c010081b:	e8 12 fd ff ff       	call   c0100532 <rb_right_rotate>
c0100820:	83 c4 10             	add    $0x10,%esp
c0100823:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100826:	8b 40 04             	mov    0x4(%eax),%eax
c0100829:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010082f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100832:	8b 40 04             	mov    0x4(%eax),%eax
c0100835:	8b 40 04             	mov    0x4(%eax),%eax
c0100838:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010083e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100841:	8b 40 04             	mov    0x4(%eax),%eax
c0100844:	8b 40 04             	mov    0x4(%eax),%eax
c0100847:	83 ec 08             	sub    $0x8,%esp
c010084a:	50                   	push   %eax
c010084b:	ff 75 08             	pushl  0x8(%ebp)
c010084e:	e8 0b fc ff ff       	call   c010045e <rb_left_rotate>
c0100853:	83 c4 10             	add    $0x10,%esp
            x->parent->parent->red = 1;                         \
            rb_##_right##_rotate(tree, x->parent->parent);      \
        }                                                       \
    } while (0)

    while (x->parent->red) {
c0100856:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100859:	8b 40 04             	mov    0x4(%eax),%eax
c010085c:	8b 00                	mov    (%eax),%eax
c010085e:	85 c0                	test   %eax,%eax
c0100860:	0f 85 84 fe ff ff    	jne    c01006ea <rb_insert+0x2b>
        }
        else {
            RB_INSERT_SUB(right, left);
        }
    }
    tree->root->left->red = 0;
c0100866:	8b 45 08             	mov    0x8(%ebp),%eax
c0100869:	8b 40 08             	mov    0x8(%eax),%eax
c010086c:	8b 40 08             	mov    0x8(%eax),%eax
c010086f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    assert(!(tree->nil->red) && !(tree->root->red));
c0100875:	8b 45 08             	mov    0x8(%ebp),%eax
c0100878:	8b 40 04             	mov    0x4(%eax),%eax
c010087b:	8b 00                	mov    (%eax),%eax
c010087d:	85 c0                	test   %eax,%eax
c010087f:	75 0c                	jne    c010088d <rb_insert+0x1ce>
c0100881:	8b 45 08             	mov    0x8(%ebp),%eax
c0100884:	8b 40 08             	mov    0x8(%eax),%eax
c0100887:	8b 00                	mov    (%eax),%eax
c0100889:	85 c0                	test   %eax,%eax
c010088b:	74 19                	je     c01008a6 <rb_insert+0x1e7>
c010088d:	68 b8 ce 10 c0       	push   $0xc010ceb8
c0100892:	68 58 ce 10 c0       	push   $0xc010ce58
c0100897:	68 a9 00 00 00       	push   $0xa9
c010089c:	68 6d ce 10 c0       	push   $0xc010ce6d
c01008a1:	e8 bb 0e 00 00       	call   c0101761 <__panic>

#undef RB_INSERT_SUB
}
c01008a6:	90                   	nop
c01008a7:	c9                   	leave  
c01008a8:	c3                   	ret    

c01008a9 <rb_tree_successor>:
 * rb_tree_successor - returns the successor of @node, or nil
 * if no successor exists. Make sure that @node must belong to @tree,
 * and this function should only be called by rb_node_prev.
 * */
static inline rb_node *
rb_tree_successor(rb_tree *tree, rb_node *node) {
c01008a9:	55                   	push   %ebp
c01008aa:	89 e5                	mov    %esp,%ebp
c01008ac:	83 ec 10             	sub    $0x10,%esp
    rb_node *x = node, *y, *nil = tree->nil;
c01008af:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008b2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01008b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01008b8:	8b 40 04             	mov    0x4(%eax),%eax
c01008bb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ((y = x->right) != nil) {
c01008be:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01008c1:	8b 40 0c             	mov    0xc(%eax),%eax
c01008c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01008c7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008ca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01008cd:	74 1b                	je     c01008ea <rb_tree_successor+0x41>
        while (y->left != nil) {
c01008cf:	eb 09                	jmp    c01008da <rb_tree_successor+0x31>
            y = y->left;
c01008d1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008d4:	8b 40 08             	mov    0x8(%eax),%eax
c01008d7:	89 45 f8             	mov    %eax,-0x8(%ebp)
static inline rb_node *
rb_tree_successor(rb_tree *tree, rb_node *node) {
    rb_node *x = node, *y, *nil = tree->nil;

    if ((y = x->right) != nil) {
        while (y->left != nil) {
c01008da:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008dd:	8b 40 08             	mov    0x8(%eax),%eax
c01008e0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01008e3:	75 ec                	jne    c01008d1 <rb_tree_successor+0x28>
            y = y->left;
        }
        return y;
c01008e5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008e8:	eb 38                	jmp    c0100922 <rb_tree_successor+0x79>
    }
    else {
        y = x->parent;
c01008ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01008ed:	8b 40 04             	mov    0x4(%eax),%eax
c01008f0:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (x == y->right) {
c01008f3:	eb 0f                	jmp    c0100904 <rb_tree_successor+0x5b>
            x = y, y = y->parent;
c01008f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01008fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01008fe:	8b 40 04             	mov    0x4(%eax),%eax
c0100901:	89 45 f8             	mov    %eax,-0x8(%ebp)
        }
        return y;
    }
    else {
        y = x->parent;
        while (x == y->right) {
c0100904:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100907:	8b 40 0c             	mov    0xc(%eax),%eax
c010090a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010090d:	74 e6                	je     c01008f5 <rb_tree_successor+0x4c>
            x = y, y = y->parent;
        }
        if (y == tree->root) {
c010090f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100912:	8b 40 08             	mov    0x8(%eax),%eax
c0100915:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0100918:	75 05                	jne    c010091f <rb_tree_successor+0x76>
            return nil;
c010091a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091d:	eb 03                	jmp    c0100922 <rb_tree_successor+0x79>
        }
        return y;
c010091f:	8b 45 f8             	mov    -0x8(%ebp),%eax
    }
}
c0100922:	c9                   	leave  
c0100923:	c3                   	ret    

c0100924 <rb_tree_predecessor>:
/* *
 * rb_tree_predecessor - returns the predecessor of @node, or nil
 * if no predecessor exists, likes rb_tree_successor.
 * */
static inline rb_node *
rb_tree_predecessor(rb_tree *tree, rb_node *node) {
c0100924:	55                   	push   %ebp
c0100925:	89 e5                	mov    %esp,%ebp
c0100927:	83 ec 10             	sub    $0x10,%esp
    rb_node *x = node, *y, *nil = tree->nil;
c010092a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010092d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100930:	8b 45 08             	mov    0x8(%ebp),%eax
c0100933:	8b 40 04             	mov    0x4(%eax),%eax
c0100936:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if ((y = x->left) != nil) {
c0100939:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010093c:	8b 40 08             	mov    0x8(%eax),%eax
c010093f:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0100942:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100945:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100948:	74 1b                	je     c0100965 <rb_tree_predecessor+0x41>
        while (y->right != nil) {
c010094a:	eb 09                	jmp    c0100955 <rb_tree_predecessor+0x31>
            y = y->right;
c010094c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010094f:	8b 40 0c             	mov    0xc(%eax),%eax
c0100952:	89 45 f8             	mov    %eax,-0x8(%ebp)
static inline rb_node *
rb_tree_predecessor(rb_tree *tree, rb_node *node) {
    rb_node *x = node, *y, *nil = tree->nil;

    if ((y = x->left) != nil) {
        while (y->right != nil) {
c0100955:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100958:	8b 40 0c             	mov    0xc(%eax),%eax
c010095b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010095e:	75 ec                	jne    c010094c <rb_tree_predecessor+0x28>
            y = y->right;
        }
        return y;
c0100960:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100963:	eb 38                	jmp    c010099d <rb_tree_predecessor+0x79>
    }
    else {
        y = x->parent;
c0100965:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100968:	8b 40 04             	mov    0x4(%eax),%eax
c010096b:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (x == y->left) {
c010096e:	eb 1f                	jmp    c010098f <rb_tree_predecessor+0x6b>
            if (y == tree->root) {
c0100970:	8b 45 08             	mov    0x8(%ebp),%eax
c0100973:	8b 40 08             	mov    0x8(%eax),%eax
c0100976:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0100979:	75 05                	jne    c0100980 <rb_tree_predecessor+0x5c>
                return nil;
c010097b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010097e:	eb 1d                	jmp    c010099d <rb_tree_predecessor+0x79>
            }
            x = y, y = y->parent;
c0100980:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100983:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100986:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100989:	8b 40 04             	mov    0x4(%eax),%eax
c010098c:	89 45 f8             	mov    %eax,-0x8(%ebp)
        }
        return y;
    }
    else {
        y = x->parent;
        while (x == y->left) {
c010098f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100992:	8b 40 08             	mov    0x8(%eax),%eax
c0100995:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100998:	74 d6                	je     c0100970 <rb_tree_predecessor+0x4c>
            if (y == tree->root) {
                return nil;
            }
            x = y, y = y->parent;
        }
        return y;
c010099a:	8b 45 f8             	mov    -0x8(%ebp),%eax
    }
}
c010099d:	c9                   	leave  
c010099e:	c3                   	ret    

c010099f <rb_search>:
 * rb_search - returns a node with value 'equal' to @key (according to
 * function @compare). If there're multiple nodes with value 'equal' to @key,
 * the functions returns the one highest in the tree.
 * */
rb_node *
rb_search(rb_tree *tree, int (*compare)(rb_node *node, void *key), void *key) {
c010099f:	55                   	push   %ebp
c01009a0:	89 e5                	mov    %esp,%ebp
c01009a2:	83 ec 18             	sub    $0x18,%esp
    rb_node *nil = tree->nil, *node = tree->root->left;
c01009a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01009a8:	8b 40 04             	mov    0x4(%eax),%eax
c01009ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01009ae:	8b 45 08             	mov    0x8(%ebp),%eax
c01009b1:	8b 40 08             	mov    0x8(%eax),%eax
c01009b4:	8b 40 08             	mov    0x8(%eax),%eax
c01009b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int r;
    while (node != nil && (r = compare(node, key)) != 0) {
c01009ba:	eb 17                	jmp    c01009d3 <rb_search+0x34>
        node = (r > 0) ? node->left : node->right;
c01009bc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01009c0:	7e 08                	jle    c01009ca <rb_search+0x2b>
c01009c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009c5:	8b 40 08             	mov    0x8(%eax),%eax
c01009c8:	eb 06                	jmp    c01009d0 <rb_search+0x31>
c01009ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009cd:	8b 40 0c             	mov    0xc(%eax),%eax
c01009d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * */
rb_node *
rb_search(rb_tree *tree, int (*compare)(rb_node *node, void *key), void *key) {
    rb_node *nil = tree->nil, *node = tree->root->left;
    int r;
    while (node != nil && (r = compare(node, key)) != 0) {
c01009d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009d6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01009d9:	74 1a                	je     c01009f5 <rb_search+0x56>
c01009db:	83 ec 08             	sub    $0x8,%esp
c01009de:	ff 75 10             	pushl  0x10(%ebp)
c01009e1:	ff 75 f4             	pushl  -0xc(%ebp)
c01009e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009e7:	ff d0                	call   *%eax
c01009e9:	83 c4 10             	add    $0x10,%esp
c01009ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01009ef:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01009f3:	75 c7                	jne    c01009bc <rb_search+0x1d>
        node = (r > 0) ? node->left : node->right;
    }
    return (node != nil) ? node : NULL;
c01009f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009f8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01009fb:	74 05                	je     c0100a02 <rb_search+0x63>
c01009fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a00:	eb 05                	jmp    c0100a07 <rb_search+0x68>
c0100a02:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a07:	c9                   	leave  
c0100a08:	c3                   	ret    

c0100a09 <rb_delete_fixup>:
/* *
 * rb_delete_fixup - performs rotations and changes colors to restore
 * red-black properties after a node is deleted.
 * */
static void
rb_delete_fixup(rb_tree *tree, rb_node *node) {
c0100a09:	55                   	push   %ebp
c0100a0a:	89 e5                	mov    %esp,%ebp
c0100a0c:	83 ec 18             	sub    $0x18,%esp
    rb_node *x = node, *w, *root = tree->root->left;
c0100a0f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100a15:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a18:	8b 40 08             	mov    0x8(%eax),%eax
c0100a1b:	8b 40 08             	mov    0x8(%eax),%eax
c0100a1e:	89 45 ec             	mov    %eax,-0x14(%ebp)
            rb_##_left##_rotate(tree, x->parent);               \
            x = root;                                           \
        }                                                       \
    } while (0)

    while (x != root && !x->red) {
c0100a21:	e9 04 02 00 00       	jmp    c0100c2a <rb_delete_fixup+0x221>
        if (x == x->parent->left) {
c0100a26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a29:	8b 40 04             	mov    0x4(%eax),%eax
c0100a2c:	8b 40 08             	mov    0x8(%eax),%eax
c0100a2f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100a32:	0f 85 fd 00 00 00    	jne    c0100b35 <rb_delete_fixup+0x12c>
            RB_DELETE_FIXUP_SUB(left, right);
c0100a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a3b:	8b 40 04             	mov    0x4(%eax),%eax
c0100a3e:	8b 40 0c             	mov    0xc(%eax),%eax
c0100a41:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a47:	8b 00                	mov    (%eax),%eax
c0100a49:	85 c0                	test   %eax,%eax
c0100a4b:	74 36                	je     c0100a83 <rb_delete_fixup+0x7a>
c0100a4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a50:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100a56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a59:	8b 40 04             	mov    0x4(%eax),%eax
c0100a5c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100a62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a65:	8b 40 04             	mov    0x4(%eax),%eax
c0100a68:	83 ec 08             	sub    $0x8,%esp
c0100a6b:	50                   	push   %eax
c0100a6c:	ff 75 08             	pushl  0x8(%ebp)
c0100a6f:	e8 ea f9 ff ff       	call   c010045e <rb_left_rotate>
c0100a74:	83 c4 10             	add    $0x10,%esp
c0100a77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a7a:	8b 40 04             	mov    0x4(%eax),%eax
c0100a7d:	8b 40 0c             	mov    0xc(%eax),%eax
c0100a80:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100a83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a86:	8b 40 08             	mov    0x8(%eax),%eax
c0100a89:	8b 00                	mov    (%eax),%eax
c0100a8b:	85 c0                	test   %eax,%eax
c0100a8d:	75 23                	jne    c0100ab2 <rb_delete_fixup+0xa9>
c0100a8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a92:	8b 40 0c             	mov    0xc(%eax),%eax
c0100a95:	8b 00                	mov    (%eax),%eax
c0100a97:	85 c0                	test   %eax,%eax
c0100a99:	75 17                	jne    c0100ab2 <rb_delete_fixup+0xa9>
c0100a9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100a9e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100aa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100aa7:	8b 40 04             	mov    0x4(%eax),%eax
c0100aaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100aad:	e9 78 01 00 00       	jmp    c0100c2a <rb_delete_fixup+0x221>
c0100ab2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100ab5:	8b 40 0c             	mov    0xc(%eax),%eax
c0100ab8:	8b 00                	mov    (%eax),%eax
c0100aba:	85 c0                	test   %eax,%eax
c0100abc:	75 32                	jne    c0100af0 <rb_delete_fixup+0xe7>
c0100abe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100ac1:	8b 40 08             	mov    0x8(%eax),%eax
c0100ac4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100aca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100acd:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100ad3:	83 ec 08             	sub    $0x8,%esp
c0100ad6:	ff 75 f0             	pushl  -0x10(%ebp)
c0100ad9:	ff 75 08             	pushl  0x8(%ebp)
c0100adc:	e8 51 fa ff ff       	call   c0100532 <rb_right_rotate>
c0100ae1:	83 c4 10             	add    $0x10,%esp
c0100ae4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ae7:	8b 40 04             	mov    0x4(%eax),%eax
c0100aea:	8b 40 0c             	mov    0xc(%eax),%eax
c0100aed:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100af0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100af3:	8b 40 04             	mov    0x4(%eax),%eax
c0100af6:	8b 10                	mov    (%eax),%edx
c0100af8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100afb:	89 10                	mov    %edx,(%eax)
c0100afd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b00:	8b 40 04             	mov    0x4(%eax),%eax
c0100b03:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100b09:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b0c:	8b 40 0c             	mov    0xc(%eax),%eax
c0100b0f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100b15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b18:	8b 40 04             	mov    0x4(%eax),%eax
c0100b1b:	83 ec 08             	sub    $0x8,%esp
c0100b1e:	50                   	push   %eax
c0100b1f:	ff 75 08             	pushl  0x8(%ebp)
c0100b22:	e8 37 f9 ff ff       	call   c010045e <rb_left_rotate>
c0100b27:	83 c4 10             	add    $0x10,%esp
c0100b2a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100b2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100b30:	e9 f5 00 00 00       	jmp    c0100c2a <rb_delete_fixup+0x221>
        }
        else {
            RB_DELETE_FIXUP_SUB(right, left);
c0100b35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b38:	8b 40 04             	mov    0x4(%eax),%eax
c0100b3b:	8b 40 08             	mov    0x8(%eax),%eax
c0100b3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100b41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b44:	8b 00                	mov    (%eax),%eax
c0100b46:	85 c0                	test   %eax,%eax
c0100b48:	74 36                	je     c0100b80 <rb_delete_fixup+0x177>
c0100b4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b4d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100b53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b56:	8b 40 04             	mov    0x4(%eax),%eax
c0100b59:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100b5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b62:	8b 40 04             	mov    0x4(%eax),%eax
c0100b65:	83 ec 08             	sub    $0x8,%esp
c0100b68:	50                   	push   %eax
c0100b69:	ff 75 08             	pushl  0x8(%ebp)
c0100b6c:	e8 c1 f9 ff ff       	call   c0100532 <rb_right_rotate>
c0100b71:	83 c4 10             	add    $0x10,%esp
c0100b74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b77:	8b 40 04             	mov    0x4(%eax),%eax
c0100b7a:	8b 40 08             	mov    0x8(%eax),%eax
c0100b7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100b80:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b83:	8b 40 0c             	mov    0xc(%eax),%eax
c0100b86:	8b 00                	mov    (%eax),%eax
c0100b88:	85 c0                	test   %eax,%eax
c0100b8a:	75 20                	jne    c0100bac <rb_delete_fixup+0x1a3>
c0100b8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b8f:	8b 40 08             	mov    0x8(%eax),%eax
c0100b92:	8b 00                	mov    (%eax),%eax
c0100b94:	85 c0                	test   %eax,%eax
c0100b96:	75 14                	jne    c0100bac <rb_delete_fixup+0x1a3>
c0100b98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b9b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100ba1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ba4:	8b 40 04             	mov    0x4(%eax),%eax
c0100ba7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100baa:	eb 7e                	jmp    c0100c2a <rb_delete_fixup+0x221>
c0100bac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100baf:	8b 40 08             	mov    0x8(%eax),%eax
c0100bb2:	8b 00                	mov    (%eax),%eax
c0100bb4:	85 c0                	test   %eax,%eax
c0100bb6:	75 32                	jne    c0100bea <rb_delete_fixup+0x1e1>
c0100bb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100bbb:	8b 40 0c             	mov    0xc(%eax),%eax
c0100bbe:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100bc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100bc7:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0100bcd:	83 ec 08             	sub    $0x8,%esp
c0100bd0:	ff 75 f0             	pushl  -0x10(%ebp)
c0100bd3:	ff 75 08             	pushl  0x8(%ebp)
c0100bd6:	e8 83 f8 ff ff       	call   c010045e <rb_left_rotate>
c0100bdb:	83 c4 10             	add    $0x10,%esp
c0100bde:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100be1:	8b 40 04             	mov    0x4(%eax),%eax
c0100be4:	8b 40 08             	mov    0x8(%eax),%eax
c0100be7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100bea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bed:	8b 40 04             	mov    0x4(%eax),%eax
c0100bf0:	8b 10                	mov    (%eax),%edx
c0100bf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100bf5:	89 10                	mov    %edx,(%eax)
c0100bf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bfa:	8b 40 04             	mov    0x4(%eax),%eax
c0100bfd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100c03:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c06:	8b 40 08             	mov    0x8(%eax),%eax
c0100c09:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0100c0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c12:	8b 40 04             	mov    0x4(%eax),%eax
c0100c15:	83 ec 08             	sub    $0x8,%esp
c0100c18:	50                   	push   %eax
c0100c19:	ff 75 08             	pushl  0x8(%ebp)
c0100c1c:	e8 11 f9 ff ff       	call   c0100532 <rb_right_rotate>
c0100c21:	83 c4 10             	add    $0x10,%esp
c0100c24:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100c27:	89 45 f4             	mov    %eax,-0xc(%ebp)
            rb_##_left##_rotate(tree, x->parent);               \
            x = root;                                           \
        }                                                       \
    } while (0)

    while (x != root && !x->red) {
c0100c2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c2d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100c30:	74 0d                	je     c0100c3f <rb_delete_fixup+0x236>
c0100c32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c35:	8b 00                	mov    (%eax),%eax
c0100c37:	85 c0                	test   %eax,%eax
c0100c39:	0f 84 e7 fd ff ff    	je     c0100a26 <rb_delete_fixup+0x1d>
        }
        else {
            RB_DELETE_FIXUP_SUB(right, left);
        }
    }
    x->red = 0;
c0100c3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c42:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

#undef RB_DELETE_FIXUP_SUB
}
c0100c48:	90                   	nop
c0100c49:	c9                   	leave  
c0100c4a:	c3                   	ret    

c0100c4b <rb_delete>:
/* *
 * rb_delete - deletes @node from @tree, and calls rb_delete_fixup to
 * restore red-black properties.
 * */
void
rb_delete(rb_tree *tree, rb_node *node) {
c0100c4b:	55                   	push   %ebp
c0100c4c:	89 e5                	mov    %esp,%ebp
c0100c4e:	83 ec 28             	sub    $0x28,%esp
    rb_node *x, *y, *z = node;
c0100c51:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c54:	89 45 f4             	mov    %eax,-0xc(%ebp)
    rb_node *nil = tree->nil, *root = tree->root;
c0100c57:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c5a:	8b 40 04             	mov    0x4(%eax),%eax
c0100c5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100c60:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c63:	8b 40 08             	mov    0x8(%eax),%eax
c0100c66:	89 45 ec             	mov    %eax,-0x14(%ebp)

    y = (z->left == nil || z->right == nil) ? z : rb_tree_successor(tree, z);
c0100c69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c6c:	8b 40 08             	mov    0x8(%eax),%eax
c0100c6f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100c72:	74 1b                	je     c0100c8f <rb_delete+0x44>
c0100c74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c77:	8b 40 0c             	mov    0xc(%eax),%eax
c0100c7a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100c7d:	74 10                	je     c0100c8f <rb_delete+0x44>
c0100c7f:	ff 75 f4             	pushl  -0xc(%ebp)
c0100c82:	ff 75 08             	pushl  0x8(%ebp)
c0100c85:	e8 1f fc ff ff       	call   c01008a9 <rb_tree_successor>
c0100c8a:	83 c4 08             	add    $0x8,%esp
c0100c8d:	eb 03                	jmp    c0100c92 <rb_delete+0x47>
c0100c8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c92:	89 45 e8             	mov    %eax,-0x18(%ebp)
    x = (y->left != nil) ? y->left : y->right;
c0100c95:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c98:	8b 40 08             	mov    0x8(%eax),%eax
c0100c9b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100c9e:	74 08                	je     c0100ca8 <rb_delete+0x5d>
c0100ca0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100ca3:	8b 40 08             	mov    0x8(%eax),%eax
c0100ca6:	eb 06                	jmp    c0100cae <rb_delete+0x63>
c0100ca8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100cab:	8b 40 0c             	mov    0xc(%eax),%eax
c0100cae:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    assert(y != root && y != nil);
c0100cb1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100cb4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100cb7:	74 08                	je     c0100cc1 <rb_delete+0x76>
c0100cb9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100cbc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100cbf:	75 19                	jne    c0100cda <rb_delete+0x8f>
c0100cc1:	68 e0 ce 10 c0       	push   $0xc010cee0
c0100cc6:	68 58 ce 10 c0       	push   $0xc010ce58
c0100ccb:	68 2f 01 00 00       	push   $0x12f
c0100cd0:	68 6d ce 10 c0       	push   $0xc010ce6d
c0100cd5:	e8 87 0a 00 00       	call   c0101761 <__panic>

    x->parent = y->parent;
c0100cda:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100cdd:	8b 50 04             	mov    0x4(%eax),%edx
c0100ce0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100ce3:	89 50 04             	mov    %edx,0x4(%eax)
    if (y == y->parent->left) {
c0100ce6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100ce9:	8b 40 04             	mov    0x4(%eax),%eax
c0100cec:	8b 40 08             	mov    0x8(%eax),%eax
c0100cef:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0100cf2:	75 0e                	jne    c0100d02 <rb_delete+0xb7>
        y->parent->left = x;
c0100cf4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100cf7:	8b 40 04             	mov    0x4(%eax),%eax
c0100cfa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100cfd:	89 50 08             	mov    %edx,0x8(%eax)
c0100d00:	eb 0c                	jmp    c0100d0e <rb_delete+0xc3>
    }
    else {
        y->parent->right = x;
c0100d02:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100d05:	8b 40 04             	mov    0x4(%eax),%eax
c0100d08:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100d0b:	89 50 0c             	mov    %edx,0xc(%eax)
    }

    bool need_fixup = !(y->red);
c0100d0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100d11:	8b 00                	mov    (%eax),%eax
c0100d13:	85 c0                	test   %eax,%eax
c0100d15:	0f 94 c0             	sete   %al
c0100d18:	0f b6 c0             	movzbl %al,%eax
c0100d1b:	89 45 e0             	mov    %eax,-0x20(%ebp)

    if (y != z) {
c0100d1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100d21:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100d24:	74 5c                	je     c0100d82 <rb_delete+0x137>
        if (z == z->parent->left) {
c0100d26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d29:	8b 40 04             	mov    0x4(%eax),%eax
c0100d2c:	8b 40 08             	mov    0x8(%eax),%eax
c0100d2f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100d32:	75 0e                	jne    c0100d42 <rb_delete+0xf7>
            z->parent->left = y;
c0100d34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d37:	8b 40 04             	mov    0x4(%eax),%eax
c0100d3a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100d3d:	89 50 08             	mov    %edx,0x8(%eax)
c0100d40:	eb 0c                	jmp    c0100d4e <rb_delete+0x103>
        }
        else {
            z->parent->right = y;
c0100d42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d45:	8b 40 04             	mov    0x4(%eax),%eax
c0100d48:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100d4b:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        z->left->parent = z->right->parent = y;
c0100d4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d51:	8b 50 08             	mov    0x8(%eax),%edx
c0100d54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d57:	8b 40 0c             	mov    0xc(%eax),%eax
c0100d5a:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100d5d:	89 48 04             	mov    %ecx,0x4(%eax)
c0100d60:	8b 40 04             	mov    0x4(%eax),%eax
c0100d63:	89 42 04             	mov    %eax,0x4(%edx)
        *y = *z;
c0100d66:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100d69:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d6c:	8b 0a                	mov    (%edx),%ecx
c0100d6e:	89 08                	mov    %ecx,(%eax)
c0100d70:	8b 4a 04             	mov    0x4(%edx),%ecx
c0100d73:	89 48 04             	mov    %ecx,0x4(%eax)
c0100d76:	8b 4a 08             	mov    0x8(%edx),%ecx
c0100d79:	89 48 08             	mov    %ecx,0x8(%eax)
c0100d7c:	8b 52 0c             	mov    0xc(%edx),%edx
c0100d7f:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    if (need_fixup) {
c0100d82:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0100d86:	74 11                	je     c0100d99 <rb_delete+0x14e>
        rb_delete_fixup(tree, x);
c0100d88:	83 ec 08             	sub    $0x8,%esp
c0100d8b:	ff 75 e4             	pushl  -0x1c(%ebp)
c0100d8e:	ff 75 08             	pushl  0x8(%ebp)
c0100d91:	e8 73 fc ff ff       	call   c0100a09 <rb_delete_fixup>
c0100d96:	83 c4 10             	add    $0x10,%esp
    }
}
c0100d99:	90                   	nop
c0100d9a:	c9                   	leave  
c0100d9b:	c3                   	ret    

c0100d9c <rb_tree_destroy>:

/* rb_tree_destroy - destroy a tree and free memory */
void
rb_tree_destroy(rb_tree *tree) {
c0100d9c:	55                   	push   %ebp
c0100d9d:	89 e5                	mov    %esp,%ebp
c0100d9f:	83 ec 08             	sub    $0x8,%esp
    kfree(tree->root);
c0100da2:	8b 45 08             	mov    0x8(%ebp),%eax
c0100da5:	8b 40 08             	mov    0x8(%eax),%eax
c0100da8:	83 ec 0c             	sub    $0xc,%esp
c0100dab:	50                   	push   %eax
c0100dac:	e8 dc 78 00 00       	call   c010868d <kfree>
c0100db1:	83 c4 10             	add    $0x10,%esp
    kfree(tree->nil);
c0100db4:	8b 45 08             	mov    0x8(%ebp),%eax
c0100db7:	8b 40 04             	mov    0x4(%eax),%eax
c0100dba:	83 ec 0c             	sub    $0xc,%esp
c0100dbd:	50                   	push   %eax
c0100dbe:	e8 ca 78 00 00       	call   c010868d <kfree>
c0100dc3:	83 c4 10             	add    $0x10,%esp
    kfree(tree);
c0100dc6:	83 ec 0c             	sub    $0xc,%esp
c0100dc9:	ff 75 08             	pushl  0x8(%ebp)
c0100dcc:	e8 bc 78 00 00       	call   c010868d <kfree>
c0100dd1:	83 c4 10             	add    $0x10,%esp
}
c0100dd4:	90                   	nop
c0100dd5:	c9                   	leave  
c0100dd6:	c3                   	ret    

c0100dd7 <rb_node_prev>:
/* *
 * rb_node_prev - returns the predecessor node of @node in @tree,
 * or 'NULL' if no predecessor exists.
 * */
rb_node *
rb_node_prev(rb_tree *tree, rb_node *node) {
c0100dd7:	55                   	push   %ebp
c0100dd8:	89 e5                	mov    %esp,%ebp
c0100dda:	83 ec 10             	sub    $0x10,%esp
    rb_node *prev = rb_tree_predecessor(tree, node);
c0100ddd:	ff 75 0c             	pushl  0xc(%ebp)
c0100de0:	ff 75 08             	pushl  0x8(%ebp)
c0100de3:	e8 3c fb ff ff       	call   c0100924 <rb_tree_predecessor>
c0100de8:	83 c4 08             	add    $0x8,%esp
c0100deb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (prev != tree->nil) ? prev : NULL;
c0100dee:	8b 45 08             	mov    0x8(%ebp),%eax
c0100df1:	8b 40 04             	mov    0x4(%eax),%eax
c0100df4:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100df7:	74 05                	je     c0100dfe <rb_node_prev+0x27>
c0100df9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100dfc:	eb 05                	jmp    c0100e03 <rb_node_prev+0x2c>
c0100dfe:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e03:	c9                   	leave  
c0100e04:	c3                   	ret    

c0100e05 <rb_node_next>:
/* *
 * rb_node_next - returns the successor node of @node in @tree,
 * or 'NULL' if no successor exists.
 * */
rb_node *
rb_node_next(rb_tree *tree, rb_node *node) {
c0100e05:	55                   	push   %ebp
c0100e06:	89 e5                	mov    %esp,%ebp
c0100e08:	83 ec 10             	sub    $0x10,%esp
    rb_node *next = rb_tree_successor(tree, node);
c0100e0b:	ff 75 0c             	pushl  0xc(%ebp)
c0100e0e:	ff 75 08             	pushl  0x8(%ebp)
c0100e11:	e8 93 fa ff ff       	call   c01008a9 <rb_tree_successor>
c0100e16:	83 c4 08             	add    $0x8,%esp
c0100e19:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (next != tree->nil) ? next : NULL;
c0100e1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e1f:	8b 40 04             	mov    0x4(%eax),%eax
c0100e22:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100e25:	74 05                	je     c0100e2c <rb_node_next+0x27>
c0100e27:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100e2a:	eb 05                	jmp    c0100e31 <rb_node_next+0x2c>
c0100e2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e31:	c9                   	leave  
c0100e32:	c3                   	ret    

c0100e33 <rb_node_root>:

/* rb_node_root - returns the root node of a @tree, or 'NULL' if tree is empty */
rb_node *
rb_node_root(rb_tree *tree) {
c0100e33:	55                   	push   %ebp
c0100e34:	89 e5                	mov    %esp,%ebp
c0100e36:	83 ec 10             	sub    $0x10,%esp
    rb_node *node = tree->root->left;
c0100e39:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e3c:	8b 40 08             	mov    0x8(%eax),%eax
c0100e3f:	8b 40 08             	mov    0x8(%eax),%eax
c0100e42:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (node != tree->nil) ? node : NULL;
c0100e45:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e48:	8b 40 04             	mov    0x4(%eax),%eax
c0100e4b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100e4e:	74 05                	je     c0100e55 <rb_node_root+0x22>
c0100e50:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100e53:	eb 05                	jmp    c0100e5a <rb_node_root+0x27>
c0100e55:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e5a:	c9                   	leave  
c0100e5b:	c3                   	ret    

c0100e5c <rb_node_left>:

/* rb_node_left - gets the left child of @node, or 'NULL' if no such node */
rb_node *
rb_node_left(rb_tree *tree, rb_node *node) {
c0100e5c:	55                   	push   %ebp
c0100e5d:	89 e5                	mov    %esp,%ebp
c0100e5f:	83 ec 10             	sub    $0x10,%esp
    rb_node *left = node->left;
c0100e62:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e65:	8b 40 08             	mov    0x8(%eax),%eax
c0100e68:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (left != tree->nil) ? left : NULL;
c0100e6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e6e:	8b 40 04             	mov    0x4(%eax),%eax
c0100e71:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100e74:	74 05                	je     c0100e7b <rb_node_left+0x1f>
c0100e76:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100e79:	eb 05                	jmp    c0100e80 <rb_node_left+0x24>
c0100e7b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e80:	c9                   	leave  
c0100e81:	c3                   	ret    

c0100e82 <rb_node_right>:

/* rb_node_right - gets the right child of @node, or 'NULL' if no such node */
rb_node *
rb_node_right(rb_tree *tree, rb_node *node) {
c0100e82:	55                   	push   %ebp
c0100e83:	89 e5                	mov    %esp,%ebp
c0100e85:	83 ec 10             	sub    $0x10,%esp
    rb_node *right = node->right;
c0100e88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e8b:	8b 40 0c             	mov    0xc(%eax),%eax
c0100e8e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (right != tree->nil) ? right : NULL;
c0100e91:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e94:	8b 40 04             	mov    0x4(%eax),%eax
c0100e97:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100e9a:	74 05                	je     c0100ea1 <rb_node_right+0x1f>
c0100e9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100e9f:	eb 05                	jmp    c0100ea6 <rb_node_right+0x24>
c0100ea1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ea6:	c9                   	leave  
c0100ea7:	c3                   	ret    

c0100ea8 <check_tree>:

int
check_tree(rb_tree *tree, rb_node *node) {
c0100ea8:	55                   	push   %ebp
c0100ea9:	89 e5                	mov    %esp,%ebp
c0100eab:	83 ec 18             	sub    $0x18,%esp
    rb_node *nil = tree->nil;
c0100eae:	8b 45 08             	mov    0x8(%ebp),%eax
c0100eb1:	8b 40 04             	mov    0x4(%eax),%eax
c0100eb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (node == nil) {
c0100eb7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100eba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100ebd:	75 2c                	jne    c0100eeb <check_tree+0x43>
        assert(!node->red);
c0100ebf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ec2:	8b 00                	mov    (%eax),%eax
c0100ec4:	85 c0                	test   %eax,%eax
c0100ec6:	74 19                	je     c0100ee1 <check_tree+0x39>
c0100ec8:	68 f6 ce 10 c0       	push   $0xc010cef6
c0100ecd:	68 58 ce 10 c0       	push   $0xc010ce58
c0100ed2:	68 7f 01 00 00       	push   $0x17f
c0100ed7:	68 6d ce 10 c0       	push   $0xc010ce6d
c0100edc:	e8 80 08 00 00       	call   c0101761 <__panic>
        return 1;
c0100ee1:	b8 01 00 00 00       	mov    $0x1,%eax
c0100ee6:	e9 6d 01 00 00       	jmp    c0101058 <check_tree+0x1b0>
    }
    if (node->left != nil) {
c0100eeb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100eee:	8b 40 08             	mov    0x8(%eax),%eax
c0100ef1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100ef4:	74 5b                	je     c0100f51 <check_tree+0xa9>
        assert(COMPARE(tree, node, node->left) >= 0);
c0100ef6:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ef9:	8b 00                	mov    (%eax),%eax
c0100efb:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100efe:	8b 52 08             	mov    0x8(%edx),%edx
c0100f01:	83 ec 08             	sub    $0x8,%esp
c0100f04:	52                   	push   %edx
c0100f05:	ff 75 0c             	pushl  0xc(%ebp)
c0100f08:	ff d0                	call   *%eax
c0100f0a:	83 c4 10             	add    $0x10,%esp
c0100f0d:	85 c0                	test   %eax,%eax
c0100f0f:	79 19                	jns    c0100f2a <check_tree+0x82>
c0100f11:	68 04 cf 10 c0       	push   $0xc010cf04
c0100f16:	68 58 ce 10 c0       	push   $0xc010ce58
c0100f1b:	68 83 01 00 00       	push   $0x183
c0100f20:	68 6d ce 10 c0       	push   $0xc010ce6d
c0100f25:	e8 37 08 00 00       	call   c0101761 <__panic>
        assert(node->left->parent == node);
c0100f2a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f2d:	8b 40 08             	mov    0x8(%eax),%eax
c0100f30:	8b 40 04             	mov    0x4(%eax),%eax
c0100f33:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0100f36:	74 19                	je     c0100f51 <check_tree+0xa9>
c0100f38:	68 29 cf 10 c0       	push   $0xc010cf29
c0100f3d:	68 58 ce 10 c0       	push   $0xc010ce58
c0100f42:	68 84 01 00 00       	push   $0x184
c0100f47:	68 6d ce 10 c0       	push   $0xc010ce6d
c0100f4c:	e8 10 08 00 00       	call   c0101761 <__panic>
    }
    if (node->right != nil) {
c0100f51:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f54:	8b 40 0c             	mov    0xc(%eax),%eax
c0100f57:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0100f5a:	74 5b                	je     c0100fb7 <check_tree+0x10f>
        assert(COMPARE(tree, node, node->right) <= 0);
c0100f5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f5f:	8b 00                	mov    (%eax),%eax
c0100f61:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100f64:	8b 52 0c             	mov    0xc(%edx),%edx
c0100f67:	83 ec 08             	sub    $0x8,%esp
c0100f6a:	52                   	push   %edx
c0100f6b:	ff 75 0c             	pushl  0xc(%ebp)
c0100f6e:	ff d0                	call   *%eax
c0100f70:	83 c4 10             	add    $0x10,%esp
c0100f73:	85 c0                	test   %eax,%eax
c0100f75:	7e 19                	jle    c0100f90 <check_tree+0xe8>
c0100f77:	68 44 cf 10 c0       	push   $0xc010cf44
c0100f7c:	68 58 ce 10 c0       	push   $0xc010ce58
c0100f81:	68 87 01 00 00       	push   $0x187
c0100f86:	68 6d ce 10 c0       	push   $0xc010ce6d
c0100f8b:	e8 d1 07 00 00       	call   c0101761 <__panic>
        assert(node->right->parent == node);
c0100f90:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f93:	8b 40 0c             	mov    0xc(%eax),%eax
c0100f96:	8b 40 04             	mov    0x4(%eax),%eax
c0100f99:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0100f9c:	74 19                	je     c0100fb7 <check_tree+0x10f>
c0100f9e:	68 6a cf 10 c0       	push   $0xc010cf6a
c0100fa3:	68 58 ce 10 c0       	push   $0xc010ce58
c0100fa8:	68 88 01 00 00       	push   $0x188
c0100fad:	68 6d ce 10 c0       	push   $0xc010ce6d
c0100fb2:	e8 aa 07 00 00       	call   c0101761 <__panic>
    }
    if (node->red) {
c0100fb7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100fba:	8b 00                	mov    (%eax),%eax
c0100fbc:	85 c0                	test   %eax,%eax
c0100fbe:	74 31                	je     c0100ff1 <check_tree+0x149>
        assert(!node->left->red && !node->right->red);
c0100fc0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100fc3:	8b 40 08             	mov    0x8(%eax),%eax
c0100fc6:	8b 00                	mov    (%eax),%eax
c0100fc8:	85 c0                	test   %eax,%eax
c0100fca:	75 0c                	jne    c0100fd8 <check_tree+0x130>
c0100fcc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100fcf:	8b 40 0c             	mov    0xc(%eax),%eax
c0100fd2:	8b 00                	mov    (%eax),%eax
c0100fd4:	85 c0                	test   %eax,%eax
c0100fd6:	74 19                	je     c0100ff1 <check_tree+0x149>
c0100fd8:	68 88 cf 10 c0       	push   $0xc010cf88
c0100fdd:	68 58 ce 10 c0       	push   $0xc010ce58
c0100fe2:	68 8b 01 00 00       	push   $0x18b
c0100fe7:	68 6d ce 10 c0       	push   $0xc010ce6d
c0100fec:	e8 70 07 00 00       	call   c0101761 <__panic>
    }
    int hb_left = check_tree(tree, node->left);
c0100ff1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ff4:	8b 40 08             	mov    0x8(%eax),%eax
c0100ff7:	83 ec 08             	sub    $0x8,%esp
c0100ffa:	50                   	push   %eax
c0100ffb:	ff 75 08             	pushl  0x8(%ebp)
c0100ffe:	e8 a5 fe ff ff       	call   c0100ea8 <check_tree>
c0101003:	83 c4 10             	add    $0x10,%esp
c0101006:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int hb_right = check_tree(tree, node->right);
c0101009:	8b 45 0c             	mov    0xc(%ebp),%eax
c010100c:	8b 40 0c             	mov    0xc(%eax),%eax
c010100f:	83 ec 08             	sub    $0x8,%esp
c0101012:	50                   	push   %eax
c0101013:	ff 75 08             	pushl  0x8(%ebp)
c0101016:	e8 8d fe ff ff       	call   c0100ea8 <check_tree>
c010101b:	83 c4 10             	add    $0x10,%esp
c010101e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(hb_left == hb_right);
c0101021:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101024:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0101027:	74 19                	je     c0101042 <check_tree+0x19a>
c0101029:	68 ae cf 10 c0       	push   $0xc010cfae
c010102e:	68 58 ce 10 c0       	push   $0xc010ce58
c0101033:	68 8f 01 00 00       	push   $0x18f
c0101038:	68 6d ce 10 c0       	push   $0xc010ce6d
c010103d:	e8 1f 07 00 00       	call   c0101761 <__panic>
    int hb = hb_left;
c0101042:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101045:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!node->red) {
c0101048:	8b 45 0c             	mov    0xc(%ebp),%eax
c010104b:	8b 00                	mov    (%eax),%eax
c010104d:	85 c0                	test   %eax,%eax
c010104f:	75 04                	jne    c0101055 <check_tree+0x1ad>
        hb ++;
c0101051:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    }
    return hb;
c0101055:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101058:	c9                   	leave  
c0101059:	c3                   	ret    

c010105a <check_safe_kmalloc>:

static void *
check_safe_kmalloc(size_t size) {
c010105a:	55                   	push   %ebp
c010105b:	89 e5                	mov    %esp,%ebp
c010105d:	83 ec 18             	sub    $0x18,%esp
    void *ret = kmalloc(size);
c0101060:	83 ec 0c             	sub    $0xc,%esp
c0101063:	ff 75 08             	pushl  0x8(%ebp)
c0101066:	e8 0a 76 00 00       	call   c0108675 <kmalloc>
c010106b:	83 c4 10             	add    $0x10,%esp
c010106e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(ret != NULL);
c0101071:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101075:	75 19                	jne    c0101090 <check_safe_kmalloc+0x36>
c0101077:	68 c2 cf 10 c0       	push   $0xc010cfc2
c010107c:	68 58 ce 10 c0       	push   $0xc010ce58
c0101081:	68 9a 01 00 00       	push   $0x19a
c0101086:	68 6d ce 10 c0       	push   $0xc010ce6d
c010108b:	e8 d1 06 00 00       	call   c0101761 <__panic>
    return ret;
c0101090:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101093:	c9                   	leave  
c0101094:	c3                   	ret    

c0101095 <check_compare1>:

#define rbn2data(node)              \
    (to_struct(node, struct check_data, rb_link))

static inline int
check_compare1(rb_node *node1, rb_node *node2) {
c0101095:	55                   	push   %ebp
c0101096:	89 e5                	mov    %esp,%ebp
    return rbn2data(node1)->data - rbn2data(node2)->data;
c0101098:	8b 45 08             	mov    0x8(%ebp),%eax
c010109b:	83 e8 04             	sub    $0x4,%eax
c010109e:	8b 10                	mov    (%eax),%edx
c01010a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01010a3:	83 e8 04             	sub    $0x4,%eax
c01010a6:	8b 00                	mov    (%eax),%eax
c01010a8:	29 c2                	sub    %eax,%edx
c01010aa:	89 d0                	mov    %edx,%eax
}
c01010ac:	5d                   	pop    %ebp
c01010ad:	c3                   	ret    

c01010ae <check_compare2>:

static inline int
check_compare2(rb_node *node, void *key) {
c01010ae:	55                   	push   %ebp
c01010af:	89 e5                	mov    %esp,%ebp
    return rbn2data(node)->data - (long)key;
c01010b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01010b4:	83 e8 04             	sub    $0x4,%eax
c01010b7:	8b 10                	mov    (%eax),%edx
c01010b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01010bc:	29 c2                	sub    %eax,%edx
c01010be:	89 d0                	mov    %edx,%eax
}
c01010c0:	5d                   	pop    %ebp
c01010c1:	c3                   	ret    

c01010c2 <check_rb_tree>:

void
check_rb_tree(void) {
c01010c2:	55                   	push   %ebp
c01010c3:	89 e5                	mov    %esp,%ebp
c01010c5:	53                   	push   %ebx
c01010c6:	83 ec 34             	sub    $0x34,%esp
    rb_tree *tree = rb_tree_create(check_compare1);
c01010c9:	83 ec 0c             	sub    $0xc,%esp
c01010cc:	68 95 10 10 c0       	push   $0xc0101095
c01010d1:	e8 8f f2 ff ff       	call   c0100365 <rb_tree_create>
c01010d6:	83 c4 10             	add    $0x10,%esp
c01010d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(tree != NULL);
c01010dc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01010e0:	75 19                	jne    c01010fb <check_rb_tree+0x39>
c01010e2:	68 ce cf 10 c0       	push   $0xc010cfce
c01010e7:	68 58 ce 10 c0       	push   $0xc010ce58
c01010ec:	68 b3 01 00 00       	push   $0x1b3
c01010f1:	68 6d ce 10 c0       	push   $0xc010ce6d
c01010f6:	e8 66 06 00 00       	call   c0101761 <__panic>

    rb_node *nil = tree->nil, *root = tree->root;
c01010fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010fe:	8b 40 04             	mov    0x4(%eax),%eax
c0101101:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0101104:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101107:	8b 40 08             	mov    0x8(%eax),%eax
c010110a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(!nil->red && root->left == nil);
c010110d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101110:	8b 00                	mov    (%eax),%eax
c0101112:	85 c0                	test   %eax,%eax
c0101114:	75 0b                	jne    c0101121 <check_rb_tree+0x5f>
c0101116:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101119:	8b 40 08             	mov    0x8(%eax),%eax
c010111c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010111f:	74 19                	je     c010113a <check_rb_tree+0x78>
c0101121:	68 dc cf 10 c0       	push   $0xc010cfdc
c0101126:	68 58 ce 10 c0       	push   $0xc010ce58
c010112b:	68 b6 01 00 00       	push   $0x1b6
c0101130:	68 6d ce 10 c0       	push   $0xc010ce6d
c0101135:	e8 27 06 00 00       	call   c0101761 <__panic>

    int total = 1000;
c010113a:	c7 45 e0 e8 03 00 00 	movl   $0x3e8,-0x20(%ebp)
    struct check_data **all = check_safe_kmalloc(sizeof(struct check_data *) * total);
c0101141:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101144:	c1 e0 02             	shl    $0x2,%eax
c0101147:	83 ec 0c             	sub    $0xc,%esp
c010114a:	50                   	push   %eax
c010114b:	e8 0a ff ff ff       	call   c010105a <check_safe_kmalloc>
c0101150:	83 c4 10             	add    $0x10,%esp
c0101153:	89 45 dc             	mov    %eax,-0x24(%ebp)

    long i;
    for (i = 0; i < total; i ++) {
c0101156:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010115d:	eb 39                	jmp    c0101198 <check_rb_tree+0xd6>
        all[i] = check_safe_kmalloc(sizeof(struct check_data));
c010115f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101162:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101169:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010116c:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c010116f:	83 ec 0c             	sub    $0xc,%esp
c0101172:	6a 14                	push   $0x14
c0101174:	e8 e1 fe ff ff       	call   c010105a <check_safe_kmalloc>
c0101179:	83 c4 10             	add    $0x10,%esp
c010117c:	89 03                	mov    %eax,(%ebx)
        all[i]->data = i;
c010117e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101181:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101188:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010118b:	01 d0                	add    %edx,%eax
c010118d:	8b 00                	mov    (%eax),%eax
c010118f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101192:	89 10                	mov    %edx,(%eax)

    int total = 1000;
    struct check_data **all = check_safe_kmalloc(sizeof(struct check_data *) * total);

    long i;
    for (i = 0; i < total; i ++) {
c0101194:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101198:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010119b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010119e:	7c bf                	jl     c010115f <check_rb_tree+0x9d>
        all[i] = check_safe_kmalloc(sizeof(struct check_data));
        all[i]->data = i;
    }

    int *mark = check_safe_kmalloc(sizeof(int) * total);
c01011a0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01011a3:	c1 e0 02             	shl    $0x2,%eax
c01011a6:	83 ec 0c             	sub    $0xc,%esp
c01011a9:	50                   	push   %eax
c01011aa:	e8 ab fe ff ff       	call   c010105a <check_safe_kmalloc>
c01011af:	83 c4 10             	add    $0x10,%esp
c01011b2:	89 45 d8             	mov    %eax,-0x28(%ebp)
    memset(mark, 0, sizeof(int) * total);
c01011b5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01011b8:	c1 e0 02             	shl    $0x2,%eax
c01011bb:	83 ec 04             	sub    $0x4,%esp
c01011be:	50                   	push   %eax
c01011bf:	6a 00                	push   $0x0
c01011c1:	ff 75 d8             	pushl  -0x28(%ebp)
c01011c4:	e8 27 b3 00 00       	call   c010c4f0 <memset>
c01011c9:	83 c4 10             	add    $0x10,%esp

    for (i = 0; i < total; i ++) {
c01011cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01011d3:	eb 29                	jmp    c01011fe <check_rb_tree+0x13c>
        mark[all[i]->data] = 1;
c01011d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01011d8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01011df:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01011e2:	01 d0                	add    %edx,%eax
c01011e4:	8b 00                	mov    (%eax),%eax
c01011e6:	8b 00                	mov    (%eax),%eax
c01011e8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01011ef:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01011f2:	01 d0                	add    %edx,%eax
c01011f4:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    }

    int *mark = check_safe_kmalloc(sizeof(int) * total);
    memset(mark, 0, sizeof(int) * total);

    for (i = 0; i < total; i ++) {
c01011fa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01011fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101201:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101204:	7c cf                	jl     c01011d5 <check_rb_tree+0x113>
        mark[all[i]->data] = 1;
    }
    for (i = 0; i < total; i ++) {
c0101206:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010120d:	eb 33                	jmp    c0101242 <check_rb_tree+0x180>
        assert(mark[i] == 1);
c010120f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101212:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101219:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010121c:	01 d0                	add    %edx,%eax
c010121e:	8b 00                	mov    (%eax),%eax
c0101220:	83 f8 01             	cmp    $0x1,%eax
c0101223:	74 19                	je     c010123e <check_rb_tree+0x17c>
c0101225:	68 fb cf 10 c0       	push   $0xc010cffb
c010122a:	68 58 ce 10 c0       	push   $0xc010ce58
c010122f:	68 c8 01 00 00       	push   $0x1c8
c0101234:	68 6d ce 10 c0       	push   $0xc010ce6d
c0101239:	e8 23 05 00 00       	call   c0101761 <__panic>
    memset(mark, 0, sizeof(int) * total);

    for (i = 0; i < total; i ++) {
        mark[all[i]->data] = 1;
    }
    for (i = 0; i < total; i ++) {
c010123e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101242:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101245:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101248:	7c c5                	jl     c010120f <check_rb_tree+0x14d>
        assert(mark[i] == 1);
    }

    for (i = 0; i < total; i ++) {
c010124a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101251:	eb 6a                	jmp    c01012bd <check_rb_tree+0x1fb>
        int j = (rand() % (total - i)) + i;
c0101253:	e8 54 ba 00 00       	call   c010ccac <rand>
c0101258:	89 c2                	mov    %eax,%edx
c010125a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010125d:	2b 45 f4             	sub    -0xc(%ebp),%eax
c0101260:	89 c1                	mov    %eax,%ecx
c0101262:	89 d0                	mov    %edx,%eax
c0101264:	99                   	cltd   
c0101265:	f7 f9                	idiv   %ecx
c0101267:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010126a:	01 d0                	add    %edx,%eax
c010126c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        struct check_data *z = all[i];
c010126f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101272:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101279:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010127c:	01 d0                	add    %edx,%eax
c010127e:	8b 00                	mov    (%eax),%eax
c0101280:	89 45 d0             	mov    %eax,-0x30(%ebp)
        all[i] = all[j];
c0101283:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101286:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010128d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101290:	01 c2                	add    %eax,%edx
c0101292:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101295:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c010129c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010129f:	01 c8                	add    %ecx,%eax
c01012a1:	8b 00                	mov    (%eax),%eax
c01012a3:	89 02                	mov    %eax,(%edx)
        all[j] = z;
c01012a5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01012a8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01012af:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01012b2:	01 c2                	add    %eax,%edx
c01012b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01012b7:	89 02                	mov    %eax,(%edx)
    }
    for (i = 0; i < total; i ++) {
        assert(mark[i] == 1);
    }

    for (i = 0; i < total; i ++) {
c01012b9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01012bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012c0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01012c3:	7c 8e                	jl     c0101253 <check_rb_tree+0x191>
        struct check_data *z = all[i];
        all[i] = all[j];
        all[j] = z;
    }

    memset(mark, 0, sizeof(int) * total);
c01012c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01012c8:	c1 e0 02             	shl    $0x2,%eax
c01012cb:	83 ec 04             	sub    $0x4,%esp
c01012ce:	50                   	push   %eax
c01012cf:	6a 00                	push   $0x0
c01012d1:	ff 75 d8             	pushl  -0x28(%ebp)
c01012d4:	e8 17 b2 00 00       	call   c010c4f0 <memset>
c01012d9:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < total; i ++) {
c01012dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01012e3:	eb 29                	jmp    c010130e <check_rb_tree+0x24c>
        mark[all[i]->data] = 1;
c01012e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01012e8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01012ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01012f2:	01 d0                	add    %edx,%eax
c01012f4:	8b 00                	mov    (%eax),%eax
c01012f6:	8b 00                	mov    (%eax),%eax
c01012f8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01012ff:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101302:	01 d0                	add    %edx,%eax
c0101304:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        all[i] = all[j];
        all[j] = z;
    }

    memset(mark, 0, sizeof(int) * total);
    for (i = 0; i < total; i ++) {
c010130a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010130e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101311:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101314:	7c cf                	jl     c01012e5 <check_rb_tree+0x223>
        mark[all[i]->data] = 1;
    }
    for (i = 0; i < total; i ++) {
c0101316:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010131d:	eb 33                	jmp    c0101352 <check_rb_tree+0x290>
        assert(mark[i] == 1);
c010131f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101322:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101329:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010132c:	01 d0                	add    %edx,%eax
c010132e:	8b 00                	mov    (%eax),%eax
c0101330:	83 f8 01             	cmp    $0x1,%eax
c0101333:	74 19                	je     c010134e <check_rb_tree+0x28c>
c0101335:	68 fb cf 10 c0       	push   $0xc010cffb
c010133a:	68 58 ce 10 c0       	push   $0xc010ce58
c010133f:	68 d7 01 00 00       	push   $0x1d7
c0101344:	68 6d ce 10 c0       	push   $0xc010ce6d
c0101349:	e8 13 04 00 00       	call   c0101761 <__panic>

    memset(mark, 0, sizeof(int) * total);
    for (i = 0; i < total; i ++) {
        mark[all[i]->data] = 1;
    }
    for (i = 0; i < total; i ++) {
c010134e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101352:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101355:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0101358:	7c c5                	jl     c010131f <check_rb_tree+0x25d>
        assert(mark[i] == 1);
    }

    for (i = 0; i < total; i ++) {
c010135a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101361:	eb 3c                	jmp    c010139f <check_rb_tree+0x2dd>
        rb_insert(tree, &(all[i]->rb_link));
c0101363:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101366:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010136d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101370:	01 d0                	add    %edx,%eax
c0101372:	8b 00                	mov    (%eax),%eax
c0101374:	83 c0 04             	add    $0x4,%eax
c0101377:	83 ec 08             	sub    $0x8,%esp
c010137a:	50                   	push   %eax
c010137b:	ff 75 ec             	pushl  -0x14(%ebp)
c010137e:	e8 3c f3 ff ff       	call   c01006bf <rb_insert>
c0101383:	83 c4 10             	add    $0x10,%esp
        check_tree(tree, root->left);
c0101386:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101389:	8b 40 08             	mov    0x8(%eax),%eax
c010138c:	83 ec 08             	sub    $0x8,%esp
c010138f:	50                   	push   %eax
c0101390:	ff 75 ec             	pushl  -0x14(%ebp)
c0101393:	e8 10 fb ff ff       	call   c0100ea8 <check_tree>
c0101398:	83 c4 10             	add    $0x10,%esp
    }
    for (i = 0; i < total; i ++) {
        assert(mark[i] == 1);
    }

    for (i = 0; i < total; i ++) {
c010139b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010139f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01013a2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01013a5:	7c bc                	jl     c0101363 <check_rb_tree+0x2a1>
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    rb_node *node;
    for (i = 0; i < total; i ++) {
c01013a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01013ae:	eb 66                	jmp    c0101416 <check_rb_tree+0x354>
        node = rb_search(tree, check_compare2, (void *)(all[i]->data));
c01013b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01013b3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01013ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01013bd:	01 d0                	add    %edx,%eax
c01013bf:	8b 00                	mov    (%eax),%eax
c01013c1:	8b 00                	mov    (%eax),%eax
c01013c3:	83 ec 04             	sub    $0x4,%esp
c01013c6:	50                   	push   %eax
c01013c7:	68 ae 10 10 c0       	push   $0xc01010ae
c01013cc:	ff 75 ec             	pushl  -0x14(%ebp)
c01013cf:	e8 cb f5 ff ff       	call   c010099f <rb_search>
c01013d4:	83 c4 10             	add    $0x10,%esp
c01013d7:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(node != NULL && node == &(all[i]->rb_link));
c01013da:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01013de:	74 19                	je     c01013f9 <check_rb_tree+0x337>
c01013e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01013e3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01013ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01013ed:	01 d0                	add    %edx,%eax
c01013ef:	8b 00                	mov    (%eax),%eax
c01013f1:	83 c0 04             	add    $0x4,%eax
c01013f4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c01013f7:	74 19                	je     c0101412 <check_rb_tree+0x350>
c01013f9:	68 08 d0 10 c0       	push   $0xc010d008
c01013fe:	68 58 ce 10 c0       	push   $0xc010ce58
c0101403:	68 e2 01 00 00       	push   $0x1e2
c0101408:	68 6d ce 10 c0       	push   $0xc010ce6d
c010140d:	e8 4f 03 00 00       	call   c0101761 <__panic>
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    rb_node *node;
    for (i = 0; i < total; i ++) {
c0101412:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101416:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101419:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010141c:	7c 92                	jl     c01013b0 <check_rb_tree+0x2ee>
        node = rb_search(tree, check_compare2, (void *)(all[i]->data));
        assert(node != NULL && node == &(all[i]->rb_link));
    }

    for (i = 0; i < total; i ++) {
c010141e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101425:	eb 70                	jmp    c0101497 <check_rb_tree+0x3d5>
        node = rb_search(tree, check_compare2, (void *)i);
c0101427:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010142a:	83 ec 04             	sub    $0x4,%esp
c010142d:	50                   	push   %eax
c010142e:	68 ae 10 10 c0       	push   $0xc01010ae
c0101433:	ff 75 ec             	pushl  -0x14(%ebp)
c0101436:	e8 64 f5 ff ff       	call   c010099f <rb_search>
c010143b:	83 c4 10             	add    $0x10,%esp
c010143e:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(node != NULL && rbn2data(node)->data == i);
c0101441:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0101445:	74 0d                	je     c0101454 <check_rb_tree+0x392>
c0101447:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010144a:	83 e8 04             	sub    $0x4,%eax
c010144d:	8b 00                	mov    (%eax),%eax
c010144f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0101452:	74 19                	je     c010146d <check_rb_tree+0x3ab>
c0101454:	68 34 d0 10 c0       	push   $0xc010d034
c0101459:	68 58 ce 10 c0       	push   $0xc010ce58
c010145e:	68 e7 01 00 00       	push   $0x1e7
c0101463:	68 6d ce 10 c0       	push   $0xc010ce6d
c0101468:	e8 f4 02 00 00       	call   c0101761 <__panic>
        rb_delete(tree, node);
c010146d:	83 ec 08             	sub    $0x8,%esp
c0101470:	ff 75 cc             	pushl  -0x34(%ebp)
c0101473:	ff 75 ec             	pushl  -0x14(%ebp)
c0101476:	e8 d0 f7 ff ff       	call   c0100c4b <rb_delete>
c010147b:	83 c4 10             	add    $0x10,%esp
        check_tree(tree, root->left);
c010147e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101481:	8b 40 08             	mov    0x8(%eax),%eax
c0101484:	83 ec 08             	sub    $0x8,%esp
c0101487:	50                   	push   %eax
c0101488:	ff 75 ec             	pushl  -0x14(%ebp)
c010148b:	e8 18 fa ff ff       	call   c0100ea8 <check_tree>
c0101490:	83 c4 10             	add    $0x10,%esp
    for (i = 0; i < total; i ++) {
        node = rb_search(tree, check_compare2, (void *)(all[i]->data));
        assert(node != NULL && node == &(all[i]->rb_link));
    }

    for (i = 0; i < total; i ++) {
c0101493:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101497:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010149a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010149d:	7c 88                	jl     c0101427 <check_rb_tree+0x365>
        assert(node != NULL && rbn2data(node)->data == i);
        rb_delete(tree, node);
        check_tree(tree, root->left);
    }

    assert(!nil->red && root->left == nil);
c010149f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01014a2:	8b 00                	mov    (%eax),%eax
c01014a4:	85 c0                	test   %eax,%eax
c01014a6:	75 0b                	jne    c01014b3 <check_rb_tree+0x3f1>
c01014a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01014ab:	8b 40 08             	mov    0x8(%eax),%eax
c01014ae:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01014b1:	74 19                	je     c01014cc <check_rb_tree+0x40a>
c01014b3:	68 dc cf 10 c0       	push   $0xc010cfdc
c01014b8:	68 58 ce 10 c0       	push   $0xc010ce58
c01014bd:	68 ec 01 00 00       	push   $0x1ec
c01014c2:	68 6d ce 10 c0       	push   $0xc010ce6d
c01014c7:	e8 95 02 00 00       	call   c0101761 <__panic>

    long max = 32;
c01014cc:	c7 45 f0 20 00 00 00 	movl   $0x20,-0x10(%ebp)
    if (max > total) {
c01014d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01014d6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01014d9:	7e 06                	jle    c01014e1 <check_rb_tree+0x41f>
        max = total;
c01014db:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01014de:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    for (i = 0; i < max; i ++) {
c01014e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01014e8:	eb 52                	jmp    c010153c <check_rb_tree+0x47a>
        all[i]->data = max;
c01014ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01014ed:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01014f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01014f7:	01 d0                	add    %edx,%eax
c01014f9:	8b 00                	mov    (%eax),%eax
c01014fb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01014fe:	89 10                	mov    %edx,(%eax)
        rb_insert(tree, &(all[i]->rb_link));
c0101500:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101503:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010150a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010150d:	01 d0                	add    %edx,%eax
c010150f:	8b 00                	mov    (%eax),%eax
c0101511:	83 c0 04             	add    $0x4,%eax
c0101514:	83 ec 08             	sub    $0x8,%esp
c0101517:	50                   	push   %eax
c0101518:	ff 75 ec             	pushl  -0x14(%ebp)
c010151b:	e8 9f f1 ff ff       	call   c01006bf <rb_insert>
c0101520:	83 c4 10             	add    $0x10,%esp
        check_tree(tree, root->left);
c0101523:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101526:	8b 40 08             	mov    0x8(%eax),%eax
c0101529:	83 ec 08             	sub    $0x8,%esp
c010152c:	50                   	push   %eax
c010152d:	ff 75 ec             	pushl  -0x14(%ebp)
c0101530:	e8 73 f9 ff ff       	call   c0100ea8 <check_tree>
c0101535:	83 c4 10             	add    $0x10,%esp
    long max = 32;
    if (max > total) {
        max = total;
    }

    for (i = 0; i < max; i ++) {
c0101538:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010153c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010153f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0101542:	7c a6                	jl     c01014ea <check_rb_tree+0x428>
        all[i]->data = max;
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    for (i = 0; i < max; i ++) {
c0101544:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010154b:	eb 70                	jmp    c01015bd <check_rb_tree+0x4fb>
        node = rb_search(tree, check_compare2, (void *)max);
c010154d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101550:	83 ec 04             	sub    $0x4,%esp
c0101553:	50                   	push   %eax
c0101554:	68 ae 10 10 c0       	push   $0xc01010ae
c0101559:	ff 75 ec             	pushl  -0x14(%ebp)
c010155c:	e8 3e f4 ff ff       	call   c010099f <rb_search>
c0101561:	83 c4 10             	add    $0x10,%esp
c0101564:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(node != NULL && rbn2data(node)->data == max);
c0101567:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010156b:	74 0d                	je     c010157a <check_rb_tree+0x4b8>
c010156d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101570:	83 e8 04             	sub    $0x4,%eax
c0101573:	8b 00                	mov    (%eax),%eax
c0101575:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0101578:	74 19                	je     c0101593 <check_rb_tree+0x4d1>
c010157a:	68 60 d0 10 c0       	push   $0xc010d060
c010157f:	68 58 ce 10 c0       	push   $0xc010ce58
c0101584:	68 fb 01 00 00       	push   $0x1fb
c0101589:	68 6d ce 10 c0       	push   $0xc010ce6d
c010158e:	e8 ce 01 00 00       	call   c0101761 <__panic>
        rb_delete(tree, node);
c0101593:	83 ec 08             	sub    $0x8,%esp
c0101596:	ff 75 cc             	pushl  -0x34(%ebp)
c0101599:	ff 75 ec             	pushl  -0x14(%ebp)
c010159c:	e8 aa f6 ff ff       	call   c0100c4b <rb_delete>
c01015a1:	83 c4 10             	add    $0x10,%esp
        check_tree(tree, root->left);
c01015a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01015a7:	8b 40 08             	mov    0x8(%eax),%eax
c01015aa:	83 ec 08             	sub    $0x8,%esp
c01015ad:	50                   	push   %eax
c01015ae:	ff 75 ec             	pushl  -0x14(%ebp)
c01015b1:	e8 f2 f8 ff ff       	call   c0100ea8 <check_tree>
c01015b6:	83 c4 10             	add    $0x10,%esp
        all[i]->data = max;
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    for (i = 0; i < max; i ++) {
c01015b9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01015bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01015c0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01015c3:	7c 88                	jl     c010154d <check_rb_tree+0x48b>
        assert(node != NULL && rbn2data(node)->data == max);
        rb_delete(tree, node);
        check_tree(tree, root->left);
    }

    assert(rb_tree_empty(tree));
c01015c5:	83 ec 0c             	sub    $0xc,%esp
c01015c8:	ff 75 ec             	pushl  -0x14(%ebp)
c01015cb:	e8 6c ed ff ff       	call   c010033c <rb_tree_empty>
c01015d0:	83 c4 10             	add    $0x10,%esp
c01015d3:	85 c0                	test   %eax,%eax
c01015d5:	75 19                	jne    c01015f0 <check_rb_tree+0x52e>
c01015d7:	68 8c d0 10 c0       	push   $0xc010d08c
c01015dc:	68 58 ce 10 c0       	push   $0xc010ce58
c01015e1:	68 00 02 00 00       	push   $0x200
c01015e6:	68 6d ce 10 c0       	push   $0xc010ce6d
c01015eb:	e8 71 01 00 00       	call   c0101761 <__panic>

    for (i = 0; i < total; i ++) {
c01015f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01015f7:	eb 3c                	jmp    c0101635 <check_rb_tree+0x573>
        rb_insert(tree, &(all[i]->rb_link));
c01015f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01015fc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101603:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101606:	01 d0                	add    %edx,%eax
c0101608:	8b 00                	mov    (%eax),%eax
c010160a:	83 c0 04             	add    $0x4,%eax
c010160d:	83 ec 08             	sub    $0x8,%esp
c0101610:	50                   	push   %eax
c0101611:	ff 75 ec             	pushl  -0x14(%ebp)
c0101614:	e8 a6 f0 ff ff       	call   c01006bf <rb_insert>
c0101619:	83 c4 10             	add    $0x10,%esp
        check_tree(tree, root->left);
c010161c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010161f:	8b 40 08             	mov    0x8(%eax),%eax
c0101622:	83 ec 08             	sub    $0x8,%esp
c0101625:	50                   	push   %eax
c0101626:	ff 75 ec             	pushl  -0x14(%ebp)
c0101629:	e8 7a f8 ff ff       	call   c0100ea8 <check_tree>
c010162e:	83 c4 10             	add    $0x10,%esp
        check_tree(tree, root->left);
    }

    assert(rb_tree_empty(tree));

    for (i = 0; i < total; i ++) {
c0101631:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101635:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101638:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010163b:	7c bc                	jl     c01015f9 <check_rb_tree+0x537>
        rb_insert(tree, &(all[i]->rb_link));
        check_tree(tree, root->left);
    }

    rb_tree_destroy(tree);
c010163d:	83 ec 0c             	sub    $0xc,%esp
c0101640:	ff 75 ec             	pushl  -0x14(%ebp)
c0101643:	e8 54 f7 ff ff       	call   c0100d9c <rb_tree_destroy>
c0101648:	83 c4 10             	add    $0x10,%esp

    for (i = 0; i < total; i ++) {
c010164b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101652:	eb 21                	jmp    c0101675 <check_rb_tree+0x5b3>
        kfree(all[i]);
c0101654:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101657:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010165e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101661:	01 d0                	add    %edx,%eax
c0101663:	8b 00                	mov    (%eax),%eax
c0101665:	83 ec 0c             	sub    $0xc,%esp
c0101668:	50                   	push   %eax
c0101669:	e8 1f 70 00 00       	call   c010868d <kfree>
c010166e:	83 c4 10             	add    $0x10,%esp
        check_tree(tree, root->left);
    }

    rb_tree_destroy(tree);

    for (i = 0; i < total; i ++) {
c0101671:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101675:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101678:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010167b:	7c d7                	jl     c0101654 <check_rb_tree+0x592>
        kfree(all[i]);
    }

    kfree(mark);
c010167d:	83 ec 0c             	sub    $0xc,%esp
c0101680:	ff 75 d8             	pushl  -0x28(%ebp)
c0101683:	e8 05 70 00 00       	call   c010868d <kfree>
c0101688:	83 c4 10             	add    $0x10,%esp
    kfree(all);
c010168b:	83 ec 0c             	sub    $0xc,%esp
c010168e:	ff 75 dc             	pushl  -0x24(%ebp)
c0101691:	e8 f7 6f 00 00       	call   c010868d <kfree>
c0101696:	83 c4 10             	add    $0x10,%esp
}
c0101699:	90                   	nop
c010169a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010169d:	c9                   	leave  
c010169e:	c3                   	ret    

c010169f <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c010169f:	55                   	push   %ebp
c01016a0:	89 e5                	mov    %esp,%ebp
c01016a2:	83 ec 18             	sub    $0x18,%esp
    if (prompt != NULL) {
c01016a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01016a9:	74 13                	je     c01016be <readline+0x1f>
        cprintf("%s", prompt);
c01016ab:	83 ec 08             	sub    $0x8,%esp
c01016ae:	ff 75 08             	pushl  0x8(%ebp)
c01016b1:	68 a0 d0 10 c0       	push   $0xc010d0a0
c01016b6:	e8 c8 eb ff ff       	call   c0100283 <cprintf>
c01016bb:	83 c4 10             	add    $0x10,%esp
    }
    int i = 0, c;
c01016be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c01016c5:	e8 44 ec ff ff       	call   c010030e <getchar>
c01016ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c01016cd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01016d1:	79 0a                	jns    c01016dd <readline+0x3e>
            return NULL;
c01016d3:	b8 00 00 00 00       	mov    $0x0,%eax
c01016d8:	e9 82 00 00 00       	jmp    c010175f <readline+0xc0>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c01016dd:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c01016e1:	7e 2b                	jle    c010170e <readline+0x6f>
c01016e3:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c01016ea:	7f 22                	jg     c010170e <readline+0x6f>
            cputchar(c);
c01016ec:	83 ec 0c             	sub    $0xc,%esp
c01016ef:	ff 75 f0             	pushl  -0x10(%ebp)
c01016f2:	e8 b2 eb ff ff       	call   c01002a9 <cputchar>
c01016f7:	83 c4 10             	add    $0x10,%esp
            buf[i ++] = c;
c01016fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01016fd:	8d 50 01             	lea    0x1(%eax),%edx
c0101700:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0101703:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101706:	88 90 00 0d 1b c0    	mov    %dl,-0x3fe4f300(%eax)
c010170c:	eb 4c                	jmp    c010175a <readline+0xbb>
        }
        else if (c == '\b' && i > 0) {
c010170e:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c0101712:	75 1a                	jne    c010172e <readline+0x8f>
c0101714:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101718:	7e 14                	jle    c010172e <readline+0x8f>
            cputchar(c);
c010171a:	83 ec 0c             	sub    $0xc,%esp
c010171d:	ff 75 f0             	pushl  -0x10(%ebp)
c0101720:	e8 84 eb ff ff       	call   c01002a9 <cputchar>
c0101725:	83 c4 10             	add    $0x10,%esp
            i --;
c0101728:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010172c:	eb 2c                	jmp    c010175a <readline+0xbb>
        }
        else if (c == '\n' || c == '\r') {
c010172e:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c0101732:	74 06                	je     c010173a <readline+0x9b>
c0101734:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c0101738:	75 8b                	jne    c01016c5 <readline+0x26>
            cputchar(c);
c010173a:	83 ec 0c             	sub    $0xc,%esp
c010173d:	ff 75 f0             	pushl  -0x10(%ebp)
c0101740:	e8 64 eb ff ff       	call   c01002a9 <cputchar>
c0101745:	83 c4 10             	add    $0x10,%esp
            buf[i] = '\0';
c0101748:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010174b:	05 00 0d 1b c0       	add    $0xc01b0d00,%eax
c0101750:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c0101753:	b8 00 0d 1b c0       	mov    $0xc01b0d00,%eax
c0101758:	eb 05                	jmp    c010175f <readline+0xc0>
        }
    }
c010175a:	e9 66 ff ff ff       	jmp    c01016c5 <readline+0x26>
}
c010175f:	c9                   	leave  
c0101760:	c3                   	ret    

c0101761 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0101761:	55                   	push   %ebp
c0101762:	89 e5                	mov    %esp,%ebp
c0101764:	83 ec 18             	sub    $0x18,%esp
    if (is_panic) {
c0101767:	a1 00 11 1b c0       	mov    0xc01b1100,%eax
c010176c:	85 c0                	test   %eax,%eax
c010176e:	75 4a                	jne    c01017ba <__panic+0x59>
        goto panic_dead;
    }
    is_panic = 1;
c0101770:	c7 05 00 11 1b c0 01 	movl   $0x1,0xc01b1100
c0101777:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c010177a:	8d 45 14             	lea    0x14(%ebp),%eax
c010177d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0101780:	83 ec 04             	sub    $0x4,%esp
c0101783:	ff 75 0c             	pushl  0xc(%ebp)
c0101786:	ff 75 08             	pushl  0x8(%ebp)
c0101789:	68 a3 d0 10 c0       	push   $0xc010d0a3
c010178e:	e8 f0 ea ff ff       	call   c0100283 <cprintf>
c0101793:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c0101796:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101799:	83 ec 08             	sub    $0x8,%esp
c010179c:	50                   	push   %eax
c010179d:	ff 75 10             	pushl  0x10(%ebp)
c01017a0:	e8 b5 ea ff ff       	call   c010025a <vcprintf>
c01017a5:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c01017a8:	83 ec 0c             	sub    $0xc,%esp
c01017ab:	68 bf d0 10 c0       	push   $0xc010d0bf
c01017b0:	e8 ce ea ff ff       	call   c0100283 <cprintf>
c01017b5:	83 c4 10             	add    $0x10,%esp
c01017b8:	eb 01                	jmp    c01017bb <__panic+0x5a>
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
    if (is_panic) {
        goto panic_dead;
c01017ba:	90                   	nop
    vcprintf(fmt, ap);
    cprintf("\n");
    va_end(ap);

panic_dead:
    intr_disable();
c01017bb:	e8 44 1d 00 00       	call   c0103504 <intr_disable>
    while (1) {
        kmonitor(NULL);
c01017c0:	83 ec 0c             	sub    $0xc,%esp
c01017c3:	6a 00                	push   $0x0
c01017c5:	e8 0d 09 00 00       	call   c01020d7 <kmonitor>
c01017ca:	83 c4 10             	add    $0x10,%esp
    }
c01017cd:	eb f1                	jmp    c01017c0 <__panic+0x5f>

c01017cf <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c01017cf:	55                   	push   %ebp
c01017d0:	89 e5                	mov    %esp,%ebp
c01017d2:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    va_start(ap, fmt);
c01017d5:	8d 45 14             	lea    0x14(%ebp),%eax
c01017d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c01017db:	83 ec 04             	sub    $0x4,%esp
c01017de:	ff 75 0c             	pushl  0xc(%ebp)
c01017e1:	ff 75 08             	pushl  0x8(%ebp)
c01017e4:	68 c1 d0 10 c0       	push   $0xc010d0c1
c01017e9:	e8 95 ea ff ff       	call   c0100283 <cprintf>
c01017ee:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c01017f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01017f4:	83 ec 08             	sub    $0x8,%esp
c01017f7:	50                   	push   %eax
c01017f8:	ff 75 10             	pushl  0x10(%ebp)
c01017fb:	e8 5a ea ff ff       	call   c010025a <vcprintf>
c0101800:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c0101803:	83 ec 0c             	sub    $0xc,%esp
c0101806:	68 bf d0 10 c0       	push   $0xc010d0bf
c010180b:	e8 73 ea ff ff       	call   c0100283 <cprintf>
c0101810:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c0101813:	90                   	nop
c0101814:	c9                   	leave  
c0101815:	c3                   	ret    

c0101816 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0101816:	55                   	push   %ebp
c0101817:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0101819:	a1 00 11 1b c0       	mov    0xc01b1100,%eax
}
c010181e:	5d                   	pop    %ebp
c010181f:	c3                   	ret    

c0101820 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c0101820:	55                   	push   %ebp
c0101821:	89 e5                	mov    %esp,%ebp
c0101823:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c0101826:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101829:	8b 00                	mov    (%eax),%eax
c010182b:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010182e:	8b 45 10             	mov    0x10(%ebp),%eax
c0101831:	8b 00                	mov    (%eax),%eax
c0101833:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0101836:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c010183d:	e9 d2 00 00 00       	jmp    c0101914 <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c0101842:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0101845:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0101848:	01 d0                	add    %edx,%eax
c010184a:	89 c2                	mov    %eax,%edx
c010184c:	c1 ea 1f             	shr    $0x1f,%edx
c010184f:	01 d0                	add    %edx,%eax
c0101851:	d1 f8                	sar    %eax
c0101853:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0101856:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101859:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010185c:	eb 04                	jmp    c0101862 <stab_binsearch+0x42>
            m --;
c010185e:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0101862:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101865:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0101868:	7c 1f                	jl     c0101889 <stab_binsearch+0x69>
c010186a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010186d:	89 d0                	mov    %edx,%eax
c010186f:	01 c0                	add    %eax,%eax
c0101871:	01 d0                	add    %edx,%eax
c0101873:	c1 e0 02             	shl    $0x2,%eax
c0101876:	89 c2                	mov    %eax,%edx
c0101878:	8b 45 08             	mov    0x8(%ebp),%eax
c010187b:	01 d0                	add    %edx,%eax
c010187d:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101881:	0f b6 c0             	movzbl %al,%eax
c0101884:	3b 45 14             	cmp    0x14(%ebp),%eax
c0101887:	75 d5                	jne    c010185e <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0101889:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010188c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010188f:	7d 0b                	jge    c010189c <stab_binsearch+0x7c>
            l = true_m + 1;
c0101891:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101894:	83 c0 01             	add    $0x1,%eax
c0101897:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c010189a:	eb 78                	jmp    c0101914 <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c010189c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c01018a3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01018a6:	89 d0                	mov    %edx,%eax
c01018a8:	01 c0                	add    %eax,%eax
c01018aa:	01 d0                	add    %edx,%eax
c01018ac:	c1 e0 02             	shl    $0x2,%eax
c01018af:	89 c2                	mov    %eax,%edx
c01018b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01018b4:	01 d0                	add    %edx,%eax
c01018b6:	8b 40 08             	mov    0x8(%eax),%eax
c01018b9:	3b 45 18             	cmp    0x18(%ebp),%eax
c01018bc:	73 13                	jae    c01018d1 <stab_binsearch+0xb1>
            *region_left = m;
c01018be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01018c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01018c4:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c01018c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01018c9:	83 c0 01             	add    $0x1,%eax
c01018cc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01018cf:	eb 43                	jmp    c0101914 <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c01018d1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01018d4:	89 d0                	mov    %edx,%eax
c01018d6:	01 c0                	add    %eax,%eax
c01018d8:	01 d0                	add    %edx,%eax
c01018da:	c1 e0 02             	shl    $0x2,%eax
c01018dd:	89 c2                	mov    %eax,%edx
c01018df:	8b 45 08             	mov    0x8(%ebp),%eax
c01018e2:	01 d0                	add    %edx,%eax
c01018e4:	8b 40 08             	mov    0x8(%eax),%eax
c01018e7:	3b 45 18             	cmp    0x18(%ebp),%eax
c01018ea:	76 16                	jbe    c0101902 <stab_binsearch+0xe2>
            *region_right = m - 1;
c01018ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01018ef:	8d 50 ff             	lea    -0x1(%eax),%edx
c01018f2:	8b 45 10             	mov    0x10(%ebp),%eax
c01018f5:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01018f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01018fa:	83 e8 01             	sub    $0x1,%eax
c01018fd:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0101900:	eb 12                	jmp    c0101914 <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c0101902:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101905:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101908:	89 10                	mov    %edx,(%eax)
            l = m;
c010190a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010190d:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c0101910:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c0101914:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101917:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010191a:	0f 8e 22 ff ff ff    	jle    c0101842 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c0101920:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101924:	75 0f                	jne    c0101935 <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c0101926:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101929:	8b 00                	mov    (%eax),%eax
c010192b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010192e:	8b 45 10             	mov    0x10(%ebp),%eax
c0101931:	89 10                	mov    %edx,(%eax)
        l = *region_right;
        for (; l > *region_left && stabs[l].n_type != type; l --)
            /* do nothing */;
        *region_left = l;
    }
}
c0101933:	eb 3f                	jmp    c0101974 <stab_binsearch+0x154>
    if (!any_matches) {
        *region_right = *region_left - 1;
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c0101935:	8b 45 10             	mov    0x10(%ebp),%eax
c0101938:	8b 00                	mov    (%eax),%eax
c010193a:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c010193d:	eb 04                	jmp    c0101943 <stab_binsearch+0x123>
c010193f:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c0101943:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101946:	8b 00                	mov    (%eax),%eax
c0101948:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010194b:	7d 1f                	jge    c010196c <stab_binsearch+0x14c>
c010194d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0101950:	89 d0                	mov    %edx,%eax
c0101952:	01 c0                	add    %eax,%eax
c0101954:	01 d0                	add    %edx,%eax
c0101956:	c1 e0 02             	shl    $0x2,%eax
c0101959:	89 c2                	mov    %eax,%edx
c010195b:	8b 45 08             	mov    0x8(%ebp),%eax
c010195e:	01 d0                	add    %edx,%eax
c0101960:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101964:	0f b6 c0             	movzbl %al,%eax
c0101967:	3b 45 14             	cmp    0x14(%ebp),%eax
c010196a:	75 d3                	jne    c010193f <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c010196c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010196f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0101972:	89 10                	mov    %edx,(%eax)
    }
}
c0101974:	90                   	nop
c0101975:	c9                   	leave  
c0101976:	c3                   	ret    

c0101977 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0101977:	55                   	push   %ebp
c0101978:	89 e5                	mov    %esp,%ebp
c010197a:	83 ec 38             	sub    $0x38,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c010197d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101980:	c7 00 e0 d0 10 c0    	movl   $0xc010d0e0,(%eax)
    info->eip_line = 0;
c0101986:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101989:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0101990:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101993:	c7 40 08 e0 d0 10 c0 	movl   $0xc010d0e0,0x8(%eax)
    info->eip_fn_namelen = 9;
c010199a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010199d:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c01019a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019a7:	8b 55 08             	mov    0x8(%ebp),%edx
c01019aa:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c01019ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01019b0:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c01019b7:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c01019be:	76 21                	jbe    c01019e1 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c01019c0:	c7 45 f4 40 fa 10 c0 	movl   $0xc010fa40,-0xc(%ebp)
        stab_end = __STAB_END__;
c01019c7:	c7 45 f0 a0 68 12 c0 	movl   $0xc01268a0,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c01019ce:	c7 45 ec a1 68 12 c0 	movl   $0xc01268a1,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c01019d5:	c7 45 e8 0f cf 12 c0 	movl   $0xc012cf0f,-0x18(%ebp)
c01019dc:	e9 c3 00 00 00       	jmp    c0101aa4 <debuginfo_eip+0x12d>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01019e1:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01019e8:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c01019ed:	85 c0                	test   %eax,%eax
c01019ef:	74 11                	je     c0101a02 <debuginfo_eip+0x8b>
c01019f1:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c01019f6:	8b 40 18             	mov    0x18(%eax),%eax
c01019f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01019fc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0101a00:	75 0a                	jne    c0101a0c <debuginfo_eip+0x95>
            return -1;
c0101a02:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101a07:	e9 4e 03 00 00       	jmp    c0101d5a <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c0101a0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a0f:	6a 00                	push   $0x0
c0101a11:	6a 10                	push   $0x10
c0101a13:	50                   	push   %eax
c0101a14:	ff 75 e0             	pushl  -0x20(%ebp)
c0101a17:	e8 21 5a 00 00       	call   c010743d <user_mem_check>
c0101a1c:	83 c4 10             	add    $0x10,%esp
c0101a1f:	85 c0                	test   %eax,%eax
c0101a21:	75 0a                	jne    c0101a2d <debuginfo_eip+0xb6>
            return -1;
c0101a23:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101a28:	e9 2d 03 00 00       	jmp    c0101d5a <debuginfo_eip+0x3e3>
        }

        stabs = usd->stabs;
c0101a2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a30:	8b 00                	mov    (%eax),%eax
c0101a32:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c0101a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a38:	8b 40 04             	mov    0x4(%eax),%eax
c0101a3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0101a3e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a41:	8b 40 08             	mov    0x8(%eax),%eax
c0101a44:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c0101a47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a4a:	8b 40 0c             	mov    0xc(%eax),%eax
c0101a4d:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0101a50:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101a53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101a56:	29 c2                	sub    %eax,%edx
c0101a58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101a5b:	6a 00                	push   $0x0
c0101a5d:	52                   	push   %edx
c0101a5e:	50                   	push   %eax
c0101a5f:	ff 75 e0             	pushl  -0x20(%ebp)
c0101a62:	e8 d6 59 00 00       	call   c010743d <user_mem_check>
c0101a67:	83 c4 10             	add    $0x10,%esp
c0101a6a:	85 c0                	test   %eax,%eax
c0101a6c:	75 0a                	jne    c0101a78 <debuginfo_eip+0x101>
            return -1;
c0101a6e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101a73:	e9 e2 02 00 00       	jmp    c0101d5a <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0101a78:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0101a7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a7e:	29 c2                	sub    %eax,%edx
c0101a80:	89 d0                	mov    %edx,%eax
c0101a82:	89 c2                	mov    %eax,%edx
c0101a84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a87:	6a 00                	push   $0x0
c0101a89:	52                   	push   %edx
c0101a8a:	50                   	push   %eax
c0101a8b:	ff 75 e0             	pushl  -0x20(%ebp)
c0101a8e:	e8 aa 59 00 00       	call   c010743d <user_mem_check>
c0101a93:	83 c4 10             	add    $0x10,%esp
c0101a96:	85 c0                	test   %eax,%eax
c0101a98:	75 0a                	jne    c0101aa4 <debuginfo_eip+0x12d>
            return -1;
c0101a9a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101a9f:	e9 b6 02 00 00       	jmp    c0101d5a <debuginfo_eip+0x3e3>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0101aa4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101aa7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0101aaa:	76 0d                	jbe    c0101ab9 <debuginfo_eip+0x142>
c0101aac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101aaf:	83 e8 01             	sub    $0x1,%eax
c0101ab2:	0f b6 00             	movzbl (%eax),%eax
c0101ab5:	84 c0                	test   %al,%al
c0101ab7:	74 0a                	je     c0101ac3 <debuginfo_eip+0x14c>
        return -1;
c0101ab9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101abe:	e9 97 02 00 00       	jmp    c0101d5a <debuginfo_eip+0x3e3>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c0101ac3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0101aca:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0101acd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101ad0:	29 c2                	sub    %eax,%edx
c0101ad2:	89 d0                	mov    %edx,%eax
c0101ad4:	c1 f8 02             	sar    $0x2,%eax
c0101ad7:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c0101add:	83 e8 01             	sub    $0x1,%eax
c0101ae0:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c0101ae3:	83 ec 0c             	sub    $0xc,%esp
c0101ae6:	ff 75 08             	pushl  0x8(%ebp)
c0101ae9:	6a 64                	push   $0x64
c0101aeb:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0101aee:	50                   	push   %eax
c0101aef:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0101af2:	50                   	push   %eax
c0101af3:	ff 75 f4             	pushl  -0xc(%ebp)
c0101af6:	e8 25 fd ff ff       	call   c0101820 <stab_binsearch>
c0101afb:	83 c4 20             	add    $0x20,%esp
    if (lfile == 0)
c0101afe:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b01:	85 c0                	test   %eax,%eax
c0101b03:	75 0a                	jne    c0101b0f <debuginfo_eip+0x198>
        return -1;
c0101b05:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101b0a:	e9 4b 02 00 00       	jmp    c0101d5a <debuginfo_eip+0x3e3>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0101b0f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b12:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0101b15:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101b18:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0101b1b:	83 ec 0c             	sub    $0xc,%esp
c0101b1e:	ff 75 08             	pushl  0x8(%ebp)
c0101b21:	6a 24                	push   $0x24
c0101b23:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0101b26:	50                   	push   %eax
c0101b27:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0101b2a:	50                   	push   %eax
c0101b2b:	ff 75 f4             	pushl  -0xc(%ebp)
c0101b2e:	e8 ed fc ff ff       	call   c0101820 <stab_binsearch>
c0101b33:	83 c4 20             	add    $0x20,%esp

    if (lfun <= rfun) {
c0101b36:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101b39:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101b3c:	39 c2                	cmp    %eax,%edx
c0101b3e:	7f 7c                	jg     c0101bbc <debuginfo_eip+0x245>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0101b40:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101b43:	89 c2                	mov    %eax,%edx
c0101b45:	89 d0                	mov    %edx,%eax
c0101b47:	01 c0                	add    %eax,%eax
c0101b49:	01 d0                	add    %edx,%eax
c0101b4b:	c1 e0 02             	shl    $0x2,%eax
c0101b4e:	89 c2                	mov    %eax,%edx
c0101b50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101b53:	01 d0                	add    %edx,%eax
c0101b55:	8b 00                	mov    (%eax),%eax
c0101b57:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0101b5a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0101b5d:	29 d1                	sub    %edx,%ecx
c0101b5f:	89 ca                	mov    %ecx,%edx
c0101b61:	39 d0                	cmp    %edx,%eax
c0101b63:	73 22                	jae    c0101b87 <debuginfo_eip+0x210>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0101b65:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101b68:	89 c2                	mov    %eax,%edx
c0101b6a:	89 d0                	mov    %edx,%eax
c0101b6c:	01 c0                	add    %eax,%eax
c0101b6e:	01 d0                	add    %edx,%eax
c0101b70:	c1 e0 02             	shl    $0x2,%eax
c0101b73:	89 c2                	mov    %eax,%edx
c0101b75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101b78:	01 d0                	add    %edx,%eax
c0101b7a:	8b 10                	mov    (%eax),%edx
c0101b7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b7f:	01 c2                	add    %eax,%edx
c0101b81:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101b84:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0101b87:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101b8a:	89 c2                	mov    %eax,%edx
c0101b8c:	89 d0                	mov    %edx,%eax
c0101b8e:	01 c0                	add    %eax,%eax
c0101b90:	01 d0                	add    %edx,%eax
c0101b92:	c1 e0 02             	shl    $0x2,%eax
c0101b95:	89 c2                	mov    %eax,%edx
c0101b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101b9a:	01 d0                	add    %edx,%eax
c0101b9c:	8b 50 08             	mov    0x8(%eax),%edx
c0101b9f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101ba2:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c0101ba5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101ba8:	8b 40 10             	mov    0x10(%eax),%eax
c0101bab:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c0101bae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101bb1:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c0101bb4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101bb7:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0101bba:	eb 15                	jmp    c0101bd1 <debuginfo_eip+0x25a>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c0101bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101bbf:	8b 55 08             	mov    0x8(%ebp),%edx
c0101bc2:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c0101bc5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101bc8:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c0101bcb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101bce:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c0101bd1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101bd4:	8b 40 08             	mov    0x8(%eax),%eax
c0101bd7:	83 ec 08             	sub    $0x8,%esp
c0101bda:	6a 3a                	push   $0x3a
c0101bdc:	50                   	push   %eax
c0101bdd:	e8 82 a7 00 00       	call   c010c364 <strfind>
c0101be2:	83 c4 10             	add    $0x10,%esp
c0101be5:	89 c2                	mov    %eax,%edx
c0101be7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101bea:	8b 40 08             	mov    0x8(%eax),%eax
c0101bed:	29 c2                	sub    %eax,%edx
c0101bef:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101bf2:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c0101bf5:	83 ec 0c             	sub    $0xc,%esp
c0101bf8:	ff 75 08             	pushl  0x8(%ebp)
c0101bfb:	6a 44                	push   $0x44
c0101bfd:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0101c00:	50                   	push   %eax
c0101c01:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0101c04:	50                   	push   %eax
c0101c05:	ff 75 f4             	pushl  -0xc(%ebp)
c0101c08:	e8 13 fc ff ff       	call   c0101820 <stab_binsearch>
c0101c0d:	83 c4 20             	add    $0x20,%esp
    if (lline <= rline) {
c0101c10:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101c13:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101c16:	39 c2                	cmp    %eax,%edx
c0101c18:	7f 24                	jg     c0101c3e <debuginfo_eip+0x2c7>
        info->eip_line = stabs[rline].n_desc;
c0101c1a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101c1d:	89 c2                	mov    %eax,%edx
c0101c1f:	89 d0                	mov    %edx,%eax
c0101c21:	01 c0                	add    %eax,%eax
c0101c23:	01 d0                	add    %edx,%eax
c0101c25:	c1 e0 02             	shl    $0x2,%eax
c0101c28:	89 c2                	mov    %eax,%edx
c0101c2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101c2d:	01 d0                	add    %edx,%eax
c0101c2f:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0101c33:	0f b7 d0             	movzwl %ax,%edx
c0101c36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101c39:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0101c3c:	eb 13                	jmp    c0101c51 <debuginfo_eip+0x2da>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0101c3e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101c43:	e9 12 01 00 00       	jmp    c0101d5a <debuginfo_eip+0x3e3>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c0101c48:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101c4b:	83 e8 01             	sub    $0x1,%eax
c0101c4e:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0101c51:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101c54:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101c57:	39 c2                	cmp    %eax,%edx
c0101c59:	7c 56                	jl     c0101cb1 <debuginfo_eip+0x33a>
           && stabs[lline].n_type != N_SOL
c0101c5b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101c5e:	89 c2                	mov    %eax,%edx
c0101c60:	89 d0                	mov    %edx,%eax
c0101c62:	01 c0                	add    %eax,%eax
c0101c64:	01 d0                	add    %edx,%eax
c0101c66:	c1 e0 02             	shl    $0x2,%eax
c0101c69:	89 c2                	mov    %eax,%edx
c0101c6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101c6e:	01 d0                	add    %edx,%eax
c0101c70:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101c74:	3c 84                	cmp    $0x84,%al
c0101c76:	74 39                	je     c0101cb1 <debuginfo_eip+0x33a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0101c78:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101c7b:	89 c2                	mov    %eax,%edx
c0101c7d:	89 d0                	mov    %edx,%eax
c0101c7f:	01 c0                	add    %eax,%eax
c0101c81:	01 d0                	add    %edx,%eax
c0101c83:	c1 e0 02             	shl    $0x2,%eax
c0101c86:	89 c2                	mov    %eax,%edx
c0101c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101c8b:	01 d0                	add    %edx,%eax
c0101c8d:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101c91:	3c 64                	cmp    $0x64,%al
c0101c93:	75 b3                	jne    c0101c48 <debuginfo_eip+0x2d1>
c0101c95:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101c98:	89 c2                	mov    %eax,%edx
c0101c9a:	89 d0                	mov    %edx,%eax
c0101c9c:	01 c0                	add    %eax,%eax
c0101c9e:	01 d0                	add    %edx,%eax
c0101ca0:	c1 e0 02             	shl    $0x2,%eax
c0101ca3:	89 c2                	mov    %eax,%edx
c0101ca5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101ca8:	01 d0                	add    %edx,%eax
c0101caa:	8b 40 08             	mov    0x8(%eax),%eax
c0101cad:	85 c0                	test   %eax,%eax
c0101caf:	74 97                	je     c0101c48 <debuginfo_eip+0x2d1>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c0101cb1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101cb4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101cb7:	39 c2                	cmp    %eax,%edx
c0101cb9:	7c 46                	jl     c0101d01 <debuginfo_eip+0x38a>
c0101cbb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101cbe:	89 c2                	mov    %eax,%edx
c0101cc0:	89 d0                	mov    %edx,%eax
c0101cc2:	01 c0                	add    %eax,%eax
c0101cc4:	01 d0                	add    %edx,%eax
c0101cc6:	c1 e0 02             	shl    $0x2,%eax
c0101cc9:	89 c2                	mov    %eax,%edx
c0101ccb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101cce:	01 d0                	add    %edx,%eax
c0101cd0:	8b 00                	mov    (%eax),%eax
c0101cd2:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0101cd5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0101cd8:	29 d1                	sub    %edx,%ecx
c0101cda:	89 ca                	mov    %ecx,%edx
c0101cdc:	39 d0                	cmp    %edx,%eax
c0101cde:	73 21                	jae    c0101d01 <debuginfo_eip+0x38a>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0101ce0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101ce3:	89 c2                	mov    %eax,%edx
c0101ce5:	89 d0                	mov    %edx,%eax
c0101ce7:	01 c0                	add    %eax,%eax
c0101ce9:	01 d0                	add    %edx,%eax
c0101ceb:	c1 e0 02             	shl    $0x2,%eax
c0101cee:	89 c2                	mov    %eax,%edx
c0101cf0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101cf3:	01 d0                	add    %edx,%eax
c0101cf5:	8b 10                	mov    (%eax),%edx
c0101cf7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101cfa:	01 c2                	add    %eax,%edx
c0101cfc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101cff:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0101d01:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101d04:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101d07:	39 c2                	cmp    %eax,%edx
c0101d09:	7d 4a                	jge    c0101d55 <debuginfo_eip+0x3de>
        for (lline = lfun + 1;
c0101d0b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101d0e:	83 c0 01             	add    $0x1,%eax
c0101d11:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101d14:	eb 18                	jmp    c0101d2e <debuginfo_eip+0x3b7>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0101d16:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d19:	8b 40 14             	mov    0x14(%eax),%eax
c0101d1c:	8d 50 01             	lea    0x1(%eax),%edx
c0101d1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d22:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0101d25:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d28:	83 c0 01             	add    $0x1,%eax
c0101d2b:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0101d2e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101d31:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0101d34:	39 c2                	cmp    %eax,%edx
c0101d36:	7d 1d                	jge    c0101d55 <debuginfo_eip+0x3de>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0101d38:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101d3b:	89 c2                	mov    %eax,%edx
c0101d3d:	89 d0                	mov    %edx,%eax
c0101d3f:	01 c0                	add    %eax,%eax
c0101d41:	01 d0                	add    %edx,%eax
c0101d43:	c1 e0 02             	shl    $0x2,%eax
c0101d46:	89 c2                	mov    %eax,%edx
c0101d48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101d4b:	01 d0                	add    %edx,%eax
c0101d4d:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0101d51:	3c a0                	cmp    $0xa0,%al
c0101d53:	74 c1                	je     c0101d16 <debuginfo_eip+0x39f>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0101d55:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101d5a:	c9                   	leave  
c0101d5b:	c3                   	ret    

c0101d5c <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0101d5c:	55                   	push   %ebp
c0101d5d:	89 e5                	mov    %esp,%ebp
c0101d5f:	83 ec 08             	sub    $0x8,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0101d62:	83 ec 0c             	sub    $0xc,%esp
c0101d65:	68 ea d0 10 c0       	push   $0xc010d0ea
c0101d6a:	e8 14 e5 ff ff       	call   c0100283 <cprintf>
c0101d6f:	83 c4 10             	add    $0x10,%esp
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0101d72:	83 ec 08             	sub    $0x8,%esp
c0101d75:	68 2a 00 10 c0       	push   $0xc010002a
c0101d7a:	68 03 d1 10 c0       	push   $0xc010d103
c0101d7f:	e8 ff e4 ff ff       	call   c0100283 <cprintf>
c0101d84:	83 c4 10             	add    $0x10,%esp
    cprintf("  etext  0x%08x (phys)\n", etext);
c0101d87:	83 ec 08             	sub    $0x8,%esp
c0101d8a:	68 84 cd 10 c0       	push   $0xc010cd84
c0101d8f:	68 1b d1 10 c0       	push   $0xc010d11b
c0101d94:	e8 ea e4 ff ff       	call   c0100283 <cprintf>
c0101d99:	83 c4 10             	add    $0x10,%esp
    cprintf("  edata  0x%08x (phys)\n", edata);
c0101d9c:	83 ec 08             	sub    $0x8,%esp
c0101d9f:	68 dc 0c 1b c0       	push   $0xc01b0cdc
c0101da4:	68 33 d1 10 c0       	push   $0xc010d133
c0101da9:	e8 d5 e4 ff ff       	call   c0100283 <cprintf>
c0101dae:	83 c4 10             	add    $0x10,%esp
    cprintf("  end    0x%08x (phys)\n", end);
c0101db1:	83 ec 08             	sub    $0x8,%esp
c0101db4:	68 60 3e 1b c0       	push   $0xc01b3e60
c0101db9:	68 4b d1 10 c0       	push   $0xc010d14b
c0101dbe:	e8 c0 e4 ff ff       	call   c0100283 <cprintf>
c0101dc3:	83 c4 10             	add    $0x10,%esp
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0101dc6:	b8 60 3e 1b c0       	mov    $0xc01b3e60,%eax
c0101dcb:	05 ff 03 00 00       	add    $0x3ff,%eax
c0101dd0:	ba 2a 00 10 c0       	mov    $0xc010002a,%edx
c0101dd5:	29 d0                	sub    %edx,%eax
c0101dd7:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0101ddd:	85 c0                	test   %eax,%eax
c0101ddf:	0f 48 c2             	cmovs  %edx,%eax
c0101de2:	c1 f8 0a             	sar    $0xa,%eax
c0101de5:	83 ec 08             	sub    $0x8,%esp
c0101de8:	50                   	push   %eax
c0101de9:	68 64 d1 10 c0       	push   $0xc010d164
c0101dee:	e8 90 e4 ff ff       	call   c0100283 <cprintf>
c0101df3:	83 c4 10             	add    $0x10,%esp
}
c0101df6:	90                   	nop
c0101df7:	c9                   	leave  
c0101df8:	c3                   	ret    

c0101df9 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0101df9:	55                   	push   %ebp
c0101dfa:	89 e5                	mov    %esp,%ebp
c0101dfc:	81 ec 28 01 00 00    	sub    $0x128,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0101e02:	83 ec 08             	sub    $0x8,%esp
c0101e05:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0101e08:	50                   	push   %eax
c0101e09:	ff 75 08             	pushl  0x8(%ebp)
c0101e0c:	e8 66 fb ff ff       	call   c0101977 <debuginfo_eip>
c0101e11:	83 c4 10             	add    $0x10,%esp
c0101e14:	85 c0                	test   %eax,%eax
c0101e16:	74 15                	je     c0101e2d <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0101e18:	83 ec 08             	sub    $0x8,%esp
c0101e1b:	ff 75 08             	pushl  0x8(%ebp)
c0101e1e:	68 8e d1 10 c0       	push   $0xc010d18e
c0101e23:	e8 5b e4 ff ff       	call   c0100283 <cprintf>
c0101e28:	83 c4 10             	add    $0x10,%esp
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
    }
}
c0101e2b:	eb 65                	jmp    c0101e92 <print_debuginfo+0x99>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0101e2d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0101e34:	eb 1c                	jmp    c0101e52 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0101e36:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0101e39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101e3c:	01 d0                	add    %edx,%eax
c0101e3e:	0f b6 00             	movzbl (%eax),%eax
c0101e41:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0101e47:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101e4a:	01 ca                	add    %ecx,%edx
c0101e4c:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0101e4e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101e52:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101e55:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0101e58:	7f dc                	jg     c0101e36 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0101e5a:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0101e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101e63:	01 d0                	add    %edx,%eax
c0101e65:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0101e68:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0101e6b:	8b 55 08             	mov    0x8(%ebp),%edx
c0101e6e:	89 d1                	mov    %edx,%ecx
c0101e70:	29 c1                	sub    %eax,%ecx
c0101e72:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0101e75:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101e78:	83 ec 0c             	sub    $0xc,%esp
c0101e7b:	51                   	push   %ecx
c0101e7c:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0101e82:	51                   	push   %ecx
c0101e83:	52                   	push   %edx
c0101e84:	50                   	push   %eax
c0101e85:	68 aa d1 10 c0       	push   $0xc010d1aa
c0101e8a:	e8 f4 e3 ff ff       	call   c0100283 <cprintf>
c0101e8f:	83 c4 20             	add    $0x20,%esp
                fnname, eip - info.eip_fn_addr);
    }
}
c0101e92:	90                   	nop
c0101e93:	c9                   	leave  
c0101e94:	c3                   	ret    

c0101e95 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0101e95:	55                   	push   %ebp
c0101e96:	89 e5                	mov    %esp,%ebp
c0101e98:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0101e9b:	8b 45 04             	mov    0x4(%ebp),%eax
c0101e9e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0101ea1:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101ea4:	c9                   	leave  
c0101ea5:	c3                   	ret    

c0101ea6 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0101ea6:	55                   	push   %ebp
c0101ea7:	89 e5                	mov    %esp,%ebp
c0101ea9:	83 ec 28             	sub    $0x28,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0101eac:	89 e8                	mov    %ebp,%eax
c0101eae:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0101eb1:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();
c0101eb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101eb7:	e8 d9 ff ff ff       	call   c0101e95 <read_eip>
c0101ebc:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0101ebf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101ec6:	e9 8d 00 00 00       	jmp    c0101f58 <print_stackframe+0xb2>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0101ecb:	83 ec 04             	sub    $0x4,%esp
c0101ece:	ff 75 f0             	pushl  -0x10(%ebp)
c0101ed1:	ff 75 f4             	pushl  -0xc(%ebp)
c0101ed4:	68 bc d1 10 c0       	push   $0xc010d1bc
c0101ed9:	e8 a5 e3 ff ff       	call   c0100283 <cprintf>
c0101ede:	83 c4 10             	add    $0x10,%esp
        uint32_t *args = (uint32_t *)ebp + 2;
c0101ee1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101ee4:	83 c0 08             	add    $0x8,%eax
c0101ee7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for (j = 0; j < 4; j ++) {
c0101eea:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0101ef1:	eb 26                	jmp    c0101f19 <print_stackframe+0x73>
            cprintf("0x%08x ", args[j]);
c0101ef3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0101ef6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101efd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101f00:	01 d0                	add    %edx,%eax
c0101f02:	8b 00                	mov    (%eax),%eax
c0101f04:	83 ec 08             	sub    $0x8,%esp
c0101f07:	50                   	push   %eax
c0101f08:	68 d8 d1 10 c0       	push   $0xc010d1d8
c0101f0d:	e8 71 e3 ff ff       	call   c0100283 <cprintf>
c0101f12:	83 c4 10             	add    $0x10,%esp

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        uint32_t *args = (uint32_t *)ebp + 2;
        for (j = 0; j < 4; j ++) {
c0101f15:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0101f19:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0101f1d:	7e d4                	jle    c0101ef3 <print_stackframe+0x4d>
            cprintf("0x%08x ", args[j]);
        }
        cprintf("\n");
c0101f1f:	83 ec 0c             	sub    $0xc,%esp
c0101f22:	68 e0 d1 10 c0       	push   $0xc010d1e0
c0101f27:	e8 57 e3 ff ff       	call   c0100283 <cprintf>
c0101f2c:	83 c4 10             	add    $0x10,%esp
        print_debuginfo(eip - 1);
c0101f2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101f32:	83 e8 01             	sub    $0x1,%eax
c0101f35:	83 ec 0c             	sub    $0xc,%esp
c0101f38:	50                   	push   %eax
c0101f39:	e8 bb fe ff ff       	call   c0101df9 <print_debuginfo>
c0101f3e:	83 c4 10             	add    $0x10,%esp
        eip = ((uint32_t *)ebp)[1];
c0101f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f44:	83 c0 04             	add    $0x4,%eax
c0101f47:	8b 00                	mov    (%eax),%eax
c0101f49:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0101f4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101f4f:	8b 00                	mov    (%eax),%eax
c0101f51:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0101f54:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0101f58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101f5c:	74 0a                	je     c0101f68 <print_stackframe+0xc2>
c0101f5e:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0101f62:	0f 8e 63 ff ff ff    	jle    c0101ecb <print_stackframe+0x25>
        cprintf("\n");
        print_debuginfo(eip - 1);
        eip = ((uint32_t *)ebp)[1];
        ebp = ((uint32_t *)ebp)[0];
    }
}
c0101f68:	90                   	nop
c0101f69:	c9                   	leave  
c0101f6a:	c3                   	ret    

c0101f6b <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0101f6b:	55                   	push   %ebp
c0101f6c:	89 e5                	mov    %esp,%ebp
c0101f6e:	83 ec 18             	sub    $0x18,%esp
    int argc = 0;
c0101f71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0101f78:	eb 0c                	jmp    c0101f86 <parse+0x1b>
            *buf ++ = '\0';
c0101f7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0101f7d:	8d 50 01             	lea    0x1(%eax),%edx
c0101f80:	89 55 08             	mov    %edx,0x8(%ebp)
c0101f83:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0101f86:	8b 45 08             	mov    0x8(%ebp),%eax
c0101f89:	0f b6 00             	movzbl (%eax),%eax
c0101f8c:	84 c0                	test   %al,%al
c0101f8e:	74 1e                	je     c0101fae <parse+0x43>
c0101f90:	8b 45 08             	mov    0x8(%ebp),%eax
c0101f93:	0f b6 00             	movzbl (%eax),%eax
c0101f96:	0f be c0             	movsbl %al,%eax
c0101f99:	83 ec 08             	sub    $0x8,%esp
c0101f9c:	50                   	push   %eax
c0101f9d:	68 64 d2 10 c0       	push   $0xc010d264
c0101fa2:	e8 8a a3 00 00       	call   c010c331 <strchr>
c0101fa7:	83 c4 10             	add    $0x10,%esp
c0101faa:	85 c0                	test   %eax,%eax
c0101fac:	75 cc                	jne    c0101f7a <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0101fae:	8b 45 08             	mov    0x8(%ebp),%eax
c0101fb1:	0f b6 00             	movzbl (%eax),%eax
c0101fb4:	84 c0                	test   %al,%al
c0101fb6:	74 69                	je     c0102021 <parse+0xb6>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0101fb8:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0101fbc:	75 12                	jne    c0101fd0 <parse+0x65>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0101fbe:	83 ec 08             	sub    $0x8,%esp
c0101fc1:	6a 10                	push   $0x10
c0101fc3:	68 69 d2 10 c0       	push   $0xc010d269
c0101fc8:	e8 b6 e2 ff ff       	call   c0100283 <cprintf>
c0101fcd:	83 c4 10             	add    $0x10,%esp
        }
        argv[argc ++] = buf;
c0101fd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101fd3:	8d 50 01             	lea    0x1(%eax),%edx
c0101fd6:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0101fd9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0101fe0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101fe3:	01 c2                	add    %eax,%edx
c0101fe5:	8b 45 08             	mov    0x8(%ebp),%eax
c0101fe8:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0101fea:	eb 04                	jmp    c0101ff0 <parse+0x85>
            buf ++;
c0101fec:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0101ff0:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ff3:	0f b6 00             	movzbl (%eax),%eax
c0101ff6:	84 c0                	test   %al,%al
c0101ff8:	0f 84 7a ff ff ff    	je     c0101f78 <parse+0xd>
c0101ffe:	8b 45 08             	mov    0x8(%ebp),%eax
c0102001:	0f b6 00             	movzbl (%eax),%eax
c0102004:	0f be c0             	movsbl %al,%eax
c0102007:	83 ec 08             	sub    $0x8,%esp
c010200a:	50                   	push   %eax
c010200b:	68 64 d2 10 c0       	push   $0xc010d264
c0102010:	e8 1c a3 00 00       	call   c010c331 <strchr>
c0102015:	83 c4 10             	add    $0x10,%esp
c0102018:	85 c0                	test   %eax,%eax
c010201a:	74 d0                	je     c0101fec <parse+0x81>
            buf ++;
        }
    }
c010201c:	e9 57 ff ff ff       	jmp    c0101f78 <parse+0xd>
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
            break;
c0102021:	90                   	nop
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0102022:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102025:	c9                   	leave  
c0102026:	c3                   	ret    

c0102027 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0102027:	55                   	push   %ebp
c0102028:	89 e5                	mov    %esp,%ebp
c010202a:	83 ec 58             	sub    $0x58,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c010202d:	83 ec 08             	sub    $0x8,%esp
c0102030:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0102033:	50                   	push   %eax
c0102034:	ff 75 08             	pushl  0x8(%ebp)
c0102037:	e8 2f ff ff ff       	call   c0101f6b <parse>
c010203c:	83 c4 10             	add    $0x10,%esp
c010203f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0102042:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102046:	75 0a                	jne    c0102052 <runcmd+0x2b>
        return 0;
c0102048:	b8 00 00 00 00       	mov    $0x0,%eax
c010204d:	e9 83 00 00 00       	jmp    c01020d5 <runcmd+0xae>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0102052:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0102059:	eb 59                	jmp    c01020b4 <runcmd+0x8d>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c010205b:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c010205e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102061:	89 d0                	mov    %edx,%eax
c0102063:	01 c0                	add    %eax,%eax
c0102065:	01 d0                	add    %edx,%eax
c0102067:	c1 e0 02             	shl    $0x2,%eax
c010206a:	05 20 f0 12 c0       	add    $0xc012f020,%eax
c010206f:	8b 00                	mov    (%eax),%eax
c0102071:	83 ec 08             	sub    $0x8,%esp
c0102074:	51                   	push   %ecx
c0102075:	50                   	push   %eax
c0102076:	e8 16 a2 00 00       	call   c010c291 <strcmp>
c010207b:	83 c4 10             	add    $0x10,%esp
c010207e:	85 c0                	test   %eax,%eax
c0102080:	75 2e                	jne    c01020b0 <runcmd+0x89>
            return commands[i].func(argc - 1, argv + 1, tf);
c0102082:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102085:	89 d0                	mov    %edx,%eax
c0102087:	01 c0                	add    %eax,%eax
c0102089:	01 d0                	add    %edx,%eax
c010208b:	c1 e0 02             	shl    $0x2,%eax
c010208e:	05 28 f0 12 c0       	add    $0xc012f028,%eax
c0102093:	8b 10                	mov    (%eax),%edx
c0102095:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0102098:	83 c0 04             	add    $0x4,%eax
c010209b:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010209e:	83 e9 01             	sub    $0x1,%ecx
c01020a1:	83 ec 04             	sub    $0x4,%esp
c01020a4:	ff 75 0c             	pushl  0xc(%ebp)
c01020a7:	50                   	push   %eax
c01020a8:	51                   	push   %ecx
c01020a9:	ff d2                	call   *%edx
c01020ab:	83 c4 10             	add    $0x10,%esp
c01020ae:	eb 25                	jmp    c01020d5 <runcmd+0xae>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c01020b0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01020b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01020b7:	83 f8 02             	cmp    $0x2,%eax
c01020ba:	76 9f                	jbe    c010205b <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c01020bc:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01020bf:	83 ec 08             	sub    $0x8,%esp
c01020c2:	50                   	push   %eax
c01020c3:	68 87 d2 10 c0       	push   $0xc010d287
c01020c8:	e8 b6 e1 ff ff       	call   c0100283 <cprintf>
c01020cd:	83 c4 10             	add    $0x10,%esp
    return 0;
c01020d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01020d5:	c9                   	leave  
c01020d6:	c3                   	ret    

c01020d7 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c01020d7:	55                   	push   %ebp
c01020d8:	89 e5                	mov    %esp,%ebp
c01020da:	83 ec 18             	sub    $0x18,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c01020dd:	83 ec 0c             	sub    $0xc,%esp
c01020e0:	68 a0 d2 10 c0       	push   $0xc010d2a0
c01020e5:	e8 99 e1 ff ff       	call   c0100283 <cprintf>
c01020ea:	83 c4 10             	add    $0x10,%esp
    cprintf("Type 'help' for a list of commands.\n");
c01020ed:	83 ec 0c             	sub    $0xc,%esp
c01020f0:	68 c8 d2 10 c0       	push   $0xc010d2c8
c01020f5:	e8 89 e1 ff ff       	call   c0100283 <cprintf>
c01020fa:	83 c4 10             	add    $0x10,%esp

    if (tf != NULL) {
c01020fd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0102101:	74 0e                	je     c0102111 <kmonitor+0x3a>
        print_trapframe(tf);
c0102103:	83 ec 0c             	sub    $0xc,%esp
c0102106:	ff 75 08             	pushl  0x8(%ebp)
c0102109:	e8 ce 15 00 00       	call   c01036dc <print_trapframe>
c010210e:	83 c4 10             	add    $0x10,%esp
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0102111:	83 ec 0c             	sub    $0xc,%esp
c0102114:	68 ed d2 10 c0       	push   $0xc010d2ed
c0102119:	e8 81 f5 ff ff       	call   c010169f <readline>
c010211e:	83 c4 10             	add    $0x10,%esp
c0102121:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102124:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102128:	74 e7                	je     c0102111 <kmonitor+0x3a>
            if (runcmd(buf, tf) < 0) {
c010212a:	83 ec 08             	sub    $0x8,%esp
c010212d:	ff 75 08             	pushl  0x8(%ebp)
c0102130:	ff 75 f4             	pushl  -0xc(%ebp)
c0102133:	e8 ef fe ff ff       	call   c0102027 <runcmd>
c0102138:	83 c4 10             	add    $0x10,%esp
c010213b:	85 c0                	test   %eax,%eax
c010213d:	78 02                	js     c0102141 <kmonitor+0x6a>
                break;
            }
        }
    }
c010213f:	eb d0                	jmp    c0102111 <kmonitor+0x3a>

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
            if (runcmd(buf, tf) < 0) {
                break;
c0102141:	90                   	nop
            }
        }
    }
}
c0102142:	90                   	nop
c0102143:	c9                   	leave  
c0102144:	c3                   	ret    

c0102145 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0102145:	55                   	push   %ebp
c0102146:	89 e5                	mov    %esp,%ebp
c0102148:	83 ec 18             	sub    $0x18,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c010214b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0102152:	eb 3c                	jmp    c0102190 <mon_help+0x4b>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0102154:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102157:	89 d0                	mov    %edx,%eax
c0102159:	01 c0                	add    %eax,%eax
c010215b:	01 d0                	add    %edx,%eax
c010215d:	c1 e0 02             	shl    $0x2,%eax
c0102160:	05 24 f0 12 c0       	add    $0xc012f024,%eax
c0102165:	8b 08                	mov    (%eax),%ecx
c0102167:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010216a:	89 d0                	mov    %edx,%eax
c010216c:	01 c0                	add    %eax,%eax
c010216e:	01 d0                	add    %edx,%eax
c0102170:	c1 e0 02             	shl    $0x2,%eax
c0102173:	05 20 f0 12 c0       	add    $0xc012f020,%eax
c0102178:	8b 00                	mov    (%eax),%eax
c010217a:	83 ec 04             	sub    $0x4,%esp
c010217d:	51                   	push   %ecx
c010217e:	50                   	push   %eax
c010217f:	68 f1 d2 10 c0       	push   $0xc010d2f1
c0102184:	e8 fa e0 ff ff       	call   c0100283 <cprintf>
c0102189:	83 c4 10             	add    $0x10,%esp

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c010218c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102190:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102193:	83 f8 02             	cmp    $0x2,%eax
c0102196:	76 bc                	jbe    c0102154 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0102198:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010219d:	c9                   	leave  
c010219e:	c3                   	ret    

c010219f <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c010219f:	55                   	push   %ebp
c01021a0:	89 e5                	mov    %esp,%ebp
c01021a2:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c01021a5:	e8 b2 fb ff ff       	call   c0101d5c <print_kerninfo>
    return 0;
c01021aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01021af:	c9                   	leave  
c01021b0:	c3                   	ret    

c01021b1 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c01021b1:	55                   	push   %ebp
c01021b2:	89 e5                	mov    %esp,%ebp
c01021b4:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c01021b7:	e8 ea fc ff ff       	call   c0101ea6 <print_stackframe>
    return 0;
c01021bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01021c1:	c9                   	leave  
c01021c2:	c3                   	ret    

c01021c3 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c01021c3:	55                   	push   %ebp
c01021c4:	89 e5                	mov    %esp,%ebp
c01021c6:	83 ec 14             	sub    $0x14,%esp
c01021c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01021cc:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c01021d0:	90                   	nop
c01021d1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01021d5:	83 c0 07             	add    $0x7,%eax
c01021d8:	0f b7 c0             	movzwl %ax,%eax
c01021db:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01021df:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01021e3:	89 c2                	mov    %eax,%edx
c01021e5:	ec                   	in     (%dx),%al
c01021e6:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01021e9:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01021ed:	0f b6 c0             	movzbl %al,%eax
c01021f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01021f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01021f6:	25 80 00 00 00       	and    $0x80,%eax
c01021fb:	85 c0                	test   %eax,%eax
c01021fd:	75 d2                	jne    c01021d1 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c01021ff:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0102203:	74 11                	je     c0102216 <ide_wait_ready+0x53>
c0102205:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102208:	83 e0 21             	and    $0x21,%eax
c010220b:	85 c0                	test   %eax,%eax
c010220d:	74 07                	je     c0102216 <ide_wait_ready+0x53>
        return -1;
c010220f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0102214:	eb 05                	jmp    c010221b <ide_wait_ready+0x58>
    }
    return 0;
c0102216:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010221b:	c9                   	leave  
c010221c:	c3                   	ret    

c010221d <ide_init>:

void
ide_init(void) {
c010221d:	55                   	push   %ebp
c010221e:	89 e5                	mov    %esp,%ebp
c0102220:	57                   	push   %edi
c0102221:	53                   	push   %ebx
c0102222:	81 ec 40 02 00 00    	sub    $0x240,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0102228:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c010222e:	e9 c1 02 00 00       	jmp    c01024f4 <ide_init+0x2d7>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0102233:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102237:	c1 e0 03             	shl    $0x3,%eax
c010223a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102241:	29 c2                	sub    %eax,%edx
c0102243:	89 d0                	mov    %edx,%eax
c0102245:	05 20 11 1b c0       	add    $0xc01b1120,%eax
c010224a:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c010224d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102251:	66 d1 e8             	shr    %ax
c0102254:	0f b7 c0             	movzwl %ax,%eax
c0102257:	0f b7 04 85 fc d2 10 	movzwl -0x3fef2d04(,%eax,4),%eax
c010225e:	c0 
c010225f:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0102263:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0102267:	6a 00                	push   $0x0
c0102269:	50                   	push   %eax
c010226a:	e8 54 ff ff ff       	call   c01021c3 <ide_wait_ready>
c010226f:	83 c4 08             	add    $0x8,%esp

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0102272:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102276:	83 e0 01             	and    $0x1,%eax
c0102279:	c1 e0 04             	shl    $0x4,%eax
c010227c:	83 c8 e0             	or     $0xffffffe0,%eax
c010227f:	0f b6 c0             	movzbl %al,%eax
c0102282:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102286:	83 c2 06             	add    $0x6,%edx
c0102289:	0f b7 d2             	movzwl %dx,%edx
c010228c:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0102290:	88 45 c7             	mov    %al,-0x39(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102293:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
c0102297:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010229b:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c010229c:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01022a0:	6a 00                	push   $0x0
c01022a2:	50                   	push   %eax
c01022a3:	e8 1b ff ff ff       	call   c01021c3 <ide_wait_ready>
c01022a8:	83 c4 08             	add    $0x8,%esp

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c01022ab:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01022af:	83 c0 07             	add    $0x7,%eax
c01022b2:	0f b7 c0             	movzwl %ax,%eax
c01022b5:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
c01022b9:	c6 45 c8 ec          	movb   $0xec,-0x38(%ebp)
c01022bd:	0f b6 45 c8          	movzbl -0x38(%ebp),%eax
c01022c1:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c01022c5:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01022c6:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01022ca:	6a 00                	push   $0x0
c01022cc:	50                   	push   %eax
c01022cd:	e8 f1 fe ff ff       	call   c01021c3 <ide_wait_ready>
c01022d2:	83 c4 08             	add    $0x8,%esp

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01022d5:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01022d9:	83 c0 07             	add    $0x7,%eax
c01022dc:	0f b7 c0             	movzwl %ax,%eax
c01022df:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01022e3:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c01022e7:	89 c2                	mov    %eax,%edx
c01022e9:	ec                   	in     (%dx),%al
c01022ea:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c01022ed:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01022f1:	84 c0                	test   %al,%al
c01022f3:	0f 84 ef 01 00 00    	je     c01024e8 <ide_init+0x2cb>
c01022f9:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01022fd:	6a 01                	push   $0x1
c01022ff:	50                   	push   %eax
c0102300:	e8 be fe ff ff       	call   c01021c3 <ide_wait_ready>
c0102305:	83 c4 08             	add    $0x8,%esp
c0102308:	85 c0                	test   %eax,%eax
c010230a:	0f 85 d8 01 00 00    	jne    c01024e8 <ide_init+0x2cb>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0102310:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102314:	c1 e0 03             	shl    $0x3,%eax
c0102317:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010231e:	29 c2                	sub    %eax,%edx
c0102320:	89 d0                	mov    %edx,%eax
c0102322:	05 20 11 1b c0       	add    $0xc01b1120,%eax
c0102327:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c010232a:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c010232e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0102331:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0102337:	89 45 c0             	mov    %eax,-0x40(%ebp)
c010233a:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0102341:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0102344:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0102347:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010234a:	89 cb                	mov    %ecx,%ebx
c010234c:	89 df                	mov    %ebx,%edi
c010234e:	89 c1                	mov    %eax,%ecx
c0102350:	fc                   	cld    
c0102351:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0102353:	89 c8                	mov    %ecx,%eax
c0102355:	89 fb                	mov    %edi,%ebx
c0102357:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c010235a:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c010235d:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0102363:	89 45 dc             	mov    %eax,-0x24(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0102366:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0102369:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c010236f:	89 45 d8             	mov    %eax,-0x28(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0102372:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0102375:	25 00 00 00 04       	and    $0x4000000,%eax
c010237a:	85 c0                	test   %eax,%eax
c010237c:	74 0e                	je     c010238c <ide_init+0x16f>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c010237e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0102381:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0102387:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010238a:	eb 09                	jmp    c0102395 <ide_init+0x178>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c010238c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010238f:	8b 40 78             	mov    0x78(%eax),%eax
c0102392:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0102395:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0102399:	c1 e0 03             	shl    $0x3,%eax
c010239c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01023a3:	29 c2                	sub    %eax,%edx
c01023a5:	89 d0                	mov    %edx,%eax
c01023a7:	8d 90 24 11 1b c0    	lea    -0x3fe4eedc(%eax),%edx
c01023ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01023b0:	89 02                	mov    %eax,(%edx)
        ide_devices[ideno].size = sectors;
c01023b2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01023b6:	c1 e0 03             	shl    $0x3,%eax
c01023b9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01023c0:	29 c2                	sub    %eax,%edx
c01023c2:	89 d0                	mov    %edx,%eax
c01023c4:	8d 90 28 11 1b c0    	lea    -0x3fe4eed8(%eax),%edx
c01023ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01023cd:	89 02                	mov    %eax,(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c01023cf:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01023d2:	83 c0 62             	add    $0x62,%eax
c01023d5:	0f b7 00             	movzwl (%eax),%eax
c01023d8:	0f b7 c0             	movzwl %ax,%eax
c01023db:	25 00 02 00 00       	and    $0x200,%eax
c01023e0:	85 c0                	test   %eax,%eax
c01023e2:	75 16                	jne    c01023fa <ide_init+0x1dd>
c01023e4:	68 04 d3 10 c0       	push   $0xc010d304
c01023e9:	68 47 d3 10 c0       	push   $0xc010d347
c01023ee:	6a 7d                	push   $0x7d
c01023f0:	68 5c d3 10 c0       	push   $0xc010d35c
c01023f5:	e8 67 f3 ff ff       	call   c0101761 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c01023fa:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01023fe:	89 c2                	mov    %eax,%edx
c0102400:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c0102407:	89 c2                	mov    %eax,%edx
c0102409:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c0102410:	29 d0                	sub    %edx,%eax
c0102412:	05 20 11 1b c0       	add    $0xc01b1120,%eax
c0102417:	83 c0 0c             	add    $0xc,%eax
c010241a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010241d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0102420:	83 c0 36             	add    $0x36,%eax
c0102423:	89 45 d0             	mov    %eax,-0x30(%ebp)
        unsigned int i, length = 40;
c0102426:	c7 45 cc 28 00 00 00 	movl   $0x28,-0x34(%ebp)
        for (i = 0; i < length; i += 2) {
c010242d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0102434:	eb 34                	jmp    c010246a <ide_init+0x24d>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0102436:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0102439:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010243c:	01 c2                	add    %eax,%edx
c010243e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102441:	8d 48 01             	lea    0x1(%eax),%ecx
c0102444:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0102447:	01 c8                	add    %ecx,%eax
c0102449:	0f b6 00             	movzbl (%eax),%eax
c010244c:	88 02                	mov    %al,(%edx)
c010244e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102451:	8d 50 01             	lea    0x1(%eax),%edx
c0102454:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0102457:	01 c2                	add    %eax,%edx
c0102459:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010245c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010245f:	01 c8                	add    %ecx,%eax
c0102461:	0f b6 00             	movzbl (%eax),%eax
c0102464:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0102466:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c010246a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010246d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0102470:	72 c4                	jb     c0102436 <ide_init+0x219>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0102472:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0102475:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102478:	01 d0                	add    %edx,%eax
c010247a:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c010247d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102480:	8d 50 ff             	lea    -0x1(%eax),%edx
c0102483:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0102486:	85 c0                	test   %eax,%eax
c0102488:	74 0f                	je     c0102499 <ide_init+0x27c>
c010248a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010248d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0102490:	01 d0                	add    %edx,%eax
c0102492:	0f b6 00             	movzbl (%eax),%eax
c0102495:	3c 20                	cmp    $0x20,%al
c0102497:	74 d9                	je     c0102472 <ide_init+0x255>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0102499:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010249d:	89 c2                	mov    %eax,%edx
c010249f:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01024a6:	89 c2                	mov    %eax,%edx
c01024a8:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01024af:	29 d0                	sub    %edx,%eax
c01024b1:	05 20 11 1b c0       	add    $0xc01b1120,%eax
c01024b6:	8d 48 0c             	lea    0xc(%eax),%ecx
c01024b9:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01024bd:	c1 e0 03             	shl    $0x3,%eax
c01024c0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01024c7:	29 c2                	sub    %eax,%edx
c01024c9:	89 d0                	mov    %edx,%eax
c01024cb:	05 28 11 1b c0       	add    $0xc01b1128,%eax
c01024d0:	8b 10                	mov    (%eax),%edx
c01024d2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01024d6:	51                   	push   %ecx
c01024d7:	52                   	push   %edx
c01024d8:	50                   	push   %eax
c01024d9:	68 6e d3 10 c0       	push   $0xc010d36e
c01024de:	e8 a0 dd ff ff       	call   c0100283 <cprintf>
c01024e3:	83 c4 10             	add    $0x10,%esp
c01024e6:	eb 01                	jmp    c01024e9 <ide_init+0x2cc>
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
        ide_wait_ready(iobase, 0);

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
            continue ;
c01024e8:	90                   	nop

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c01024e9:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01024ed:	83 c0 01             	add    $0x1,%eax
c01024f0:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c01024f4:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c01024f9:	0f 86 34 fd ff ff    	jbe    c0102233 <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c01024ff:	83 ec 0c             	sub    $0xc,%esp
c0102502:	6a 0e                	push   $0xe
c0102504:	e8 8a 0e 00 00       	call   c0103393 <pic_enable>
c0102509:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_IDE2);
c010250c:	83 ec 0c             	sub    $0xc,%esp
c010250f:	6a 0f                	push   $0xf
c0102511:	e8 7d 0e 00 00       	call   c0103393 <pic_enable>
c0102516:	83 c4 10             	add    $0x10,%esp
}
c0102519:	90                   	nop
c010251a:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010251d:	5b                   	pop    %ebx
c010251e:	5f                   	pop    %edi
c010251f:	5d                   	pop    %ebp
c0102520:	c3                   	ret    

c0102521 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0102521:	55                   	push   %ebp
c0102522:	89 e5                	mov    %esp,%ebp
c0102524:	83 ec 04             	sub    $0x4,%esp
c0102527:	8b 45 08             	mov    0x8(%ebp),%eax
c010252a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c010252e:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0102533:	77 25                	ja     c010255a <ide_device_valid+0x39>
c0102535:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0102539:	c1 e0 03             	shl    $0x3,%eax
c010253c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0102543:	29 c2                	sub    %eax,%edx
c0102545:	89 d0                	mov    %edx,%eax
c0102547:	05 20 11 1b c0       	add    $0xc01b1120,%eax
c010254c:	0f b6 00             	movzbl (%eax),%eax
c010254f:	84 c0                	test   %al,%al
c0102551:	74 07                	je     c010255a <ide_device_valid+0x39>
c0102553:	b8 01 00 00 00       	mov    $0x1,%eax
c0102558:	eb 05                	jmp    c010255f <ide_device_valid+0x3e>
c010255a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010255f:	c9                   	leave  
c0102560:	c3                   	ret    

c0102561 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0102561:	55                   	push   %ebp
c0102562:	89 e5                	mov    %esp,%ebp
c0102564:	83 ec 04             	sub    $0x4,%esp
c0102567:	8b 45 08             	mov    0x8(%ebp),%eax
c010256a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c010256e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0102572:	50                   	push   %eax
c0102573:	e8 a9 ff ff ff       	call   c0102521 <ide_device_valid>
c0102578:	83 c4 04             	add    $0x4,%esp
c010257b:	85 c0                	test   %eax,%eax
c010257d:	74 1b                	je     c010259a <ide_device_size+0x39>
        return ide_devices[ideno].size;
c010257f:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0102583:	c1 e0 03             	shl    $0x3,%eax
c0102586:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010258d:	29 c2                	sub    %eax,%edx
c010258f:	89 d0                	mov    %edx,%eax
c0102591:	05 28 11 1b c0       	add    $0xc01b1128,%eax
c0102596:	8b 00                	mov    (%eax),%eax
c0102598:	eb 05                	jmp    c010259f <ide_device_size+0x3e>
    }
    return 0;
c010259a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010259f:	c9                   	leave  
c01025a0:	c3                   	ret    

c01025a1 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c01025a1:	55                   	push   %ebp
c01025a2:	89 e5                	mov    %esp,%ebp
c01025a4:	57                   	push   %edi
c01025a5:	53                   	push   %ebx
c01025a6:	83 ec 40             	sub    $0x40,%esp
c01025a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ac:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c01025b0:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c01025b7:	77 25                	ja     c01025de <ide_read_secs+0x3d>
c01025b9:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c01025be:	77 1e                	ja     c01025de <ide_read_secs+0x3d>
c01025c0:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01025c4:	c1 e0 03             	shl    $0x3,%eax
c01025c7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01025ce:	29 c2                	sub    %eax,%edx
c01025d0:	89 d0                	mov    %edx,%eax
c01025d2:	05 20 11 1b c0       	add    $0xc01b1120,%eax
c01025d7:	0f b6 00             	movzbl (%eax),%eax
c01025da:	84 c0                	test   %al,%al
c01025dc:	75 19                	jne    c01025f7 <ide_read_secs+0x56>
c01025de:	68 8c d3 10 c0       	push   $0xc010d38c
c01025e3:	68 47 d3 10 c0       	push   $0xc010d347
c01025e8:	68 9f 00 00 00       	push   $0x9f
c01025ed:	68 5c d3 10 c0       	push   $0xc010d35c
c01025f2:	e8 6a f1 ff ff       	call   c0101761 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01025f7:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01025fe:	77 0f                	ja     c010260f <ide_read_secs+0x6e>
c0102600:	8b 55 0c             	mov    0xc(%ebp),%edx
c0102603:	8b 45 14             	mov    0x14(%ebp),%eax
c0102606:	01 d0                	add    %edx,%eax
c0102608:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c010260d:	76 19                	jbe    c0102628 <ide_read_secs+0x87>
c010260f:	68 b4 d3 10 c0       	push   $0xc010d3b4
c0102614:	68 47 d3 10 c0       	push   $0xc010d347
c0102619:	68 a0 00 00 00       	push   $0xa0
c010261e:	68 5c d3 10 c0       	push   $0xc010d35c
c0102623:	e8 39 f1 ff ff       	call   c0101761 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0102628:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010262c:	66 d1 e8             	shr    %ax
c010262f:	0f b7 c0             	movzwl %ax,%eax
c0102632:	0f b7 04 85 fc d2 10 	movzwl -0x3fef2d04(,%eax,4),%eax
c0102639:	c0 
c010263a:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010263e:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0102642:	66 d1 e8             	shr    %ax
c0102645:	0f b7 c0             	movzwl %ax,%eax
c0102648:	0f b7 04 85 fe d2 10 	movzwl -0x3fef2d02(,%eax,4),%eax
c010264f:	c0 
c0102650:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0102654:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102658:	83 ec 08             	sub    $0x8,%esp
c010265b:	6a 00                	push   $0x0
c010265d:	50                   	push   %eax
c010265e:	e8 60 fb ff ff       	call   c01021c3 <ide_wait_ready>
c0102663:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0102666:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010266a:	83 c0 02             	add    $0x2,%eax
c010266d:	0f b7 c0             	movzwl %ax,%eax
c0102670:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0102674:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102678:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c010267c:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102680:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0102681:	8b 45 14             	mov    0x14(%ebp),%eax
c0102684:	0f b6 c0             	movzbl %al,%eax
c0102687:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010268b:	83 c2 02             	add    $0x2,%edx
c010268e:	0f b7 d2             	movzwl %dx,%edx
c0102691:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c0102695:	88 45 d8             	mov    %al,-0x28(%ebp)
c0102698:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c010269c:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01026a0:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c01026a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01026a4:	0f b6 c0             	movzbl %al,%eax
c01026a7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01026ab:	83 c2 03             	add    $0x3,%edx
c01026ae:	0f b7 d2             	movzwl %dx,%edx
c01026b1:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01026b5:	88 45 d9             	mov    %al,-0x27(%ebp)
c01026b8:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01026bc:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01026c0:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c01026c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01026c4:	c1 e8 08             	shr    $0x8,%eax
c01026c7:	0f b6 c0             	movzbl %al,%eax
c01026ca:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01026ce:	83 c2 04             	add    $0x4,%edx
c01026d1:	0f b7 d2             	movzwl %dx,%edx
c01026d4:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c01026d8:	88 45 da             	mov    %al,-0x26(%ebp)
c01026db:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01026df:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c01026e3:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01026e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01026e7:	c1 e8 10             	shr    $0x10,%eax
c01026ea:	0f b6 c0             	movzbl %al,%eax
c01026ed:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01026f1:	83 c2 05             	add    $0x5,%edx
c01026f4:	0f b7 d2             	movzwl %dx,%edx
c01026f7:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01026fb:	88 45 db             	mov    %al,-0x25(%ebp)
c01026fe:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c0102702:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102706:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0102707:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010270b:	83 e0 01             	and    $0x1,%eax
c010270e:	c1 e0 04             	shl    $0x4,%eax
c0102711:	89 c2                	mov    %eax,%edx
c0102713:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102716:	c1 e8 18             	shr    $0x18,%eax
c0102719:	83 e0 0f             	and    $0xf,%eax
c010271c:	09 d0                	or     %edx,%eax
c010271e:	83 c8 e0             	or     $0xffffffe0,%eax
c0102721:	0f b6 c0             	movzbl %al,%eax
c0102724:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102728:	83 c2 06             	add    $0x6,%edx
c010272b:	0f b7 d2             	movzwl %dx,%edx
c010272e:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c0102732:	88 45 dc             	mov    %al,-0x24(%ebp)
c0102735:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c0102739:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c010273d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c010273e:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102742:	83 c0 07             	add    $0x7,%eax
c0102745:	0f b7 c0             	movzwl %ax,%eax
c0102748:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c010274c:	c6 45 dd 20          	movb   $0x20,-0x23(%ebp)
c0102750:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102754:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102758:	ee                   	out    %al,(%dx)

    int ret = 0;
c0102759:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0102760:	eb 56                	jmp    c01027b8 <ide_read_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0102762:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102766:	83 ec 08             	sub    $0x8,%esp
c0102769:	6a 01                	push   $0x1
c010276b:	50                   	push   %eax
c010276c:	e8 52 fa ff ff       	call   c01021c3 <ide_wait_ready>
c0102771:	83 c4 10             	add    $0x10,%esp
c0102774:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102777:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010277b:	75 43                	jne    c01027c0 <ide_read_secs+0x21f>
            goto out;
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c010277d:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102781:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0102784:	8b 45 10             	mov    0x10(%ebp),%eax
c0102787:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010278a:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0102791:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0102794:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0102797:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010279a:	89 cb                	mov    %ecx,%ebx
c010279c:	89 df                	mov    %ebx,%edi
c010279e:	89 c1                	mov    %eax,%ecx
c01027a0:	fc                   	cld    
c01027a1:	f2 6d                	repnz insl (%dx),%es:(%edi)
c01027a3:	89 c8                	mov    %ecx,%eax
c01027a5:	89 fb                	mov    %edi,%ebx
c01027a7:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c01027aa:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c01027ad:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c01027b1:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c01027b8:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01027bc:	75 a4                	jne    c0102762 <ide_read_secs+0x1c1>
c01027be:	eb 01                	jmp    c01027c1 <ide_read_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c01027c0:	90                   	nop
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c01027c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01027c4:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01027c7:	5b                   	pop    %ebx
c01027c8:	5f                   	pop    %edi
c01027c9:	5d                   	pop    %ebp
c01027ca:	c3                   	ret    

c01027cb <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c01027cb:	55                   	push   %ebp
c01027cc:	89 e5                	mov    %esp,%ebp
c01027ce:	56                   	push   %esi
c01027cf:	53                   	push   %ebx
c01027d0:	83 ec 40             	sub    $0x40,%esp
c01027d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01027d6:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c01027da:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c01027e1:	77 25                	ja     c0102808 <ide_write_secs+0x3d>
c01027e3:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c01027e8:	77 1e                	ja     c0102808 <ide_write_secs+0x3d>
c01027ea:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01027ee:	c1 e0 03             	shl    $0x3,%eax
c01027f1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01027f8:	29 c2                	sub    %eax,%edx
c01027fa:	89 d0                	mov    %edx,%eax
c01027fc:	05 20 11 1b c0       	add    $0xc01b1120,%eax
c0102801:	0f b6 00             	movzbl (%eax),%eax
c0102804:	84 c0                	test   %al,%al
c0102806:	75 19                	jne    c0102821 <ide_write_secs+0x56>
c0102808:	68 8c d3 10 c0       	push   $0xc010d38c
c010280d:	68 47 d3 10 c0       	push   $0xc010d347
c0102812:	68 bc 00 00 00       	push   $0xbc
c0102817:	68 5c d3 10 c0       	push   $0xc010d35c
c010281c:	e8 40 ef ff ff       	call   c0101761 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0102821:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0102828:	77 0f                	ja     c0102839 <ide_write_secs+0x6e>
c010282a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010282d:	8b 45 14             	mov    0x14(%ebp),%eax
c0102830:	01 d0                	add    %edx,%eax
c0102832:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0102837:	76 19                	jbe    c0102852 <ide_write_secs+0x87>
c0102839:	68 b4 d3 10 c0       	push   $0xc010d3b4
c010283e:	68 47 d3 10 c0       	push   $0xc010d347
c0102843:	68 bd 00 00 00       	push   $0xbd
c0102848:	68 5c d3 10 c0       	push   $0xc010d35c
c010284d:	e8 0f ef ff ff       	call   c0101761 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0102852:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0102856:	66 d1 e8             	shr    %ax
c0102859:	0f b7 c0             	movzwl %ax,%eax
c010285c:	0f b7 04 85 fc d2 10 	movzwl -0x3fef2d04(,%eax,4),%eax
c0102863:	c0 
c0102864:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0102868:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010286c:	66 d1 e8             	shr    %ax
c010286f:	0f b7 c0             	movzwl %ax,%eax
c0102872:	0f b7 04 85 fe d2 10 	movzwl -0x3fef2d02(,%eax,4),%eax
c0102879:	c0 
c010287a:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c010287e:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102882:	83 ec 08             	sub    $0x8,%esp
c0102885:	6a 00                	push   $0x0
c0102887:	50                   	push   %eax
c0102888:	e8 36 f9 ff ff       	call   c01021c3 <ide_wait_ready>
c010288d:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0102890:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0102894:	83 c0 02             	add    $0x2,%eax
c0102897:	0f b7 c0             	movzwl %ax,%eax
c010289a:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010289e:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01028a2:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c01028a6:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01028aa:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c01028ab:	8b 45 14             	mov    0x14(%ebp),%eax
c01028ae:	0f b6 c0             	movzbl %al,%eax
c01028b1:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01028b5:	83 c2 02             	add    $0x2,%edx
c01028b8:	0f b7 d2             	movzwl %dx,%edx
c01028bb:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c01028bf:	88 45 d8             	mov    %al,-0x28(%ebp)
c01028c2:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c01028c6:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01028ca:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c01028cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01028ce:	0f b6 c0             	movzbl %al,%eax
c01028d1:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01028d5:	83 c2 03             	add    $0x3,%edx
c01028d8:	0f b7 d2             	movzwl %dx,%edx
c01028db:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01028df:	88 45 d9             	mov    %al,-0x27(%ebp)
c01028e2:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01028e6:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01028ea:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c01028eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01028ee:	c1 e8 08             	shr    $0x8,%eax
c01028f1:	0f b6 c0             	movzbl %al,%eax
c01028f4:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01028f8:	83 c2 04             	add    $0x4,%edx
c01028fb:	0f b7 d2             	movzwl %dx,%edx
c01028fe:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c0102902:	88 45 da             	mov    %al,-0x26(%ebp)
c0102905:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0102909:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c010290d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c010290e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102911:	c1 e8 10             	shr    $0x10,%eax
c0102914:	0f b6 c0             	movzbl %al,%eax
c0102917:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010291b:	83 c2 05             	add    $0x5,%edx
c010291e:	0f b7 d2             	movzwl %dx,%edx
c0102921:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0102925:	88 45 db             	mov    %al,-0x25(%ebp)
c0102928:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c010292c:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102930:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0102931:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0102935:	83 e0 01             	and    $0x1,%eax
c0102938:	c1 e0 04             	shl    $0x4,%eax
c010293b:	89 c2                	mov    %eax,%edx
c010293d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0102940:	c1 e8 18             	shr    $0x18,%eax
c0102943:	83 e0 0f             	and    $0xf,%eax
c0102946:	09 d0                	or     %edx,%eax
c0102948:	83 c8 e0             	or     $0xffffffe0,%eax
c010294b:	0f b6 c0             	movzbl %al,%eax
c010294e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102952:	83 c2 06             	add    $0x6,%edx
c0102955:	0f b7 d2             	movzwl %dx,%edx
c0102958:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c010295c:	88 45 dc             	mov    %al,-0x24(%ebp)
c010295f:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c0102963:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c0102967:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0102968:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010296c:	83 c0 07             	add    $0x7,%eax
c010296f:	0f b7 c0             	movzwl %ax,%eax
c0102972:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c0102976:	c6 45 dd 30          	movb   $0x30,-0x23(%ebp)
c010297a:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010297e:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102982:	ee                   	out    %al,(%dx)

    int ret = 0;
c0102983:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010298a:	eb 56                	jmp    c01029e2 <ide_write_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c010298c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102990:	83 ec 08             	sub    $0x8,%esp
c0102993:	6a 01                	push   $0x1
c0102995:	50                   	push   %eax
c0102996:	e8 28 f8 ff ff       	call   c01021c3 <ide_wait_ready>
c010299b:	83 c4 10             	add    $0x10,%esp
c010299e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01029a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01029a5:	75 43                	jne    c01029ea <ide_write_secs+0x21f>
            goto out;
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c01029a7:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01029ab:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01029ae:	8b 45 10             	mov    0x10(%ebp),%eax
c01029b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01029b4:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c01029bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01029be:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c01029c1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01029c4:	89 cb                	mov    %ecx,%ebx
c01029c6:	89 de                	mov    %ebx,%esi
c01029c8:	89 c1                	mov    %eax,%ecx
c01029ca:	fc                   	cld    
c01029cb:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c01029cd:	89 c8                	mov    %ecx,%eax
c01029cf:	89 f3                	mov    %esi,%ebx
c01029d1:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c01029d4:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01029d7:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c01029db:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c01029e2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01029e6:	75 a4                	jne    c010298c <ide_write_secs+0x1c1>
c01029e8:	eb 01                	jmp    c01029eb <ide_write_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c01029ea:	90                   	nop
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c01029eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01029ee:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01029f1:	5b                   	pop    %ebx
c01029f2:	5e                   	pop    %esi
c01029f3:	5d                   	pop    %ebp
c01029f4:	c3                   	ret    

c01029f5 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c01029f5:	55                   	push   %ebp
c01029f6:	89 e5                	mov    %esp,%ebp
c01029f8:	83 ec 18             	sub    $0x18,%esp
c01029fb:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0102a01:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102a05:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c0102a09:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102a0d:	ee                   	out    %al,(%dx)
c0102a0e:	66 c7 45 f4 40 00    	movw   $0x40,-0xc(%ebp)
c0102a14:	c6 45 f0 9c          	movb   $0x9c,-0x10(%ebp)
c0102a18:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0102a1c:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0102a20:	ee                   	out    %al,(%dx)
c0102a21:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0102a27:	c6 45 f1 2e          	movb   $0x2e,-0xf(%ebp)
c0102a2b:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102a2f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102a33:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0102a34:	c7 05 58 3d 1b c0 00 	movl   $0x0,0xc01b3d58
c0102a3b:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0102a3e:	83 ec 0c             	sub    $0xc,%esp
c0102a41:	68 ee d3 10 c0       	push   $0xc010d3ee
c0102a46:	e8 38 d8 ff ff       	call   c0100283 <cprintf>
c0102a4b:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_TIMER);
c0102a4e:	83 ec 0c             	sub    $0xc,%esp
c0102a51:	6a 00                	push   $0x0
c0102a53:	e8 3b 09 00 00       	call   c0103393 <pic_enable>
c0102a58:	83 c4 10             	add    $0x10,%esp
}
c0102a5b:	90                   	nop
c0102a5c:	c9                   	leave  
c0102a5d:	c3                   	ret    

c0102a5e <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0102a5e:	55                   	push   %ebp
c0102a5f:	89 e5                	mov    %esp,%ebp
c0102a61:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0102a64:	9c                   	pushf  
c0102a65:	58                   	pop    %eax
c0102a66:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0102a69:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0102a6c:	25 00 02 00 00       	and    $0x200,%eax
c0102a71:	85 c0                	test   %eax,%eax
c0102a73:	74 0c                	je     c0102a81 <__intr_save+0x23>
        intr_disable();
c0102a75:	e8 8a 0a 00 00       	call   c0103504 <intr_disable>
        return 1;
c0102a7a:	b8 01 00 00 00       	mov    $0x1,%eax
c0102a7f:	eb 05                	jmp    c0102a86 <__intr_save+0x28>
    }
    return 0;
c0102a81:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0102a86:	c9                   	leave  
c0102a87:	c3                   	ret    

c0102a88 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0102a88:	55                   	push   %ebp
c0102a89:	89 e5                	mov    %esp,%ebp
c0102a8b:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0102a8e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0102a92:	74 05                	je     c0102a99 <__intr_restore+0x11>
        intr_enable();
c0102a94:	e8 64 0a 00 00       	call   c01034fd <intr_enable>
    }
}
c0102a99:	90                   	nop
c0102a9a:	c9                   	leave  
c0102a9b:	c3                   	ret    

c0102a9c <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0102a9c:	55                   	push   %ebp
c0102a9d:	89 e5                	mov    %esp,%ebp
c0102a9f:	83 ec 10             	sub    $0x10,%esp
c0102aa2:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102aa8:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0102aac:	89 c2                	mov    %eax,%edx
c0102aae:	ec                   	in     (%dx),%al
c0102aaf:	88 45 f4             	mov    %al,-0xc(%ebp)
c0102ab2:	66 c7 45 fc 84 00    	movw   $0x84,-0x4(%ebp)
c0102ab8:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0102abc:	89 c2                	mov    %eax,%edx
c0102abe:	ec                   	in     (%dx),%al
c0102abf:	88 45 f5             	mov    %al,-0xb(%ebp)
c0102ac2:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0102ac8:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0102acc:	89 c2                	mov    %eax,%edx
c0102ace:	ec                   	in     (%dx),%al
c0102acf:	88 45 f6             	mov    %al,-0xa(%ebp)
c0102ad2:	66 c7 45 f8 84 00    	movw   $0x84,-0x8(%ebp)
c0102ad8:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0102adc:	89 c2                	mov    %eax,%edx
c0102ade:	ec                   	in     (%dx),%al
c0102adf:	88 45 f7             	mov    %al,-0x9(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0102ae2:	90                   	nop
c0102ae3:	c9                   	leave  
c0102ae4:	c3                   	ret    

c0102ae5 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0102ae5:	55                   	push   %ebp
c0102ae6:	89 e5                	mov    %esp,%ebp
c0102ae8:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0102aeb:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0102af2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102af5:	0f b7 00             	movzwl (%eax),%eax
c0102af8:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c0102afc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102aff:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0102b04:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102b07:	0f b7 00             	movzwl (%eax),%eax
c0102b0a:	66 3d 5a a5          	cmp    $0xa55a,%ax
c0102b0e:	74 12                	je     c0102b22 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0102b10:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c0102b17:	66 c7 05 06 12 1b c0 	movw   $0x3b4,0xc01b1206
c0102b1e:	b4 03 
c0102b20:	eb 13                	jmp    c0102b35 <cga_init+0x50>
    } else {
        *cp = was;
c0102b22:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102b25:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102b29:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0102b2c:	66 c7 05 06 12 1b c0 	movw   $0x3d4,0xc01b1206
c0102b33:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c0102b35:	0f b7 05 06 12 1b c0 	movzwl 0xc01b1206,%eax
c0102b3c:	0f b7 c0             	movzwl %ax,%eax
c0102b3f:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
c0102b43:	c6 45 ea 0e          	movb   $0xe,-0x16(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102b47:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0102b4b:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c0102b4f:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0102b50:	0f b7 05 06 12 1b c0 	movzwl 0xc01b1206,%eax
c0102b57:	83 c0 01             	add    $0x1,%eax
c0102b5a:	0f b7 c0             	movzwl %ax,%eax
c0102b5d:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102b61:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102b65:	89 c2                	mov    %eax,%edx
c0102b67:	ec                   	in     (%dx),%al
c0102b68:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0102b6b:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0102b6f:	0f b6 c0             	movzbl %al,%eax
c0102b72:	c1 e0 08             	shl    $0x8,%eax
c0102b75:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0102b78:	0f b7 05 06 12 1b c0 	movzwl 0xc01b1206,%eax
c0102b7f:	0f b7 c0             	movzwl %ax,%eax
c0102b82:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
c0102b86:	c6 45 ec 0f          	movb   $0xf,-0x14(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102b8a:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0102b8e:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0102b92:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0102b93:	0f b7 05 06 12 1b c0 	movzwl 0xc01b1206,%eax
c0102b9a:	83 c0 01             	add    $0x1,%eax
c0102b9d:	0f b7 c0             	movzwl %ax,%eax
c0102ba0:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102ba4:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c0102ba8:	89 c2                	mov    %eax,%edx
c0102baa:	ec                   	in     (%dx),%al
c0102bab:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0102bae:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102bb2:	0f b6 c0             	movzbl %al,%eax
c0102bb5:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0102bb8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102bbb:	a3 00 12 1b c0       	mov    %eax,0xc01b1200
    crt_pos = pos;
c0102bc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102bc3:	66 a3 04 12 1b c0    	mov    %ax,0xc01b1204
}
c0102bc9:	90                   	nop
c0102bca:	c9                   	leave  
c0102bcb:	c3                   	ret    

c0102bcc <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c0102bcc:	55                   	push   %ebp
c0102bcd:	89 e5                	mov    %esp,%ebp
c0102bcf:	83 ec 28             	sub    $0x28,%esp
c0102bd2:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0102bd8:	c6 45 da 00          	movb   $0x0,-0x26(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102bdc:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0102be0:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102be4:	ee                   	out    %al,(%dx)
c0102be5:	66 c7 45 f4 fb 03    	movw   $0x3fb,-0xc(%ebp)
c0102beb:	c6 45 db 80          	movb   $0x80,-0x25(%ebp)
c0102bef:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c0102bf3:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0102bf7:	ee                   	out    %al,(%dx)
c0102bf8:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
c0102bfe:	c6 45 dc 0c          	movb   $0xc,-0x24(%ebp)
c0102c02:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c0102c06:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102c0a:	ee                   	out    %al,(%dx)
c0102c0b:	66 c7 45 f0 f9 03    	movw   $0x3f9,-0x10(%ebp)
c0102c11:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
c0102c15:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102c19:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0102c1d:	ee                   	out    %al,(%dx)
c0102c1e:	66 c7 45 ee fb 03    	movw   $0x3fb,-0x12(%ebp)
c0102c24:	c6 45 de 03          	movb   $0x3,-0x22(%ebp)
c0102c28:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c0102c2c:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102c30:	ee                   	out    %al,(%dx)
c0102c31:	66 c7 45 ec fc 03    	movw   $0x3fc,-0x14(%ebp)
c0102c37:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
c0102c3b:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c0102c3f:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0102c43:	ee                   	out    %al,(%dx)
c0102c44:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c0102c4a:	c6 45 e0 01          	movb   $0x1,-0x20(%ebp)
c0102c4e:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c0102c52:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102c56:	ee                   	out    %al,(%dx)
c0102c57:	66 c7 45 e8 fd 03    	movw   $0x3fd,-0x18(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102c5d:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0102c61:	89 c2                	mov    %eax,%edx
c0102c63:	ec                   	in     (%dx),%al
c0102c64:	88 45 e1             	mov    %al,-0x1f(%ebp)
    return data;
c0102c67:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0102c6b:	3c ff                	cmp    $0xff,%al
c0102c6d:	0f 95 c0             	setne  %al
c0102c70:	0f b6 c0             	movzbl %al,%eax
c0102c73:	a3 08 12 1b c0       	mov    %eax,0xc01b1208
c0102c78:	66 c7 45 e6 fa 03    	movw   $0x3fa,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102c7e:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0102c82:	89 c2                	mov    %eax,%edx
c0102c84:	ec                   	in     (%dx),%al
c0102c85:	88 45 e2             	mov    %al,-0x1e(%ebp)
c0102c88:	66 c7 45 e4 f8 03    	movw   $0x3f8,-0x1c(%ebp)
c0102c8e:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0102c92:	89 c2                	mov    %eax,%edx
c0102c94:	ec                   	in     (%dx),%al
c0102c95:	88 45 e3             	mov    %al,-0x1d(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0102c98:	a1 08 12 1b c0       	mov    0xc01b1208,%eax
c0102c9d:	85 c0                	test   %eax,%eax
c0102c9f:	74 0d                	je     c0102cae <serial_init+0xe2>
        pic_enable(IRQ_COM1);
c0102ca1:	83 ec 0c             	sub    $0xc,%esp
c0102ca4:	6a 04                	push   $0x4
c0102ca6:	e8 e8 06 00 00       	call   c0103393 <pic_enable>
c0102cab:	83 c4 10             	add    $0x10,%esp
    }
}
c0102cae:	90                   	nop
c0102caf:	c9                   	leave  
c0102cb0:	c3                   	ret    

c0102cb1 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0102cb1:	55                   	push   %ebp
c0102cb2:	89 e5                	mov    %esp,%ebp
c0102cb4:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0102cb7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102cbe:	eb 09                	jmp    c0102cc9 <lpt_putc_sub+0x18>
        delay();
c0102cc0:	e8 d7 fd ff ff       	call   c0102a9c <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0102cc5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102cc9:	66 c7 45 f4 79 03    	movw   $0x379,-0xc(%ebp)
c0102ccf:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0102cd3:	89 c2                	mov    %eax,%edx
c0102cd5:	ec                   	in     (%dx),%al
c0102cd6:	88 45 f3             	mov    %al,-0xd(%ebp)
    return data;
c0102cd9:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0102cdd:	84 c0                	test   %al,%al
c0102cdf:	78 09                	js     c0102cea <lpt_putc_sub+0x39>
c0102ce1:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0102ce8:	7e d6                	jle    c0102cc0 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c0102cea:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ced:	0f b6 c0             	movzbl %al,%eax
c0102cf0:	66 c7 45 f8 78 03    	movw   $0x378,-0x8(%ebp)
c0102cf6:	88 45 f0             	mov    %al,-0x10(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102cf9:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0102cfd:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c0102d01:	ee                   	out    %al,(%dx)
c0102d02:	66 c7 45 f6 7a 03    	movw   $0x37a,-0xa(%ebp)
c0102d08:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c0102d0c:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102d10:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102d14:	ee                   	out    %al,(%dx)
c0102d15:	66 c7 45 fa 7a 03    	movw   $0x37a,-0x6(%ebp)
c0102d1b:	c6 45 f2 08          	movb   $0x8,-0xe(%ebp)
c0102d1f:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
c0102d23:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102d27:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c0102d28:	90                   	nop
c0102d29:	c9                   	leave  
c0102d2a:	c3                   	ret    

c0102d2b <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c0102d2b:	55                   	push   %ebp
c0102d2c:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c0102d2e:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0102d32:	74 0d                	je     c0102d41 <lpt_putc+0x16>
        lpt_putc_sub(c);
c0102d34:	ff 75 08             	pushl  0x8(%ebp)
c0102d37:	e8 75 ff ff ff       	call   c0102cb1 <lpt_putc_sub>
c0102d3c:	83 c4 04             	add    $0x4,%esp
    else {
        lpt_putc_sub('\b');
        lpt_putc_sub(' ');
        lpt_putc_sub('\b');
    }
}
c0102d3f:	eb 1e                	jmp    c0102d5f <lpt_putc+0x34>
lpt_putc(int c) {
    if (c != '\b') {
        lpt_putc_sub(c);
    }
    else {
        lpt_putc_sub('\b');
c0102d41:	6a 08                	push   $0x8
c0102d43:	e8 69 ff ff ff       	call   c0102cb1 <lpt_putc_sub>
c0102d48:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub(' ');
c0102d4b:	6a 20                	push   $0x20
c0102d4d:	e8 5f ff ff ff       	call   c0102cb1 <lpt_putc_sub>
c0102d52:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub('\b');
c0102d55:	6a 08                	push   $0x8
c0102d57:	e8 55 ff ff ff       	call   c0102cb1 <lpt_putc_sub>
c0102d5c:	83 c4 04             	add    $0x4,%esp
    }
}
c0102d5f:	90                   	nop
c0102d60:	c9                   	leave  
c0102d61:	c3                   	ret    

c0102d62 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0102d62:	55                   	push   %ebp
c0102d63:	89 e5                	mov    %esp,%ebp
c0102d65:	53                   	push   %ebx
c0102d66:	83 ec 14             	sub    $0x14,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0102d69:	8b 45 08             	mov    0x8(%ebp),%eax
c0102d6c:	b0 00                	mov    $0x0,%al
c0102d6e:	85 c0                	test   %eax,%eax
c0102d70:	75 07                	jne    c0102d79 <cga_putc+0x17>
        c |= 0x0700;
c0102d72:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0102d79:	8b 45 08             	mov    0x8(%ebp),%eax
c0102d7c:	0f b6 c0             	movzbl %al,%eax
c0102d7f:	83 f8 0a             	cmp    $0xa,%eax
c0102d82:	74 4e                	je     c0102dd2 <cga_putc+0x70>
c0102d84:	83 f8 0d             	cmp    $0xd,%eax
c0102d87:	74 59                	je     c0102de2 <cga_putc+0x80>
c0102d89:	83 f8 08             	cmp    $0x8,%eax
c0102d8c:	0f 85 8a 00 00 00    	jne    c0102e1c <cga_putc+0xba>
    case '\b':
        if (crt_pos > 0) {
c0102d92:	0f b7 05 04 12 1b c0 	movzwl 0xc01b1204,%eax
c0102d99:	66 85 c0             	test   %ax,%ax
c0102d9c:	0f 84 a0 00 00 00    	je     c0102e42 <cga_putc+0xe0>
            crt_pos --;
c0102da2:	0f b7 05 04 12 1b c0 	movzwl 0xc01b1204,%eax
c0102da9:	83 e8 01             	sub    $0x1,%eax
c0102dac:	66 a3 04 12 1b c0    	mov    %ax,0xc01b1204
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0102db2:	a1 00 12 1b c0       	mov    0xc01b1200,%eax
c0102db7:	0f b7 15 04 12 1b c0 	movzwl 0xc01b1204,%edx
c0102dbe:	0f b7 d2             	movzwl %dx,%edx
c0102dc1:	01 d2                	add    %edx,%edx
c0102dc3:	01 d0                	add    %edx,%eax
c0102dc5:	8b 55 08             	mov    0x8(%ebp),%edx
c0102dc8:	b2 00                	mov    $0x0,%dl
c0102dca:	83 ca 20             	or     $0x20,%edx
c0102dcd:	66 89 10             	mov    %dx,(%eax)
        }
        break;
c0102dd0:	eb 70                	jmp    c0102e42 <cga_putc+0xe0>
    case '\n':
        crt_pos += CRT_COLS;
c0102dd2:	0f b7 05 04 12 1b c0 	movzwl 0xc01b1204,%eax
c0102dd9:	83 c0 50             	add    $0x50,%eax
c0102ddc:	66 a3 04 12 1b c0    	mov    %ax,0xc01b1204
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0102de2:	0f b7 1d 04 12 1b c0 	movzwl 0xc01b1204,%ebx
c0102de9:	0f b7 0d 04 12 1b c0 	movzwl 0xc01b1204,%ecx
c0102df0:	0f b7 c1             	movzwl %cx,%eax
c0102df3:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0102df9:	c1 e8 10             	shr    $0x10,%eax
c0102dfc:	89 c2                	mov    %eax,%edx
c0102dfe:	66 c1 ea 06          	shr    $0x6,%dx
c0102e02:	89 d0                	mov    %edx,%eax
c0102e04:	c1 e0 02             	shl    $0x2,%eax
c0102e07:	01 d0                	add    %edx,%eax
c0102e09:	c1 e0 04             	shl    $0x4,%eax
c0102e0c:	29 c1                	sub    %eax,%ecx
c0102e0e:	89 ca                	mov    %ecx,%edx
c0102e10:	89 d8                	mov    %ebx,%eax
c0102e12:	29 d0                	sub    %edx,%eax
c0102e14:	66 a3 04 12 1b c0    	mov    %ax,0xc01b1204
        break;
c0102e1a:	eb 27                	jmp    c0102e43 <cga_putc+0xe1>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0102e1c:	8b 0d 00 12 1b c0    	mov    0xc01b1200,%ecx
c0102e22:	0f b7 05 04 12 1b c0 	movzwl 0xc01b1204,%eax
c0102e29:	8d 50 01             	lea    0x1(%eax),%edx
c0102e2c:	66 89 15 04 12 1b c0 	mov    %dx,0xc01b1204
c0102e33:	0f b7 c0             	movzwl %ax,%eax
c0102e36:	01 c0                	add    %eax,%eax
c0102e38:	01 c8                	add    %ecx,%eax
c0102e3a:	8b 55 08             	mov    0x8(%ebp),%edx
c0102e3d:	66 89 10             	mov    %dx,(%eax)
        break;
c0102e40:	eb 01                	jmp    c0102e43 <cga_putc+0xe1>
    case '\b':
        if (crt_pos > 0) {
            crt_pos --;
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
        }
        break;
c0102e42:	90                   	nop
        crt_buf[crt_pos ++] = c;     // write the character
        break;
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0102e43:	0f b7 05 04 12 1b c0 	movzwl 0xc01b1204,%eax
c0102e4a:	66 3d cf 07          	cmp    $0x7cf,%ax
c0102e4e:	76 59                	jbe    c0102ea9 <cga_putc+0x147>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0102e50:	a1 00 12 1b c0       	mov    0xc01b1200,%eax
c0102e55:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0102e5b:	a1 00 12 1b c0       	mov    0xc01b1200,%eax
c0102e60:	83 ec 04             	sub    $0x4,%esp
c0102e63:	68 00 0f 00 00       	push   $0xf00
c0102e68:	52                   	push   %edx
c0102e69:	50                   	push   %eax
c0102e6a:	e8 c1 96 00 00       	call   c010c530 <memmove>
c0102e6f:	83 c4 10             	add    $0x10,%esp
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0102e72:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0102e79:	eb 15                	jmp    c0102e90 <cga_putc+0x12e>
            crt_buf[i] = 0x0700 | ' ';
c0102e7b:	a1 00 12 1b c0       	mov    0xc01b1200,%eax
c0102e80:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102e83:	01 d2                	add    %edx,%edx
c0102e85:	01 d0                	add    %edx,%eax
c0102e87:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0102e8c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102e90:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0102e97:	7e e2                	jle    c0102e7b <cga_putc+0x119>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0102e99:	0f b7 05 04 12 1b c0 	movzwl 0xc01b1204,%eax
c0102ea0:	83 e8 50             	sub    $0x50,%eax
c0102ea3:	66 a3 04 12 1b c0    	mov    %ax,0xc01b1204
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0102ea9:	0f b7 05 06 12 1b c0 	movzwl 0xc01b1206,%eax
c0102eb0:	0f b7 c0             	movzwl %ax,%eax
c0102eb3:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0102eb7:	c6 45 e8 0e          	movb   $0xe,-0x18(%ebp)
c0102ebb:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0102ebf:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102ec3:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0102ec4:	0f b7 05 04 12 1b c0 	movzwl 0xc01b1204,%eax
c0102ecb:	66 c1 e8 08          	shr    $0x8,%ax
c0102ecf:	0f b6 c0             	movzbl %al,%eax
c0102ed2:	0f b7 15 06 12 1b c0 	movzwl 0xc01b1206,%edx
c0102ed9:	83 c2 01             	add    $0x1,%edx
c0102edc:	0f b7 d2             	movzwl %dx,%edx
c0102edf:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
c0102ee3:	88 45 e9             	mov    %al,-0x17(%ebp)
c0102ee6:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102eea:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0102eee:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0102eef:	0f b7 05 06 12 1b c0 	movzwl 0xc01b1206,%eax
c0102ef6:	0f b7 c0             	movzwl %ax,%eax
c0102ef9:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0102efd:	c6 45 ea 0f          	movb   $0xf,-0x16(%ebp)
c0102f01:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0102f05:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102f09:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0102f0a:	0f b7 05 04 12 1b c0 	movzwl 0xc01b1204,%eax
c0102f11:	0f b6 c0             	movzbl %al,%eax
c0102f14:	0f b7 15 06 12 1b c0 	movzwl 0xc01b1206,%edx
c0102f1b:	83 c2 01             	add    $0x1,%edx
c0102f1e:	0f b7 d2             	movzwl %dx,%edx
c0102f21:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
c0102f25:	88 45 eb             	mov    %al,-0x15(%ebp)
c0102f28:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0102f2c:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0102f30:	ee                   	out    %al,(%dx)
}
c0102f31:	90                   	nop
c0102f32:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102f35:	c9                   	leave  
c0102f36:	c3                   	ret    

c0102f37 <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0102f37:	55                   	push   %ebp
c0102f38:	89 e5                	mov    %esp,%ebp
c0102f3a:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0102f3d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102f44:	eb 09                	jmp    c0102f4f <serial_putc_sub+0x18>
        delay();
c0102f46:	e8 51 fb ff ff       	call   c0102a9c <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0102f4b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102f4f:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0102f55:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0102f59:	89 c2                	mov    %eax,%edx
c0102f5b:	ec                   	in     (%dx),%al
c0102f5c:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0102f5f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0102f63:	0f b6 c0             	movzbl %al,%eax
c0102f66:	83 e0 20             	and    $0x20,%eax
c0102f69:	85 c0                	test   %eax,%eax
c0102f6b:	75 09                	jne    c0102f76 <serial_putc_sub+0x3f>
c0102f6d:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0102f74:	7e d0                	jle    c0102f46 <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0102f76:	8b 45 08             	mov    0x8(%ebp),%eax
c0102f79:	0f b6 c0             	movzbl %al,%eax
c0102f7c:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
c0102f82:	88 45 f6             	mov    %al,-0xa(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102f85:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0102f89:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102f8d:	ee                   	out    %al,(%dx)
}
c0102f8e:	90                   	nop
c0102f8f:	c9                   	leave  
c0102f90:	c3                   	ret    

c0102f91 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0102f91:	55                   	push   %ebp
c0102f92:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c0102f94:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0102f98:	74 0d                	je     c0102fa7 <serial_putc+0x16>
        serial_putc_sub(c);
c0102f9a:	ff 75 08             	pushl  0x8(%ebp)
c0102f9d:	e8 95 ff ff ff       	call   c0102f37 <serial_putc_sub>
c0102fa2:	83 c4 04             	add    $0x4,%esp
    else {
        serial_putc_sub('\b');
        serial_putc_sub(' ');
        serial_putc_sub('\b');
    }
}
c0102fa5:	eb 1e                	jmp    c0102fc5 <serial_putc+0x34>
serial_putc(int c) {
    if (c != '\b') {
        serial_putc_sub(c);
    }
    else {
        serial_putc_sub('\b');
c0102fa7:	6a 08                	push   $0x8
c0102fa9:	e8 89 ff ff ff       	call   c0102f37 <serial_putc_sub>
c0102fae:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub(' ');
c0102fb1:	6a 20                	push   $0x20
c0102fb3:	e8 7f ff ff ff       	call   c0102f37 <serial_putc_sub>
c0102fb8:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub('\b');
c0102fbb:	6a 08                	push   $0x8
c0102fbd:	e8 75 ff ff ff       	call   c0102f37 <serial_putc_sub>
c0102fc2:	83 c4 04             	add    $0x4,%esp
    }
}
c0102fc5:	90                   	nop
c0102fc6:	c9                   	leave  
c0102fc7:	c3                   	ret    

c0102fc8 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0102fc8:	55                   	push   %ebp
c0102fc9:	89 e5                	mov    %esp,%ebp
c0102fcb:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0102fce:	eb 33                	jmp    c0103003 <cons_intr+0x3b>
        if (c != 0) {
c0102fd0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102fd4:	74 2d                	je     c0103003 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0102fd6:	a1 24 14 1b c0       	mov    0xc01b1424,%eax
c0102fdb:	8d 50 01             	lea    0x1(%eax),%edx
c0102fde:	89 15 24 14 1b c0    	mov    %edx,0xc01b1424
c0102fe4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102fe7:	88 90 20 12 1b c0    	mov    %dl,-0x3fe4ede0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0102fed:	a1 24 14 1b c0       	mov    0xc01b1424,%eax
c0102ff2:	3d 00 02 00 00       	cmp    $0x200,%eax
c0102ff7:	75 0a                	jne    c0103003 <cons_intr+0x3b>
                cons.wpos = 0;
c0102ff9:	c7 05 24 14 1b c0 00 	movl   $0x0,0xc01b1424
c0103000:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c0103003:	8b 45 08             	mov    0x8(%ebp),%eax
c0103006:	ff d0                	call   *%eax
c0103008:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010300b:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c010300f:	75 bf                	jne    c0102fd0 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0103011:	90                   	nop
c0103012:	c9                   	leave  
c0103013:	c3                   	ret    

c0103014 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0103014:	55                   	push   %ebp
c0103015:	89 e5                	mov    %esp,%ebp
c0103017:	83 ec 10             	sub    $0x10,%esp
c010301a:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0103020:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0103024:	89 c2                	mov    %eax,%edx
c0103026:	ec                   	in     (%dx),%al
c0103027:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c010302a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c010302e:	0f b6 c0             	movzbl %al,%eax
c0103031:	83 e0 01             	and    $0x1,%eax
c0103034:	85 c0                	test   %eax,%eax
c0103036:	75 07                	jne    c010303f <serial_proc_data+0x2b>
        return -1;
c0103038:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010303d:	eb 2a                	jmp    c0103069 <serial_proc_data+0x55>
c010303f:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0103045:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0103049:	89 c2                	mov    %eax,%edx
c010304b:	ec                   	in     (%dx),%al
c010304c:	88 45 f6             	mov    %al,-0xa(%ebp)
    return data;
c010304f:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0103053:	0f b6 c0             	movzbl %al,%eax
c0103056:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0103059:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c010305d:	75 07                	jne    c0103066 <serial_proc_data+0x52>
        c = '\b';
c010305f:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0103066:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0103069:	c9                   	leave  
c010306a:	c3                   	ret    

c010306b <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c010306b:	55                   	push   %ebp
c010306c:	89 e5                	mov    %esp,%ebp
c010306e:	83 ec 08             	sub    $0x8,%esp
    if (serial_exists) {
c0103071:	a1 08 12 1b c0       	mov    0xc01b1208,%eax
c0103076:	85 c0                	test   %eax,%eax
c0103078:	74 10                	je     c010308a <serial_intr+0x1f>
        cons_intr(serial_proc_data);
c010307a:	83 ec 0c             	sub    $0xc,%esp
c010307d:	68 14 30 10 c0       	push   $0xc0103014
c0103082:	e8 41 ff ff ff       	call   c0102fc8 <cons_intr>
c0103087:	83 c4 10             	add    $0x10,%esp
    }
}
c010308a:	90                   	nop
c010308b:	c9                   	leave  
c010308c:	c3                   	ret    

c010308d <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c010308d:	55                   	push   %ebp
c010308e:	89 e5                	mov    %esp,%ebp
c0103090:	83 ec 18             	sub    $0x18,%esp
c0103093:	66 c7 45 ec 64 00    	movw   $0x64,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0103099:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010309d:	89 c2                	mov    %eax,%edx
c010309f:	ec                   	in     (%dx),%al
c01030a0:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c01030a3:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c01030a7:	0f b6 c0             	movzbl %al,%eax
c01030aa:	83 e0 01             	and    $0x1,%eax
c01030ad:	85 c0                	test   %eax,%eax
c01030af:	75 0a                	jne    c01030bb <kbd_proc_data+0x2e>
        return -1;
c01030b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01030b6:	e9 5d 01 00 00       	jmp    c0103218 <kbd_proc_data+0x18b>
c01030bb:	66 c7 45 f0 60 00    	movw   $0x60,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01030c1:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01030c5:	89 c2                	mov    %eax,%edx
c01030c7:	ec                   	in     (%dx),%al
c01030c8:	88 45 ea             	mov    %al,-0x16(%ebp)
    return data;
c01030cb:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
    }

    data = inb(KBDATAP);
c01030cf:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c01030d2:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c01030d6:	75 17                	jne    c01030ef <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c01030d8:	a1 28 14 1b c0       	mov    0xc01b1428,%eax
c01030dd:	83 c8 40             	or     $0x40,%eax
c01030e0:	a3 28 14 1b c0       	mov    %eax,0xc01b1428
        return 0;
c01030e5:	b8 00 00 00 00       	mov    $0x0,%eax
c01030ea:	e9 29 01 00 00       	jmp    c0103218 <kbd_proc_data+0x18b>
    } else if (data & 0x80) {
c01030ef:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01030f3:	84 c0                	test   %al,%al
c01030f5:	79 47                	jns    c010313e <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c01030f7:	a1 28 14 1b c0       	mov    0xc01b1428,%eax
c01030fc:	83 e0 40             	and    $0x40,%eax
c01030ff:	85 c0                	test   %eax,%eax
c0103101:	75 09                	jne    c010310c <kbd_proc_data+0x7f>
c0103103:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0103107:	83 e0 7f             	and    $0x7f,%eax
c010310a:	eb 04                	jmp    c0103110 <kbd_proc_data+0x83>
c010310c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0103110:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0103113:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0103117:	0f b6 80 60 f0 12 c0 	movzbl -0x3fed0fa0(%eax),%eax
c010311e:	83 c8 40             	or     $0x40,%eax
c0103121:	0f b6 c0             	movzbl %al,%eax
c0103124:	f7 d0                	not    %eax
c0103126:	89 c2                	mov    %eax,%edx
c0103128:	a1 28 14 1b c0       	mov    0xc01b1428,%eax
c010312d:	21 d0                	and    %edx,%eax
c010312f:	a3 28 14 1b c0       	mov    %eax,0xc01b1428
        return 0;
c0103134:	b8 00 00 00 00       	mov    $0x0,%eax
c0103139:	e9 da 00 00 00       	jmp    c0103218 <kbd_proc_data+0x18b>
    } else if (shift & E0ESC) {
c010313e:	a1 28 14 1b c0       	mov    0xc01b1428,%eax
c0103143:	83 e0 40             	and    $0x40,%eax
c0103146:	85 c0                	test   %eax,%eax
c0103148:	74 11                	je     c010315b <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c010314a:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c010314e:	a1 28 14 1b c0       	mov    0xc01b1428,%eax
c0103153:	83 e0 bf             	and    $0xffffffbf,%eax
c0103156:	a3 28 14 1b c0       	mov    %eax,0xc01b1428
    }

    shift |= shiftcode[data];
c010315b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010315f:	0f b6 80 60 f0 12 c0 	movzbl -0x3fed0fa0(%eax),%eax
c0103166:	0f b6 d0             	movzbl %al,%edx
c0103169:	a1 28 14 1b c0       	mov    0xc01b1428,%eax
c010316e:	09 d0                	or     %edx,%eax
c0103170:	a3 28 14 1b c0       	mov    %eax,0xc01b1428
    shift ^= togglecode[data];
c0103175:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0103179:	0f b6 80 60 f1 12 c0 	movzbl -0x3fed0ea0(%eax),%eax
c0103180:	0f b6 d0             	movzbl %al,%edx
c0103183:	a1 28 14 1b c0       	mov    0xc01b1428,%eax
c0103188:	31 d0                	xor    %edx,%eax
c010318a:	a3 28 14 1b c0       	mov    %eax,0xc01b1428

    c = charcode[shift & (CTL | SHIFT)][data];
c010318f:	a1 28 14 1b c0       	mov    0xc01b1428,%eax
c0103194:	83 e0 03             	and    $0x3,%eax
c0103197:	8b 14 85 60 f5 12 c0 	mov    -0x3fed0aa0(,%eax,4),%edx
c010319e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01031a2:	01 d0                	add    %edx,%eax
c01031a4:	0f b6 00             	movzbl (%eax),%eax
c01031a7:	0f b6 c0             	movzbl %al,%eax
c01031aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c01031ad:	a1 28 14 1b c0       	mov    0xc01b1428,%eax
c01031b2:	83 e0 08             	and    $0x8,%eax
c01031b5:	85 c0                	test   %eax,%eax
c01031b7:	74 22                	je     c01031db <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c01031b9:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c01031bd:	7e 0c                	jle    c01031cb <kbd_proc_data+0x13e>
c01031bf:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c01031c3:	7f 06                	jg     c01031cb <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c01031c5:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c01031c9:	eb 10                	jmp    c01031db <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c01031cb:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c01031cf:	7e 0a                	jle    c01031db <kbd_proc_data+0x14e>
c01031d1:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c01031d5:	7f 04                	jg     c01031db <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c01031d7:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c01031db:	a1 28 14 1b c0       	mov    0xc01b1428,%eax
c01031e0:	f7 d0                	not    %eax
c01031e2:	83 e0 06             	and    $0x6,%eax
c01031e5:	85 c0                	test   %eax,%eax
c01031e7:	75 2c                	jne    c0103215 <kbd_proc_data+0x188>
c01031e9:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c01031f0:	75 23                	jne    c0103215 <kbd_proc_data+0x188>
        cprintf("Rebooting!\n");
c01031f2:	83 ec 0c             	sub    $0xc,%esp
c01031f5:	68 09 d4 10 c0       	push   $0xc010d409
c01031fa:	e8 84 d0 ff ff       	call   c0100283 <cprintf>
c01031ff:	83 c4 10             	add    $0x10,%esp
c0103202:	66 c7 45 ee 92 00    	movw   $0x92,-0x12(%ebp)
c0103208:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010320c:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0103210:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0103214:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0103215:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103218:	c9                   	leave  
c0103219:	c3                   	ret    

c010321a <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c010321a:	55                   	push   %ebp
c010321b:	89 e5                	mov    %esp,%ebp
c010321d:	83 ec 08             	sub    $0x8,%esp
    cons_intr(kbd_proc_data);
c0103220:	83 ec 0c             	sub    $0xc,%esp
c0103223:	68 8d 30 10 c0       	push   $0xc010308d
c0103228:	e8 9b fd ff ff       	call   c0102fc8 <cons_intr>
c010322d:	83 c4 10             	add    $0x10,%esp
}
c0103230:	90                   	nop
c0103231:	c9                   	leave  
c0103232:	c3                   	ret    

c0103233 <kbd_init>:

static void
kbd_init(void) {
c0103233:	55                   	push   %ebp
c0103234:	89 e5                	mov    %esp,%ebp
c0103236:	83 ec 08             	sub    $0x8,%esp
    // drain the kbd buffer
    kbd_intr();
c0103239:	e8 dc ff ff ff       	call   c010321a <kbd_intr>
    pic_enable(IRQ_KBD);
c010323e:	83 ec 0c             	sub    $0xc,%esp
c0103241:	6a 01                	push   $0x1
c0103243:	e8 4b 01 00 00       	call   c0103393 <pic_enable>
c0103248:	83 c4 10             	add    $0x10,%esp
}
c010324b:	90                   	nop
c010324c:	c9                   	leave  
c010324d:	c3                   	ret    

c010324e <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c010324e:	55                   	push   %ebp
c010324f:	89 e5                	mov    %esp,%ebp
c0103251:	83 ec 08             	sub    $0x8,%esp
    cga_init();
c0103254:	e8 8c f8 ff ff       	call   c0102ae5 <cga_init>
    serial_init();
c0103259:	e8 6e f9 ff ff       	call   c0102bcc <serial_init>
    kbd_init();
c010325e:	e8 d0 ff ff ff       	call   c0103233 <kbd_init>
    if (!serial_exists) {
c0103263:	a1 08 12 1b c0       	mov    0xc01b1208,%eax
c0103268:	85 c0                	test   %eax,%eax
c010326a:	75 10                	jne    c010327c <cons_init+0x2e>
        cprintf("serial port does not exist!!\n");
c010326c:	83 ec 0c             	sub    $0xc,%esp
c010326f:	68 15 d4 10 c0       	push   $0xc010d415
c0103274:	e8 0a d0 ff ff       	call   c0100283 <cprintf>
c0103279:	83 c4 10             	add    $0x10,%esp
    }
}
c010327c:	90                   	nop
c010327d:	c9                   	leave  
c010327e:	c3                   	ret    

c010327f <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c010327f:	55                   	push   %ebp
c0103280:	89 e5                	mov    %esp,%ebp
c0103282:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0103285:	e8 d4 f7 ff ff       	call   c0102a5e <__intr_save>
c010328a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c010328d:	83 ec 0c             	sub    $0xc,%esp
c0103290:	ff 75 08             	pushl  0x8(%ebp)
c0103293:	e8 93 fa ff ff       	call   c0102d2b <lpt_putc>
c0103298:	83 c4 10             	add    $0x10,%esp
        cga_putc(c);
c010329b:	83 ec 0c             	sub    $0xc,%esp
c010329e:	ff 75 08             	pushl  0x8(%ebp)
c01032a1:	e8 bc fa ff ff       	call   c0102d62 <cga_putc>
c01032a6:	83 c4 10             	add    $0x10,%esp
        serial_putc(c);
c01032a9:	83 ec 0c             	sub    $0xc,%esp
c01032ac:	ff 75 08             	pushl  0x8(%ebp)
c01032af:	e8 dd fc ff ff       	call   c0102f91 <serial_putc>
c01032b4:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c01032b7:	83 ec 0c             	sub    $0xc,%esp
c01032ba:	ff 75 f4             	pushl  -0xc(%ebp)
c01032bd:	e8 c6 f7 ff ff       	call   c0102a88 <__intr_restore>
c01032c2:	83 c4 10             	add    $0x10,%esp
}
c01032c5:	90                   	nop
c01032c6:	c9                   	leave  
c01032c7:	c3                   	ret    

c01032c8 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c01032c8:	55                   	push   %ebp
c01032c9:	89 e5                	mov    %esp,%ebp
c01032cb:	83 ec 18             	sub    $0x18,%esp
    int c = 0;
c01032ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c01032d5:	e8 84 f7 ff ff       	call   c0102a5e <__intr_save>
c01032da:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c01032dd:	e8 89 fd ff ff       	call   c010306b <serial_intr>
        kbd_intr();
c01032e2:	e8 33 ff ff ff       	call   c010321a <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c01032e7:	8b 15 20 14 1b c0    	mov    0xc01b1420,%edx
c01032ed:	a1 24 14 1b c0       	mov    0xc01b1424,%eax
c01032f2:	39 c2                	cmp    %eax,%edx
c01032f4:	74 31                	je     c0103327 <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c01032f6:	a1 20 14 1b c0       	mov    0xc01b1420,%eax
c01032fb:	8d 50 01             	lea    0x1(%eax),%edx
c01032fe:	89 15 20 14 1b c0    	mov    %edx,0xc01b1420
c0103304:	0f b6 80 20 12 1b c0 	movzbl -0x3fe4ede0(%eax),%eax
c010330b:	0f b6 c0             	movzbl %al,%eax
c010330e:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0103311:	a1 20 14 1b c0       	mov    0xc01b1420,%eax
c0103316:	3d 00 02 00 00       	cmp    $0x200,%eax
c010331b:	75 0a                	jne    c0103327 <cons_getc+0x5f>
                cons.rpos = 0;
c010331d:	c7 05 20 14 1b c0 00 	movl   $0x0,0xc01b1420
c0103324:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0103327:	83 ec 0c             	sub    $0xc,%esp
c010332a:	ff 75 f0             	pushl  -0x10(%ebp)
c010332d:	e8 56 f7 ff ff       	call   c0102a88 <__intr_restore>
c0103332:	83 c4 10             	add    $0x10,%esp
    return c;
c0103335:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103338:	c9                   	leave  
c0103339:	c3                   	ret    

c010333a <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c010333a:	55                   	push   %ebp
c010333b:	89 e5                	mov    %esp,%ebp
c010333d:	83 ec 14             	sub    $0x14,%esp
c0103340:	8b 45 08             	mov    0x8(%ebp),%eax
c0103343:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0103347:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010334b:	66 a3 70 f5 12 c0    	mov    %ax,0xc012f570
    if (did_init) {
c0103351:	a1 2c 14 1b c0       	mov    0xc01b142c,%eax
c0103356:	85 c0                	test   %eax,%eax
c0103358:	74 36                	je     c0103390 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c010335a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010335e:	0f b6 c0             	movzbl %al,%eax
c0103361:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0103367:	88 45 fa             	mov    %al,-0x6(%ebp)
c010336a:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
c010336e:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0103372:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0103373:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0103377:	66 c1 e8 08          	shr    $0x8,%ax
c010337b:	0f b6 c0             	movzbl %al,%eax
c010337e:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c0103384:	88 45 fb             	mov    %al,-0x5(%ebp)
c0103387:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
c010338b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c010338f:	ee                   	out    %al,(%dx)
    }
}
c0103390:	90                   	nop
c0103391:	c9                   	leave  
c0103392:	c3                   	ret    

c0103393 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0103393:	55                   	push   %ebp
c0103394:	89 e5                	mov    %esp,%ebp
    pic_setmask(irq_mask & ~(1 << irq));
c0103396:	8b 45 08             	mov    0x8(%ebp),%eax
c0103399:	ba 01 00 00 00       	mov    $0x1,%edx
c010339e:	89 c1                	mov    %eax,%ecx
c01033a0:	d3 e2                	shl    %cl,%edx
c01033a2:	89 d0                	mov    %edx,%eax
c01033a4:	f7 d0                	not    %eax
c01033a6:	89 c2                	mov    %eax,%edx
c01033a8:	0f b7 05 70 f5 12 c0 	movzwl 0xc012f570,%eax
c01033af:	21 d0                	and    %edx,%eax
c01033b1:	0f b7 c0             	movzwl %ax,%eax
c01033b4:	50                   	push   %eax
c01033b5:	e8 80 ff ff ff       	call   c010333a <pic_setmask>
c01033ba:	83 c4 04             	add    $0x4,%esp
}
c01033bd:	90                   	nop
c01033be:	c9                   	leave  
c01033bf:	c3                   	ret    

c01033c0 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01033c0:	55                   	push   %ebp
c01033c1:	89 e5                	mov    %esp,%ebp
c01033c3:	83 ec 30             	sub    $0x30,%esp
    did_init = 1;
c01033c6:	c7 05 2c 14 1b c0 01 	movl   $0x1,0xc01b142c
c01033cd:	00 00 00 
c01033d0:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01033d6:	c6 45 d6 ff          	movb   $0xff,-0x2a(%ebp)
c01033da:	0f b6 45 d6          	movzbl -0x2a(%ebp),%eax
c01033de:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01033e2:	ee                   	out    %al,(%dx)
c01033e3:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c01033e9:	c6 45 d7 ff          	movb   $0xff,-0x29(%ebp)
c01033ed:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c01033f1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c01033f5:	ee                   	out    %al,(%dx)
c01033f6:	66 c7 45 fa 20 00    	movw   $0x20,-0x6(%ebp)
c01033fc:	c6 45 d8 11          	movb   $0x11,-0x28(%ebp)
c0103400:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c0103404:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0103408:	ee                   	out    %al,(%dx)
c0103409:	66 c7 45 f8 21 00    	movw   $0x21,-0x8(%ebp)
c010340f:	c6 45 d9 20          	movb   $0x20,-0x27(%ebp)
c0103413:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0103417:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c010341b:	ee                   	out    %al,(%dx)
c010341c:	66 c7 45 f6 21 00    	movw   $0x21,-0xa(%ebp)
c0103422:	c6 45 da 04          	movb   $0x4,-0x26(%ebp)
c0103426:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c010342a:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010342e:	ee                   	out    %al,(%dx)
c010342f:	66 c7 45 f4 21 00    	movw   $0x21,-0xc(%ebp)
c0103435:	c6 45 db 03          	movb   $0x3,-0x25(%ebp)
c0103439:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c010343d:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0103441:	ee                   	out    %al,(%dx)
c0103442:	66 c7 45 f2 a0 00    	movw   $0xa0,-0xe(%ebp)
c0103448:	c6 45 dc 11          	movb   $0x11,-0x24(%ebp)
c010344c:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c0103450:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0103454:	ee                   	out    %al,(%dx)
c0103455:	66 c7 45 f0 a1 00    	movw   $0xa1,-0x10(%ebp)
c010345b:	c6 45 dd 28          	movb   $0x28,-0x23(%ebp)
c010345f:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0103463:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0103467:	ee                   	out    %al,(%dx)
c0103468:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
c010346e:	c6 45 de 02          	movb   $0x2,-0x22(%ebp)
c0103472:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c0103476:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010347a:	ee                   	out    %al,(%dx)
c010347b:	66 c7 45 ec a1 00    	movw   $0xa1,-0x14(%ebp)
c0103481:	c6 45 df 03          	movb   $0x3,-0x21(%ebp)
c0103485:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c0103489:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c010348d:	ee                   	out    %al,(%dx)
c010348e:	66 c7 45 ea 20 00    	movw   $0x20,-0x16(%ebp)
c0103494:	c6 45 e0 68          	movb   $0x68,-0x20(%ebp)
c0103498:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c010349c:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01034a0:	ee                   	out    %al,(%dx)
c01034a1:	66 c7 45 e8 20 00    	movw   $0x20,-0x18(%ebp)
c01034a7:	c6 45 e1 0a          	movb   $0xa,-0x1f(%ebp)
c01034ab:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01034af:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01034b3:	ee                   	out    %al,(%dx)
c01034b4:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c01034ba:	c6 45 e2 68          	movb   $0x68,-0x1e(%ebp)
c01034be:	0f b6 45 e2          	movzbl -0x1e(%ebp),%eax
c01034c2:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01034c6:	ee                   	out    %al,(%dx)
c01034c7:	66 c7 45 e4 a0 00    	movw   $0xa0,-0x1c(%ebp)
c01034cd:	c6 45 e3 0a          	movb   $0xa,-0x1d(%ebp)
c01034d1:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
c01034d5:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c01034d9:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01034da:	0f b7 05 70 f5 12 c0 	movzwl 0xc012f570,%eax
c01034e1:	66 83 f8 ff          	cmp    $0xffff,%ax
c01034e5:	74 13                	je     c01034fa <pic_init+0x13a>
        pic_setmask(irq_mask);
c01034e7:	0f b7 05 70 f5 12 c0 	movzwl 0xc012f570,%eax
c01034ee:	0f b7 c0             	movzwl %ax,%eax
c01034f1:	50                   	push   %eax
c01034f2:	e8 43 fe ff ff       	call   c010333a <pic_setmask>
c01034f7:	83 c4 04             	add    $0x4,%esp
    }
}
c01034fa:	90                   	nop
c01034fb:	c9                   	leave  
c01034fc:	c3                   	ret    

c01034fd <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01034fd:	55                   	push   %ebp
c01034fe:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c0103500:	fb                   	sti    
    sti();
}
c0103501:	90                   	nop
c0103502:	5d                   	pop    %ebp
c0103503:	c3                   	ret    

c0103504 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c0103504:	55                   	push   %ebp
c0103505:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c0103507:	fa                   	cli    
    cli();
}
c0103508:	90                   	nop
c0103509:	5d                   	pop    %ebp
c010350a:	c3                   	ret    

c010350b <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c010350b:	55                   	push   %ebp
c010350c:	89 e5                	mov    %esp,%ebp
c010350e:	83 ec 08             	sub    $0x8,%esp
    cprintf("%d ticks\n",TICK_NUM);
c0103511:	83 ec 08             	sub    $0x8,%esp
c0103514:	6a 64                	push   $0x64
c0103516:	68 40 d4 10 c0       	push   $0xc010d440
c010351b:	e8 63 cd ff ff       	call   c0100283 <cprintf>
c0103520:	83 c4 10             	add    $0x10,%esp
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
    panic("EOT: kernel seems ok.");
#endif
}
c0103523:	90                   	nop
c0103524:	c9                   	leave  
c0103525:	c3                   	ret    

c0103526 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c0103526:	55                   	push   %ebp
c0103527:	89 e5                	mov    %esp,%ebp
c0103529:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c010352c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0103533:	e9 c3 00 00 00       	jmp    c01035fb <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0103538:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010353b:	8b 04 85 00 f6 12 c0 	mov    -0x3fed0a00(,%eax,4),%eax
c0103542:	89 c2                	mov    %eax,%edx
c0103544:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103547:	66 89 14 c5 40 14 1b 	mov    %dx,-0x3fe4ebc0(,%eax,8)
c010354e:	c0 
c010354f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103552:	66 c7 04 c5 42 14 1b 	movw   $0x8,-0x3fe4ebbe(,%eax,8)
c0103559:	c0 08 00 
c010355c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010355f:	0f b6 14 c5 44 14 1b 	movzbl -0x3fe4ebbc(,%eax,8),%edx
c0103566:	c0 
c0103567:	83 e2 e0             	and    $0xffffffe0,%edx
c010356a:	88 14 c5 44 14 1b c0 	mov    %dl,-0x3fe4ebbc(,%eax,8)
c0103571:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103574:	0f b6 14 c5 44 14 1b 	movzbl -0x3fe4ebbc(,%eax,8),%edx
c010357b:	c0 
c010357c:	83 e2 1f             	and    $0x1f,%edx
c010357f:	88 14 c5 44 14 1b c0 	mov    %dl,-0x3fe4ebbc(,%eax,8)
c0103586:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103589:	0f b6 14 c5 45 14 1b 	movzbl -0x3fe4ebbb(,%eax,8),%edx
c0103590:	c0 
c0103591:	83 e2 f0             	and    $0xfffffff0,%edx
c0103594:	83 ca 0e             	or     $0xe,%edx
c0103597:	88 14 c5 45 14 1b c0 	mov    %dl,-0x3fe4ebbb(,%eax,8)
c010359e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01035a1:	0f b6 14 c5 45 14 1b 	movzbl -0x3fe4ebbb(,%eax,8),%edx
c01035a8:	c0 
c01035a9:	83 e2 ef             	and    $0xffffffef,%edx
c01035ac:	88 14 c5 45 14 1b c0 	mov    %dl,-0x3fe4ebbb(,%eax,8)
c01035b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01035b6:	0f b6 14 c5 45 14 1b 	movzbl -0x3fe4ebbb(,%eax,8),%edx
c01035bd:	c0 
c01035be:	83 e2 9f             	and    $0xffffff9f,%edx
c01035c1:	88 14 c5 45 14 1b c0 	mov    %dl,-0x3fe4ebbb(,%eax,8)
c01035c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01035cb:	0f b6 14 c5 45 14 1b 	movzbl -0x3fe4ebbb(,%eax,8),%edx
c01035d2:	c0 
c01035d3:	83 ca 80             	or     $0xffffff80,%edx
c01035d6:	88 14 c5 45 14 1b c0 	mov    %dl,-0x3fe4ebbb(,%eax,8)
c01035dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01035e0:	8b 04 85 00 f6 12 c0 	mov    -0x3fed0a00(,%eax,4),%eax
c01035e7:	c1 e8 10             	shr    $0x10,%eax
c01035ea:	89 c2                	mov    %eax,%edx
c01035ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01035ef:	66 89 14 c5 46 14 1b 	mov    %dx,-0x3fe4ebba(,%eax,8)
c01035f6:	c0 
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c01035f7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01035fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01035fe:	3d ff 00 00 00       	cmp    $0xff,%eax
c0103603:	0f 86 2f ff ff ff    	jbe    c0103538 <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c0103609:	a1 00 f8 12 c0       	mov    0xc012f800,%eax
c010360e:	66 a3 40 18 1b c0    	mov    %ax,0xc01b1840
c0103614:	66 c7 05 42 18 1b c0 	movw   $0x8,0xc01b1842
c010361b:	08 00 
c010361d:	0f b6 05 44 18 1b c0 	movzbl 0xc01b1844,%eax
c0103624:	83 e0 e0             	and    $0xffffffe0,%eax
c0103627:	a2 44 18 1b c0       	mov    %al,0xc01b1844
c010362c:	0f b6 05 44 18 1b c0 	movzbl 0xc01b1844,%eax
c0103633:	83 e0 1f             	and    $0x1f,%eax
c0103636:	a2 44 18 1b c0       	mov    %al,0xc01b1844
c010363b:	0f b6 05 45 18 1b c0 	movzbl 0xc01b1845,%eax
c0103642:	83 c8 0f             	or     $0xf,%eax
c0103645:	a2 45 18 1b c0       	mov    %al,0xc01b1845
c010364a:	0f b6 05 45 18 1b c0 	movzbl 0xc01b1845,%eax
c0103651:	83 e0 ef             	and    $0xffffffef,%eax
c0103654:	a2 45 18 1b c0       	mov    %al,0xc01b1845
c0103659:	0f b6 05 45 18 1b c0 	movzbl 0xc01b1845,%eax
c0103660:	83 c8 60             	or     $0x60,%eax
c0103663:	a2 45 18 1b c0       	mov    %al,0xc01b1845
c0103668:	0f b6 05 45 18 1b c0 	movzbl 0xc01b1845,%eax
c010366f:	83 c8 80             	or     $0xffffff80,%eax
c0103672:	a2 45 18 1b c0       	mov    %al,0xc01b1845
c0103677:	a1 00 f8 12 c0       	mov    0xc012f800,%eax
c010367c:	c1 e8 10             	shr    $0x10,%eax
c010367f:	66 a3 46 18 1b c0    	mov    %ax,0xc01b1846
c0103685:	c7 45 f8 80 f5 12 c0 	movl   $0xc012f580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c010368c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010368f:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
}
c0103692:	90                   	nop
c0103693:	c9                   	leave  
c0103694:	c3                   	ret    

c0103695 <trapname>:

static const char *
trapname(int trapno) {
c0103695:	55                   	push   %ebp
c0103696:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c0103698:	8b 45 08             	mov    0x8(%ebp),%eax
c010369b:	83 f8 13             	cmp    $0x13,%eax
c010369e:	77 0c                	ja     c01036ac <trapname+0x17>
        return excnames[trapno];
c01036a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01036a3:	8b 04 85 e0 d8 10 c0 	mov    -0x3fef2720(,%eax,4),%eax
c01036aa:	eb 18                	jmp    c01036c4 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01036ac:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01036b0:	7e 0d                	jle    c01036bf <trapname+0x2a>
c01036b2:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01036b6:	7f 07                	jg     c01036bf <trapname+0x2a>
        return "Hardware Interrupt";
c01036b8:	b8 4a d4 10 c0       	mov    $0xc010d44a,%eax
c01036bd:	eb 05                	jmp    c01036c4 <trapname+0x2f>
    }
    return "(unknown trap)";
c01036bf:	b8 5d d4 10 c0       	mov    $0xc010d45d,%eax
}
c01036c4:	5d                   	pop    %ebp
c01036c5:	c3                   	ret    

c01036c6 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01036c6:	55                   	push   %ebp
c01036c7:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01036c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01036cc:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01036d0:	66 83 f8 08          	cmp    $0x8,%ax
c01036d4:	0f 94 c0             	sete   %al
c01036d7:	0f b6 c0             	movzbl %al,%eax
}
c01036da:	5d                   	pop    %ebp
c01036db:	c3                   	ret    

c01036dc <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01036dc:	55                   	push   %ebp
c01036dd:	89 e5                	mov    %esp,%ebp
c01036df:	83 ec 18             	sub    $0x18,%esp
    cprintf("trapframe at %p\n", tf);
c01036e2:	83 ec 08             	sub    $0x8,%esp
c01036e5:	ff 75 08             	pushl  0x8(%ebp)
c01036e8:	68 9e d4 10 c0       	push   $0xc010d49e
c01036ed:	e8 91 cb ff ff       	call   c0100283 <cprintf>
c01036f2:	83 c4 10             	add    $0x10,%esp
    print_regs(&tf->tf_regs);
c01036f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01036f8:	83 ec 0c             	sub    $0xc,%esp
c01036fb:	50                   	push   %eax
c01036fc:	e8 b8 01 00 00       	call   c01038b9 <print_regs>
c0103701:	83 c4 10             	add    $0x10,%esp
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c0103704:	8b 45 08             	mov    0x8(%ebp),%eax
c0103707:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010370b:	0f b7 c0             	movzwl %ax,%eax
c010370e:	83 ec 08             	sub    $0x8,%esp
c0103711:	50                   	push   %eax
c0103712:	68 af d4 10 c0       	push   $0xc010d4af
c0103717:	e8 67 cb ff ff       	call   c0100283 <cprintf>
c010371c:	83 c4 10             	add    $0x10,%esp
    cprintf("  es   0x----%04x\n", tf->tf_es);
c010371f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103722:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c0103726:	0f b7 c0             	movzwl %ax,%eax
c0103729:	83 ec 08             	sub    $0x8,%esp
c010372c:	50                   	push   %eax
c010372d:	68 c2 d4 10 c0       	push   $0xc010d4c2
c0103732:	e8 4c cb ff ff       	call   c0100283 <cprintf>
c0103737:	83 c4 10             	add    $0x10,%esp
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c010373a:	8b 45 08             	mov    0x8(%ebp),%eax
c010373d:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0103741:	0f b7 c0             	movzwl %ax,%eax
c0103744:	83 ec 08             	sub    $0x8,%esp
c0103747:	50                   	push   %eax
c0103748:	68 d5 d4 10 c0       	push   $0xc010d4d5
c010374d:	e8 31 cb ff ff       	call   c0100283 <cprintf>
c0103752:	83 c4 10             	add    $0x10,%esp
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0103755:	8b 45 08             	mov    0x8(%ebp),%eax
c0103758:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c010375c:	0f b7 c0             	movzwl %ax,%eax
c010375f:	83 ec 08             	sub    $0x8,%esp
c0103762:	50                   	push   %eax
c0103763:	68 e8 d4 10 c0       	push   $0xc010d4e8
c0103768:	e8 16 cb ff ff       	call   c0100283 <cprintf>
c010376d:	83 c4 10             	add    $0x10,%esp
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c0103770:	8b 45 08             	mov    0x8(%ebp),%eax
c0103773:	8b 40 30             	mov    0x30(%eax),%eax
c0103776:	83 ec 0c             	sub    $0xc,%esp
c0103779:	50                   	push   %eax
c010377a:	e8 16 ff ff ff       	call   c0103695 <trapname>
c010377f:	83 c4 10             	add    $0x10,%esp
c0103782:	89 c2                	mov    %eax,%edx
c0103784:	8b 45 08             	mov    0x8(%ebp),%eax
c0103787:	8b 40 30             	mov    0x30(%eax),%eax
c010378a:	83 ec 04             	sub    $0x4,%esp
c010378d:	52                   	push   %edx
c010378e:	50                   	push   %eax
c010378f:	68 fb d4 10 c0       	push   $0xc010d4fb
c0103794:	e8 ea ca ff ff       	call   c0100283 <cprintf>
c0103799:	83 c4 10             	add    $0x10,%esp
    cprintf("  err  0x%08x\n", tf->tf_err);
c010379c:	8b 45 08             	mov    0x8(%ebp),%eax
c010379f:	8b 40 34             	mov    0x34(%eax),%eax
c01037a2:	83 ec 08             	sub    $0x8,%esp
c01037a5:	50                   	push   %eax
c01037a6:	68 0d d5 10 c0       	push   $0xc010d50d
c01037ab:	e8 d3 ca ff ff       	call   c0100283 <cprintf>
c01037b0:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c01037b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01037b6:	8b 40 38             	mov    0x38(%eax),%eax
c01037b9:	83 ec 08             	sub    $0x8,%esp
c01037bc:	50                   	push   %eax
c01037bd:	68 1c d5 10 c0       	push   $0xc010d51c
c01037c2:	e8 bc ca ff ff       	call   c0100283 <cprintf>
c01037c7:	83 c4 10             	add    $0x10,%esp
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01037ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01037cd:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01037d1:	0f b7 c0             	movzwl %ax,%eax
c01037d4:	83 ec 08             	sub    $0x8,%esp
c01037d7:	50                   	push   %eax
c01037d8:	68 2b d5 10 c0       	push   $0xc010d52b
c01037dd:	e8 a1 ca ff ff       	call   c0100283 <cprintf>
c01037e2:	83 c4 10             	add    $0x10,%esp
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01037e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01037e8:	8b 40 40             	mov    0x40(%eax),%eax
c01037eb:	83 ec 08             	sub    $0x8,%esp
c01037ee:	50                   	push   %eax
c01037ef:	68 3e d5 10 c0       	push   $0xc010d53e
c01037f4:	e8 8a ca ff ff       	call   c0100283 <cprintf>
c01037f9:	83 c4 10             	add    $0x10,%esp

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01037fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103803:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010380a:	eb 3f                	jmp    c010384b <print_trapframe+0x16f>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c010380c:	8b 45 08             	mov    0x8(%ebp),%eax
c010380f:	8b 50 40             	mov    0x40(%eax),%edx
c0103812:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103815:	21 d0                	and    %edx,%eax
c0103817:	85 c0                	test   %eax,%eax
c0103819:	74 29                	je     c0103844 <print_trapframe+0x168>
c010381b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010381e:	8b 04 85 a0 f5 12 c0 	mov    -0x3fed0a60(,%eax,4),%eax
c0103825:	85 c0                	test   %eax,%eax
c0103827:	74 1b                	je     c0103844 <print_trapframe+0x168>
            cprintf("%s,", IA32flags[i]);
c0103829:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010382c:	8b 04 85 a0 f5 12 c0 	mov    -0x3fed0a60(,%eax,4),%eax
c0103833:	83 ec 08             	sub    $0x8,%esp
c0103836:	50                   	push   %eax
c0103837:	68 4d d5 10 c0       	push   $0xc010d54d
c010383c:	e8 42 ca ff ff       	call   c0100283 <cprintf>
c0103841:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0103844:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103848:	d1 65 f0             	shll   -0x10(%ebp)
c010384b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010384e:	83 f8 17             	cmp    $0x17,%eax
c0103851:	76 b9                	jbe    c010380c <print_trapframe+0x130>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0103853:	8b 45 08             	mov    0x8(%ebp),%eax
c0103856:	8b 40 40             	mov    0x40(%eax),%eax
c0103859:	25 00 30 00 00       	and    $0x3000,%eax
c010385e:	c1 e8 0c             	shr    $0xc,%eax
c0103861:	83 ec 08             	sub    $0x8,%esp
c0103864:	50                   	push   %eax
c0103865:	68 51 d5 10 c0       	push   $0xc010d551
c010386a:	e8 14 ca ff ff       	call   c0100283 <cprintf>
c010386f:	83 c4 10             	add    $0x10,%esp

    if (!trap_in_kernel(tf)) {
c0103872:	83 ec 0c             	sub    $0xc,%esp
c0103875:	ff 75 08             	pushl  0x8(%ebp)
c0103878:	e8 49 fe ff ff       	call   c01036c6 <trap_in_kernel>
c010387d:	83 c4 10             	add    $0x10,%esp
c0103880:	85 c0                	test   %eax,%eax
c0103882:	75 32                	jne    c01038b6 <print_trapframe+0x1da>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0103884:	8b 45 08             	mov    0x8(%ebp),%eax
c0103887:	8b 40 44             	mov    0x44(%eax),%eax
c010388a:	83 ec 08             	sub    $0x8,%esp
c010388d:	50                   	push   %eax
c010388e:	68 5a d5 10 c0       	push   $0xc010d55a
c0103893:	e8 eb c9 ff ff       	call   c0100283 <cprintf>
c0103898:	83 c4 10             	add    $0x10,%esp
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c010389b:	8b 45 08             	mov    0x8(%ebp),%eax
c010389e:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c01038a2:	0f b7 c0             	movzwl %ax,%eax
c01038a5:	83 ec 08             	sub    $0x8,%esp
c01038a8:	50                   	push   %eax
c01038a9:	68 69 d5 10 c0       	push   $0xc010d569
c01038ae:	e8 d0 c9 ff ff       	call   c0100283 <cprintf>
c01038b3:	83 c4 10             	add    $0x10,%esp
    }
}
c01038b6:	90                   	nop
c01038b7:	c9                   	leave  
c01038b8:	c3                   	ret    

c01038b9 <print_regs>:

void
print_regs(struct pushregs *regs) {
c01038b9:	55                   	push   %ebp
c01038ba:	89 e5                	mov    %esp,%ebp
c01038bc:	83 ec 08             	sub    $0x8,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c01038bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01038c2:	8b 00                	mov    (%eax),%eax
c01038c4:	83 ec 08             	sub    $0x8,%esp
c01038c7:	50                   	push   %eax
c01038c8:	68 7c d5 10 c0       	push   $0xc010d57c
c01038cd:	e8 b1 c9 ff ff       	call   c0100283 <cprintf>
c01038d2:	83 c4 10             	add    $0x10,%esp
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01038d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01038d8:	8b 40 04             	mov    0x4(%eax),%eax
c01038db:	83 ec 08             	sub    $0x8,%esp
c01038de:	50                   	push   %eax
c01038df:	68 8b d5 10 c0       	push   $0xc010d58b
c01038e4:	e8 9a c9 ff ff       	call   c0100283 <cprintf>
c01038e9:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01038ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01038ef:	8b 40 08             	mov    0x8(%eax),%eax
c01038f2:	83 ec 08             	sub    $0x8,%esp
c01038f5:	50                   	push   %eax
c01038f6:	68 9a d5 10 c0       	push   $0xc010d59a
c01038fb:	e8 83 c9 ff ff       	call   c0100283 <cprintf>
c0103900:	83 c4 10             	add    $0x10,%esp
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c0103903:	8b 45 08             	mov    0x8(%ebp),%eax
c0103906:	8b 40 0c             	mov    0xc(%eax),%eax
c0103909:	83 ec 08             	sub    $0x8,%esp
c010390c:	50                   	push   %eax
c010390d:	68 a9 d5 10 c0       	push   $0xc010d5a9
c0103912:	e8 6c c9 ff ff       	call   c0100283 <cprintf>
c0103917:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c010391a:	8b 45 08             	mov    0x8(%ebp),%eax
c010391d:	8b 40 10             	mov    0x10(%eax),%eax
c0103920:	83 ec 08             	sub    $0x8,%esp
c0103923:	50                   	push   %eax
c0103924:	68 b8 d5 10 c0       	push   $0xc010d5b8
c0103929:	e8 55 c9 ff ff       	call   c0100283 <cprintf>
c010392e:	83 c4 10             	add    $0x10,%esp
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0103931:	8b 45 08             	mov    0x8(%ebp),%eax
c0103934:	8b 40 14             	mov    0x14(%eax),%eax
c0103937:	83 ec 08             	sub    $0x8,%esp
c010393a:	50                   	push   %eax
c010393b:	68 c7 d5 10 c0       	push   $0xc010d5c7
c0103940:	e8 3e c9 ff ff       	call   c0100283 <cprintf>
c0103945:	83 c4 10             	add    $0x10,%esp
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0103948:	8b 45 08             	mov    0x8(%ebp),%eax
c010394b:	8b 40 18             	mov    0x18(%eax),%eax
c010394e:	83 ec 08             	sub    $0x8,%esp
c0103951:	50                   	push   %eax
c0103952:	68 d6 d5 10 c0       	push   $0xc010d5d6
c0103957:	e8 27 c9 ff ff       	call   c0100283 <cprintf>
c010395c:	83 c4 10             	add    $0x10,%esp
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c010395f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103962:	8b 40 1c             	mov    0x1c(%eax),%eax
c0103965:	83 ec 08             	sub    $0x8,%esp
c0103968:	50                   	push   %eax
c0103969:	68 e5 d5 10 c0       	push   $0xc010d5e5
c010396e:	e8 10 c9 ff ff       	call   c0100283 <cprintf>
c0103973:	83 c4 10             	add    $0x10,%esp
}
c0103976:	90                   	nop
c0103977:	c9                   	leave  
c0103978:	c3                   	ret    

c0103979 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0103979:	55                   	push   %ebp
c010397a:	89 e5                	mov    %esp,%ebp
c010397c:	53                   	push   %ebx
c010397d:	83 ec 14             	sub    $0x14,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0103980:	8b 45 08             	mov    0x8(%ebp),%eax
c0103983:	8b 40 34             	mov    0x34(%eax),%eax
c0103986:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0103989:	85 c0                	test   %eax,%eax
c010398b:	74 07                	je     c0103994 <print_pgfault+0x1b>
c010398d:	bb f4 d5 10 c0       	mov    $0xc010d5f4,%ebx
c0103992:	eb 05                	jmp    c0103999 <print_pgfault+0x20>
c0103994:	bb 05 d6 10 c0       	mov    $0xc010d605,%ebx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c0103999:	8b 45 08             	mov    0x8(%ebp),%eax
c010399c:	8b 40 34             	mov    0x34(%eax),%eax
c010399f:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01039a2:	85 c0                	test   %eax,%eax
c01039a4:	74 07                	je     c01039ad <print_pgfault+0x34>
c01039a6:	b9 57 00 00 00       	mov    $0x57,%ecx
c01039ab:	eb 05                	jmp    c01039b2 <print_pgfault+0x39>
c01039ad:	b9 52 00 00 00       	mov    $0x52,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
c01039b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01039b5:	8b 40 34             	mov    0x34(%eax),%eax
c01039b8:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01039bb:	85 c0                	test   %eax,%eax
c01039bd:	74 07                	je     c01039c6 <print_pgfault+0x4d>
c01039bf:	ba 55 00 00 00       	mov    $0x55,%edx
c01039c4:	eb 05                	jmp    c01039cb <print_pgfault+0x52>
c01039c6:	ba 4b 00 00 00       	mov    $0x4b,%edx
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01039cb:	0f 20 d0             	mov    %cr2,%eax
c01039ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr2;
c01039d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039d4:	83 ec 0c             	sub    $0xc,%esp
c01039d7:	53                   	push   %ebx
c01039d8:	51                   	push   %ecx
c01039d9:	52                   	push   %edx
c01039da:	50                   	push   %eax
c01039db:	68 14 d6 10 c0       	push   $0xc010d614
c01039e0:	e8 9e c8 ff ff       	call   c0100283 <cprintf>
c01039e5:	83 c4 20             	add    $0x20,%esp
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c01039e8:	90                   	nop
c01039e9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01039ec:	c9                   	leave  
c01039ed:	c3                   	ret    

c01039ee <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01039ee:	55                   	push   %ebp
c01039ef:	89 e5                	mov    %esp,%ebp
c01039f1:	83 ec 18             	sub    $0x18,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01039f4:	a1 68 3d 1b c0       	mov    0xc01b3d68,%eax
c01039f9:	85 c0                	test   %eax,%eax
c01039fb:	74 0e                	je     c0103a0b <pgfault_handler+0x1d>
            print_pgfault(tf);
c01039fd:	83 ec 0c             	sub    $0xc,%esp
c0103a00:	ff 75 08             	pushl  0x8(%ebp)
c0103a03:	e8 71 ff ff ff       	call   c0103979 <print_pgfault>
c0103a08:	83 c4 10             	add    $0x10,%esp
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c0103a0b:	a1 68 3d 1b c0       	mov    0xc01b3d68,%eax
c0103a10:	85 c0                	test   %eax,%eax
c0103a12:	74 32                	je     c0103a46 <pgfault_handler+0x58>
        assert(current == idleproc);
c0103a14:	8b 15 08 1d 1b c0    	mov    0xc01b1d08,%edx
c0103a1a:	a1 00 1d 1b c0       	mov    0xc01b1d00,%eax
c0103a1f:	39 c2                	cmp    %eax,%edx
c0103a21:	74 19                	je     c0103a3c <pgfault_handler+0x4e>
c0103a23:	68 37 d6 10 c0       	push   $0xc010d637
c0103a28:	68 4b d6 10 c0       	push   $0xc010d64b
c0103a2d:	68 b0 00 00 00       	push   $0xb0
c0103a32:	68 60 d6 10 c0       	push   $0xc010d660
c0103a37:	e8 25 dd ff ff       	call   c0101761 <__panic>
        mm = check_mm_struct;
c0103a3c:	a1 68 3d 1b c0       	mov    0xc01b3d68,%eax
c0103a41:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103a44:	eb 47                	jmp    c0103a8d <pgfault_handler+0x9f>
    }
    else {
        if (current == NULL) {
c0103a46:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c0103a4b:	85 c0                	test   %eax,%eax
c0103a4d:	75 33                	jne    c0103a82 <pgfault_handler+0x94>
            print_trapframe(tf);
c0103a4f:	83 ec 0c             	sub    $0xc,%esp
c0103a52:	ff 75 08             	pushl  0x8(%ebp)
c0103a55:	e8 82 fc ff ff       	call   c01036dc <print_trapframe>
c0103a5a:	83 c4 10             	add    $0x10,%esp
            print_pgfault(tf);
c0103a5d:	83 ec 0c             	sub    $0xc,%esp
c0103a60:	ff 75 08             	pushl  0x8(%ebp)
c0103a63:	e8 11 ff ff ff       	call   c0103979 <print_pgfault>
c0103a68:	83 c4 10             	add    $0x10,%esp
            panic("unhandled page fault.\n");
c0103a6b:	83 ec 04             	sub    $0x4,%esp
c0103a6e:	68 71 d6 10 c0       	push   $0xc010d671
c0103a73:	68 b7 00 00 00       	push   $0xb7
c0103a78:	68 60 d6 10 c0       	push   $0xc010d660
c0103a7d:	e8 df dc ff ff       	call   c0101761 <__panic>
        }
        mm = current->mm;
c0103a82:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c0103a87:	8b 40 18             	mov    0x18(%eax),%eax
c0103a8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0103a8d:	0f 20 d0             	mov    %cr2,%eax
c0103a90:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c0103a93:	8b 55 f0             	mov    -0x10(%ebp),%edx
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0103a96:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a99:	8b 40 34             	mov    0x34(%eax),%eax
c0103a9c:	83 ec 04             	sub    $0x4,%esp
c0103a9f:	52                   	push   %edx
c0103aa0:	50                   	push   %eax
c0103aa1:	ff 75 f4             	pushl  -0xc(%ebp)
c0103aa4:	e8 56 37 00 00       	call   c01071ff <do_pgfault>
c0103aa9:	83 c4 10             	add    $0x10,%esp
}
c0103aac:	c9                   	leave  
c0103aad:	c3                   	ret    

c0103aae <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0103aae:	55                   	push   %ebp
c0103aaf:	89 e5                	mov    %esp,%ebp
c0103ab1:	83 ec 18             	sub    $0x18,%esp
    char c;

    int ret=0;
c0103ab4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c0103abb:	8b 45 08             	mov    0x8(%ebp),%eax
c0103abe:	8b 40 30             	mov    0x30(%eax),%eax
c0103ac1:	83 f8 2f             	cmp    $0x2f,%eax
c0103ac4:	77 38                	ja     c0103afe <trap_dispatch+0x50>
c0103ac6:	83 f8 2e             	cmp    $0x2e,%eax
c0103ac9:	0f 83 d4 01 00 00    	jae    c0103ca3 <trap_dispatch+0x1f5>
c0103acf:	83 f8 20             	cmp    $0x20,%eax
c0103ad2:	0f 84 eb 00 00 00    	je     c0103bc3 <trap_dispatch+0x115>
c0103ad8:	83 f8 20             	cmp    $0x20,%eax
c0103adb:	77 0a                	ja     c0103ae7 <trap_dispatch+0x39>
c0103add:	83 f8 0e             	cmp    $0xe,%eax
c0103ae0:	74 3e                	je     c0103b20 <trap_dispatch+0x72>
c0103ae2:	e9 71 01 00 00       	jmp    c0103c58 <trap_dispatch+0x1aa>
c0103ae7:	83 f8 21             	cmp    $0x21,%eax
c0103aea:	0f 84 2d 01 00 00    	je     c0103c1d <trap_dispatch+0x16f>
c0103af0:	83 f8 24             	cmp    $0x24,%eax
c0103af3:	0f 84 fd 00 00 00    	je     c0103bf6 <trap_dispatch+0x148>
c0103af9:	e9 5a 01 00 00       	jmp    c0103c58 <trap_dispatch+0x1aa>
c0103afe:	83 f8 78             	cmp    $0x78,%eax
c0103b01:	0f 82 51 01 00 00    	jb     c0103c58 <trap_dispatch+0x1aa>
c0103b07:	83 f8 79             	cmp    $0x79,%eax
c0103b0a:	0f 86 31 01 00 00    	jbe    c0103c41 <trap_dispatch+0x193>
c0103b10:	3d 80 00 00 00       	cmp    $0x80,%eax
c0103b15:	0f 84 9e 00 00 00    	je     c0103bb9 <trap_dispatch+0x10b>
c0103b1b:	e9 38 01 00 00       	jmp    c0103c58 <trap_dispatch+0x1aa>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c0103b20:	83 ec 0c             	sub    $0xc,%esp
c0103b23:	ff 75 08             	pushl  0x8(%ebp)
c0103b26:	e8 c3 fe ff ff       	call   c01039ee <pgfault_handler>
c0103b2b:	83 c4 10             	add    $0x10,%esp
c0103b2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103b31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103b35:	0f 84 6b 01 00 00    	je     c0103ca6 <trap_dispatch+0x1f8>
            print_trapframe(tf);
c0103b3b:	83 ec 0c             	sub    $0xc,%esp
c0103b3e:	ff 75 08             	pushl  0x8(%ebp)
c0103b41:	e8 96 fb ff ff       	call   c01036dc <print_trapframe>
c0103b46:	83 c4 10             	add    $0x10,%esp
            if (current == NULL) {
c0103b49:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c0103b4e:	85 c0                	test   %eax,%eax
c0103b50:	75 17                	jne    c0103b69 <trap_dispatch+0xbb>
                panic("handle pgfault failed. ret=%d\n", ret);
c0103b52:	ff 75 f4             	pushl  -0xc(%ebp)
c0103b55:	68 88 d6 10 c0       	push   $0xc010d688
c0103b5a:	68 cc 00 00 00       	push   $0xcc
c0103b5f:	68 60 d6 10 c0       	push   $0xc010d660
c0103b64:	e8 f8 db ff ff       	call   c0101761 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0103b69:	83 ec 0c             	sub    $0xc,%esp
c0103b6c:	ff 75 08             	pushl  0x8(%ebp)
c0103b6f:	e8 52 fb ff ff       	call   c01036c6 <trap_in_kernel>
c0103b74:	83 c4 10             	add    $0x10,%esp
c0103b77:	85 c0                	test   %eax,%eax
c0103b79:	74 17                	je     c0103b92 <trap_dispatch+0xe4>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0103b7b:	ff 75 f4             	pushl  -0xc(%ebp)
c0103b7e:	68 a8 d6 10 c0       	push   $0xc010d6a8
c0103b83:	68 d0 00 00 00       	push   $0xd0
c0103b88:	68 60 d6 10 c0       	push   $0xc010d660
c0103b8d:	e8 cf db ff ff       	call   c0101761 <__panic>
                }
                cprintf("killed by kernel.\n");
c0103b92:	83 ec 0c             	sub    $0xc,%esp
c0103b95:	68 d6 d6 10 c0       	push   $0xc010d6d6
c0103b9a:	e8 e4 c6 ff ff       	call   c0100283 <cprintf>
c0103b9f:	83 c4 10             	add    $0x10,%esp
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c0103ba2:	ff 75 f4             	pushl  -0xc(%ebp)
c0103ba5:	68 ec d6 10 c0       	push   $0xc010d6ec
c0103baa:	68 d3 00 00 00       	push   $0xd3
c0103baf:	68 60 d6 10 c0       	push   $0xc010d660
c0103bb4:	e8 a8 db ff ff       	call   c0101761 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
    case T_SYSCALL:
        syscall();
c0103bb9:	e8 44 85 00 00       	call   c010c102 <syscall>
        break;
c0103bbe:	e9 e7 00 00 00       	jmp    c0103caa <trap_dispatch+0x1fc>
         */
        /* LAB5 YOUR CODE */
        /* you should upate you lab1 code (just add ONE or TWO lines of code):
         *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
         */
        ticks ++;
c0103bc3:	a1 58 3d 1b c0       	mov    0xc01b3d58,%eax
c0103bc8:	83 c0 01             	add    $0x1,%eax
c0103bcb:	a3 58 3d 1b c0       	mov    %eax,0xc01b3d58
        assert(current != NULL);
c0103bd0:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c0103bd5:	85 c0                	test   %eax,%eax
c0103bd7:	0f 85 cc 00 00 00    	jne    c0103ca9 <trap_dispatch+0x1fb>
c0103bdd:	68 15 d7 10 c0       	push   $0xc010d715
c0103be2:	68 4b d6 10 c0       	push   $0xc010d64b
c0103be7:	68 eb 00 00 00       	push   $0xeb
c0103bec:	68 60 d6 10 c0       	push   $0xc010d660
c0103bf1:	e8 6b db ff ff       	call   c0101761 <__panic>
        break;
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c0103bf6:	e8 cd f6 ff ff       	call   c01032c8 <cons_getc>
c0103bfb:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c0103bfe:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0103c02:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0103c06:	83 ec 04             	sub    $0x4,%esp
c0103c09:	52                   	push   %edx
c0103c0a:	50                   	push   %eax
c0103c0b:	68 25 d7 10 c0       	push   $0xc010d725
c0103c10:	e8 6e c6 ff ff       	call   c0100283 <cprintf>
c0103c15:	83 c4 10             	add    $0x10,%esp
        break;
c0103c18:	e9 8d 00 00 00       	jmp    c0103caa <trap_dispatch+0x1fc>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0103c1d:	e8 a6 f6 ff ff       	call   c01032c8 <cons_getc>
c0103c22:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0103c25:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0103c29:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0103c2d:	83 ec 04             	sub    $0x4,%esp
c0103c30:	52                   	push   %edx
c0103c31:	50                   	push   %eax
c0103c32:	68 37 d7 10 c0       	push   $0xc010d737
c0103c37:	e8 47 c6 ff ff       	call   c0100283 <cprintf>
c0103c3c:	83 c4 10             	add    $0x10,%esp
        break;
c0103c3f:	eb 69                	jmp    c0103caa <trap_dispatch+0x1fc>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0103c41:	83 ec 04             	sub    $0x4,%esp
c0103c44:	68 46 d7 10 c0       	push   $0xc010d746
c0103c49:	68 f8 00 00 00       	push   $0xf8
c0103c4e:	68 60 d6 10 c0       	push   $0xc010d660
c0103c53:	e8 09 db ff ff       	call   c0101761 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0103c58:	83 ec 0c             	sub    $0xc,%esp
c0103c5b:	ff 75 08             	pushl  0x8(%ebp)
c0103c5e:	e8 79 fa ff ff       	call   c01036dc <print_trapframe>
c0103c63:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c0103c66:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c0103c6b:	85 c0                	test   %eax,%eax
c0103c6d:	74 1d                	je     c0103c8c <trap_dispatch+0x1de>
            cprintf("unhandled trap.\n");
c0103c6f:	83 ec 0c             	sub    $0xc,%esp
c0103c72:	68 56 d7 10 c0       	push   $0xc010d756
c0103c77:	e8 07 c6 ff ff       	call   c0100283 <cprintf>
c0103c7c:	83 c4 10             	add    $0x10,%esp
            do_exit(-E_KILLED);
c0103c7f:	83 ec 0c             	sub    $0xc,%esp
c0103c82:	6a f7                	push   $0xfffffff7
c0103c84:	e8 0e 6d 00 00       	call   c010a997 <do_exit>
c0103c89:	83 c4 10             	add    $0x10,%esp
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0103c8c:	83 ec 04             	sub    $0x4,%esp
c0103c8f:	68 67 d7 10 c0       	push   $0xc010d767
c0103c94:	68 05 01 00 00       	push   $0x105
c0103c99:	68 60 d6 10 c0       	push   $0xc010d660
c0103c9e:	e8 be da ff ff       	call   c0101761 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0103ca3:	90                   	nop
c0103ca4:	eb 04                	jmp    c0103caa <trap_dispatch+0x1fc>
                cprintf("killed by kernel.\n");
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
                do_exit(-E_KILLED);
            }
        }
        break;
c0103ca6:	90                   	nop
c0103ca7:	eb 01                	jmp    c0103caa <trap_dispatch+0x1fc>
        /* you should upate you lab1 code (just add ONE or TWO lines of code):
         *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
         */
        ticks ++;
        assert(current != NULL);
        break;
c0103ca9:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0103caa:	90                   	nop
c0103cab:	c9                   	leave  
c0103cac:	c3                   	ret    

c0103cad <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0103cad:	55                   	push   %ebp
c0103cae:	89 e5                	mov    %esp,%ebp
c0103cb0:	83 ec 18             	sub    $0x18,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0103cb3:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c0103cb8:	85 c0                	test   %eax,%eax
c0103cba:	75 10                	jne    c0103ccc <trap+0x1f>
        trap_dispatch(tf);
c0103cbc:	83 ec 0c             	sub    $0xc,%esp
c0103cbf:	ff 75 08             	pushl  0x8(%ebp)
c0103cc2:	e8 e7 fd ff ff       	call   c0103aae <trap_dispatch>
c0103cc7:	83 c4 10             	add    $0x10,%esp
            if (current->need_resched) {
                schedule();
            }
        }
    }
}
c0103cca:	eb 73                	jmp    c0103d3f <trap+0x92>
    if (current == NULL) {
        trap_dispatch(tf);
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0103ccc:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c0103cd1:	8b 40 3c             	mov    0x3c(%eax),%eax
c0103cd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0103cd7:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c0103cdc:	8b 55 08             	mov    0x8(%ebp),%edx
c0103cdf:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0103ce2:	83 ec 0c             	sub    $0xc,%esp
c0103ce5:	ff 75 08             	pushl  0x8(%ebp)
c0103ce8:	e8 d9 f9 ff ff       	call   c01036c6 <trap_in_kernel>
c0103ced:	83 c4 10             	add    $0x10,%esp
c0103cf0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0103cf3:	83 ec 0c             	sub    $0xc,%esp
c0103cf6:	ff 75 08             	pushl  0x8(%ebp)
c0103cf9:	e8 b0 fd ff ff       	call   c0103aae <trap_dispatch>
c0103cfe:	83 c4 10             	add    $0x10,%esp
    
        current->tf = otf;
c0103d01:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c0103d06:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103d09:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0103d0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103d10:	75 2d                	jne    c0103d3f <trap+0x92>
            if (current->flags & PF_EXITING) {
c0103d12:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c0103d17:	8b 40 44             	mov    0x44(%eax),%eax
c0103d1a:	83 e0 01             	and    $0x1,%eax
c0103d1d:	85 c0                	test   %eax,%eax
c0103d1f:	74 0d                	je     c0103d2e <trap+0x81>
                do_exit(-E_KILLED);
c0103d21:	83 ec 0c             	sub    $0xc,%esp
c0103d24:	6a f7                	push   $0xfffffff7
c0103d26:	e8 6c 6c 00 00       	call   c010a997 <do_exit>
c0103d2b:	83 c4 10             	add    $0x10,%esp
            }
            if (current->need_resched) {
c0103d2e:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c0103d33:	8b 40 10             	mov    0x10(%eax),%eax
c0103d36:	85 c0                	test   %eax,%eax
c0103d38:	74 05                	je     c0103d3f <trap+0x92>
                schedule();
c0103d3a:	e8 bd 7d 00 00       	call   c010bafc <schedule>
            }
        }
    }
}
c0103d3f:	90                   	nop
c0103d40:	c9                   	leave  
c0103d41:	c3                   	ret    

c0103d42 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0103d42:	6a 00                	push   $0x0
  pushl $0
c0103d44:	6a 00                	push   $0x0
  jmp __alltraps
c0103d46:	e9 67 0a 00 00       	jmp    c01047b2 <__alltraps>

c0103d4b <vector1>:
.globl vector1
vector1:
  pushl $0
c0103d4b:	6a 00                	push   $0x0
  pushl $1
c0103d4d:	6a 01                	push   $0x1
  jmp __alltraps
c0103d4f:	e9 5e 0a 00 00       	jmp    c01047b2 <__alltraps>

c0103d54 <vector2>:
.globl vector2
vector2:
  pushl $0
c0103d54:	6a 00                	push   $0x0
  pushl $2
c0103d56:	6a 02                	push   $0x2
  jmp __alltraps
c0103d58:	e9 55 0a 00 00       	jmp    c01047b2 <__alltraps>

c0103d5d <vector3>:
.globl vector3
vector3:
  pushl $0
c0103d5d:	6a 00                	push   $0x0
  pushl $3
c0103d5f:	6a 03                	push   $0x3
  jmp __alltraps
c0103d61:	e9 4c 0a 00 00       	jmp    c01047b2 <__alltraps>

c0103d66 <vector4>:
.globl vector4
vector4:
  pushl $0
c0103d66:	6a 00                	push   $0x0
  pushl $4
c0103d68:	6a 04                	push   $0x4
  jmp __alltraps
c0103d6a:	e9 43 0a 00 00       	jmp    c01047b2 <__alltraps>

c0103d6f <vector5>:
.globl vector5
vector5:
  pushl $0
c0103d6f:	6a 00                	push   $0x0
  pushl $5
c0103d71:	6a 05                	push   $0x5
  jmp __alltraps
c0103d73:	e9 3a 0a 00 00       	jmp    c01047b2 <__alltraps>

c0103d78 <vector6>:
.globl vector6
vector6:
  pushl $0
c0103d78:	6a 00                	push   $0x0
  pushl $6
c0103d7a:	6a 06                	push   $0x6
  jmp __alltraps
c0103d7c:	e9 31 0a 00 00       	jmp    c01047b2 <__alltraps>

c0103d81 <vector7>:
.globl vector7
vector7:
  pushl $0
c0103d81:	6a 00                	push   $0x0
  pushl $7
c0103d83:	6a 07                	push   $0x7
  jmp __alltraps
c0103d85:	e9 28 0a 00 00       	jmp    c01047b2 <__alltraps>

c0103d8a <vector8>:
.globl vector8
vector8:
  pushl $8
c0103d8a:	6a 08                	push   $0x8
  jmp __alltraps
c0103d8c:	e9 21 0a 00 00       	jmp    c01047b2 <__alltraps>

c0103d91 <vector9>:
.globl vector9
vector9:
  pushl $9
c0103d91:	6a 09                	push   $0x9
  jmp __alltraps
c0103d93:	e9 1a 0a 00 00       	jmp    c01047b2 <__alltraps>

c0103d98 <vector10>:
.globl vector10
vector10:
  pushl $10
c0103d98:	6a 0a                	push   $0xa
  jmp __alltraps
c0103d9a:	e9 13 0a 00 00       	jmp    c01047b2 <__alltraps>

c0103d9f <vector11>:
.globl vector11
vector11:
  pushl $11
c0103d9f:	6a 0b                	push   $0xb
  jmp __alltraps
c0103da1:	e9 0c 0a 00 00       	jmp    c01047b2 <__alltraps>

c0103da6 <vector12>:
.globl vector12
vector12:
  pushl $12
c0103da6:	6a 0c                	push   $0xc
  jmp __alltraps
c0103da8:	e9 05 0a 00 00       	jmp    c01047b2 <__alltraps>

c0103dad <vector13>:
.globl vector13
vector13:
  pushl $13
c0103dad:	6a 0d                	push   $0xd
  jmp __alltraps
c0103daf:	e9 fe 09 00 00       	jmp    c01047b2 <__alltraps>

c0103db4 <vector14>:
.globl vector14
vector14:
  pushl $14
c0103db4:	6a 0e                	push   $0xe
  jmp __alltraps
c0103db6:	e9 f7 09 00 00       	jmp    c01047b2 <__alltraps>

c0103dbb <vector15>:
.globl vector15
vector15:
  pushl $0
c0103dbb:	6a 00                	push   $0x0
  pushl $15
c0103dbd:	6a 0f                	push   $0xf
  jmp __alltraps
c0103dbf:	e9 ee 09 00 00       	jmp    c01047b2 <__alltraps>

c0103dc4 <vector16>:
.globl vector16
vector16:
  pushl $0
c0103dc4:	6a 00                	push   $0x0
  pushl $16
c0103dc6:	6a 10                	push   $0x10
  jmp __alltraps
c0103dc8:	e9 e5 09 00 00       	jmp    c01047b2 <__alltraps>

c0103dcd <vector17>:
.globl vector17
vector17:
  pushl $17
c0103dcd:	6a 11                	push   $0x11
  jmp __alltraps
c0103dcf:	e9 de 09 00 00       	jmp    c01047b2 <__alltraps>

c0103dd4 <vector18>:
.globl vector18
vector18:
  pushl $0
c0103dd4:	6a 00                	push   $0x0
  pushl $18
c0103dd6:	6a 12                	push   $0x12
  jmp __alltraps
c0103dd8:	e9 d5 09 00 00       	jmp    c01047b2 <__alltraps>

c0103ddd <vector19>:
.globl vector19
vector19:
  pushl $0
c0103ddd:	6a 00                	push   $0x0
  pushl $19
c0103ddf:	6a 13                	push   $0x13
  jmp __alltraps
c0103de1:	e9 cc 09 00 00       	jmp    c01047b2 <__alltraps>

c0103de6 <vector20>:
.globl vector20
vector20:
  pushl $0
c0103de6:	6a 00                	push   $0x0
  pushl $20
c0103de8:	6a 14                	push   $0x14
  jmp __alltraps
c0103dea:	e9 c3 09 00 00       	jmp    c01047b2 <__alltraps>

c0103def <vector21>:
.globl vector21
vector21:
  pushl $0
c0103def:	6a 00                	push   $0x0
  pushl $21
c0103df1:	6a 15                	push   $0x15
  jmp __alltraps
c0103df3:	e9 ba 09 00 00       	jmp    c01047b2 <__alltraps>

c0103df8 <vector22>:
.globl vector22
vector22:
  pushl $0
c0103df8:	6a 00                	push   $0x0
  pushl $22
c0103dfa:	6a 16                	push   $0x16
  jmp __alltraps
c0103dfc:	e9 b1 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e01 <vector23>:
.globl vector23
vector23:
  pushl $0
c0103e01:	6a 00                	push   $0x0
  pushl $23
c0103e03:	6a 17                	push   $0x17
  jmp __alltraps
c0103e05:	e9 a8 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e0a <vector24>:
.globl vector24
vector24:
  pushl $0
c0103e0a:	6a 00                	push   $0x0
  pushl $24
c0103e0c:	6a 18                	push   $0x18
  jmp __alltraps
c0103e0e:	e9 9f 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e13 <vector25>:
.globl vector25
vector25:
  pushl $0
c0103e13:	6a 00                	push   $0x0
  pushl $25
c0103e15:	6a 19                	push   $0x19
  jmp __alltraps
c0103e17:	e9 96 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e1c <vector26>:
.globl vector26
vector26:
  pushl $0
c0103e1c:	6a 00                	push   $0x0
  pushl $26
c0103e1e:	6a 1a                	push   $0x1a
  jmp __alltraps
c0103e20:	e9 8d 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e25 <vector27>:
.globl vector27
vector27:
  pushl $0
c0103e25:	6a 00                	push   $0x0
  pushl $27
c0103e27:	6a 1b                	push   $0x1b
  jmp __alltraps
c0103e29:	e9 84 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e2e <vector28>:
.globl vector28
vector28:
  pushl $0
c0103e2e:	6a 00                	push   $0x0
  pushl $28
c0103e30:	6a 1c                	push   $0x1c
  jmp __alltraps
c0103e32:	e9 7b 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e37 <vector29>:
.globl vector29
vector29:
  pushl $0
c0103e37:	6a 00                	push   $0x0
  pushl $29
c0103e39:	6a 1d                	push   $0x1d
  jmp __alltraps
c0103e3b:	e9 72 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e40 <vector30>:
.globl vector30
vector30:
  pushl $0
c0103e40:	6a 00                	push   $0x0
  pushl $30
c0103e42:	6a 1e                	push   $0x1e
  jmp __alltraps
c0103e44:	e9 69 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e49 <vector31>:
.globl vector31
vector31:
  pushl $0
c0103e49:	6a 00                	push   $0x0
  pushl $31
c0103e4b:	6a 1f                	push   $0x1f
  jmp __alltraps
c0103e4d:	e9 60 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e52 <vector32>:
.globl vector32
vector32:
  pushl $0
c0103e52:	6a 00                	push   $0x0
  pushl $32
c0103e54:	6a 20                	push   $0x20
  jmp __alltraps
c0103e56:	e9 57 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e5b <vector33>:
.globl vector33
vector33:
  pushl $0
c0103e5b:	6a 00                	push   $0x0
  pushl $33
c0103e5d:	6a 21                	push   $0x21
  jmp __alltraps
c0103e5f:	e9 4e 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e64 <vector34>:
.globl vector34
vector34:
  pushl $0
c0103e64:	6a 00                	push   $0x0
  pushl $34
c0103e66:	6a 22                	push   $0x22
  jmp __alltraps
c0103e68:	e9 45 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e6d <vector35>:
.globl vector35
vector35:
  pushl $0
c0103e6d:	6a 00                	push   $0x0
  pushl $35
c0103e6f:	6a 23                	push   $0x23
  jmp __alltraps
c0103e71:	e9 3c 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e76 <vector36>:
.globl vector36
vector36:
  pushl $0
c0103e76:	6a 00                	push   $0x0
  pushl $36
c0103e78:	6a 24                	push   $0x24
  jmp __alltraps
c0103e7a:	e9 33 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e7f <vector37>:
.globl vector37
vector37:
  pushl $0
c0103e7f:	6a 00                	push   $0x0
  pushl $37
c0103e81:	6a 25                	push   $0x25
  jmp __alltraps
c0103e83:	e9 2a 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e88 <vector38>:
.globl vector38
vector38:
  pushl $0
c0103e88:	6a 00                	push   $0x0
  pushl $38
c0103e8a:	6a 26                	push   $0x26
  jmp __alltraps
c0103e8c:	e9 21 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e91 <vector39>:
.globl vector39
vector39:
  pushl $0
c0103e91:	6a 00                	push   $0x0
  pushl $39
c0103e93:	6a 27                	push   $0x27
  jmp __alltraps
c0103e95:	e9 18 09 00 00       	jmp    c01047b2 <__alltraps>

c0103e9a <vector40>:
.globl vector40
vector40:
  pushl $0
c0103e9a:	6a 00                	push   $0x0
  pushl $40
c0103e9c:	6a 28                	push   $0x28
  jmp __alltraps
c0103e9e:	e9 0f 09 00 00       	jmp    c01047b2 <__alltraps>

c0103ea3 <vector41>:
.globl vector41
vector41:
  pushl $0
c0103ea3:	6a 00                	push   $0x0
  pushl $41
c0103ea5:	6a 29                	push   $0x29
  jmp __alltraps
c0103ea7:	e9 06 09 00 00       	jmp    c01047b2 <__alltraps>

c0103eac <vector42>:
.globl vector42
vector42:
  pushl $0
c0103eac:	6a 00                	push   $0x0
  pushl $42
c0103eae:	6a 2a                	push   $0x2a
  jmp __alltraps
c0103eb0:	e9 fd 08 00 00       	jmp    c01047b2 <__alltraps>

c0103eb5 <vector43>:
.globl vector43
vector43:
  pushl $0
c0103eb5:	6a 00                	push   $0x0
  pushl $43
c0103eb7:	6a 2b                	push   $0x2b
  jmp __alltraps
c0103eb9:	e9 f4 08 00 00       	jmp    c01047b2 <__alltraps>

c0103ebe <vector44>:
.globl vector44
vector44:
  pushl $0
c0103ebe:	6a 00                	push   $0x0
  pushl $44
c0103ec0:	6a 2c                	push   $0x2c
  jmp __alltraps
c0103ec2:	e9 eb 08 00 00       	jmp    c01047b2 <__alltraps>

c0103ec7 <vector45>:
.globl vector45
vector45:
  pushl $0
c0103ec7:	6a 00                	push   $0x0
  pushl $45
c0103ec9:	6a 2d                	push   $0x2d
  jmp __alltraps
c0103ecb:	e9 e2 08 00 00       	jmp    c01047b2 <__alltraps>

c0103ed0 <vector46>:
.globl vector46
vector46:
  pushl $0
c0103ed0:	6a 00                	push   $0x0
  pushl $46
c0103ed2:	6a 2e                	push   $0x2e
  jmp __alltraps
c0103ed4:	e9 d9 08 00 00       	jmp    c01047b2 <__alltraps>

c0103ed9 <vector47>:
.globl vector47
vector47:
  pushl $0
c0103ed9:	6a 00                	push   $0x0
  pushl $47
c0103edb:	6a 2f                	push   $0x2f
  jmp __alltraps
c0103edd:	e9 d0 08 00 00       	jmp    c01047b2 <__alltraps>

c0103ee2 <vector48>:
.globl vector48
vector48:
  pushl $0
c0103ee2:	6a 00                	push   $0x0
  pushl $48
c0103ee4:	6a 30                	push   $0x30
  jmp __alltraps
c0103ee6:	e9 c7 08 00 00       	jmp    c01047b2 <__alltraps>

c0103eeb <vector49>:
.globl vector49
vector49:
  pushl $0
c0103eeb:	6a 00                	push   $0x0
  pushl $49
c0103eed:	6a 31                	push   $0x31
  jmp __alltraps
c0103eef:	e9 be 08 00 00       	jmp    c01047b2 <__alltraps>

c0103ef4 <vector50>:
.globl vector50
vector50:
  pushl $0
c0103ef4:	6a 00                	push   $0x0
  pushl $50
c0103ef6:	6a 32                	push   $0x32
  jmp __alltraps
c0103ef8:	e9 b5 08 00 00       	jmp    c01047b2 <__alltraps>

c0103efd <vector51>:
.globl vector51
vector51:
  pushl $0
c0103efd:	6a 00                	push   $0x0
  pushl $51
c0103eff:	6a 33                	push   $0x33
  jmp __alltraps
c0103f01:	e9 ac 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f06 <vector52>:
.globl vector52
vector52:
  pushl $0
c0103f06:	6a 00                	push   $0x0
  pushl $52
c0103f08:	6a 34                	push   $0x34
  jmp __alltraps
c0103f0a:	e9 a3 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f0f <vector53>:
.globl vector53
vector53:
  pushl $0
c0103f0f:	6a 00                	push   $0x0
  pushl $53
c0103f11:	6a 35                	push   $0x35
  jmp __alltraps
c0103f13:	e9 9a 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f18 <vector54>:
.globl vector54
vector54:
  pushl $0
c0103f18:	6a 00                	push   $0x0
  pushl $54
c0103f1a:	6a 36                	push   $0x36
  jmp __alltraps
c0103f1c:	e9 91 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f21 <vector55>:
.globl vector55
vector55:
  pushl $0
c0103f21:	6a 00                	push   $0x0
  pushl $55
c0103f23:	6a 37                	push   $0x37
  jmp __alltraps
c0103f25:	e9 88 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f2a <vector56>:
.globl vector56
vector56:
  pushl $0
c0103f2a:	6a 00                	push   $0x0
  pushl $56
c0103f2c:	6a 38                	push   $0x38
  jmp __alltraps
c0103f2e:	e9 7f 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f33 <vector57>:
.globl vector57
vector57:
  pushl $0
c0103f33:	6a 00                	push   $0x0
  pushl $57
c0103f35:	6a 39                	push   $0x39
  jmp __alltraps
c0103f37:	e9 76 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f3c <vector58>:
.globl vector58
vector58:
  pushl $0
c0103f3c:	6a 00                	push   $0x0
  pushl $58
c0103f3e:	6a 3a                	push   $0x3a
  jmp __alltraps
c0103f40:	e9 6d 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f45 <vector59>:
.globl vector59
vector59:
  pushl $0
c0103f45:	6a 00                	push   $0x0
  pushl $59
c0103f47:	6a 3b                	push   $0x3b
  jmp __alltraps
c0103f49:	e9 64 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f4e <vector60>:
.globl vector60
vector60:
  pushl $0
c0103f4e:	6a 00                	push   $0x0
  pushl $60
c0103f50:	6a 3c                	push   $0x3c
  jmp __alltraps
c0103f52:	e9 5b 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f57 <vector61>:
.globl vector61
vector61:
  pushl $0
c0103f57:	6a 00                	push   $0x0
  pushl $61
c0103f59:	6a 3d                	push   $0x3d
  jmp __alltraps
c0103f5b:	e9 52 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f60 <vector62>:
.globl vector62
vector62:
  pushl $0
c0103f60:	6a 00                	push   $0x0
  pushl $62
c0103f62:	6a 3e                	push   $0x3e
  jmp __alltraps
c0103f64:	e9 49 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f69 <vector63>:
.globl vector63
vector63:
  pushl $0
c0103f69:	6a 00                	push   $0x0
  pushl $63
c0103f6b:	6a 3f                	push   $0x3f
  jmp __alltraps
c0103f6d:	e9 40 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f72 <vector64>:
.globl vector64
vector64:
  pushl $0
c0103f72:	6a 00                	push   $0x0
  pushl $64
c0103f74:	6a 40                	push   $0x40
  jmp __alltraps
c0103f76:	e9 37 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f7b <vector65>:
.globl vector65
vector65:
  pushl $0
c0103f7b:	6a 00                	push   $0x0
  pushl $65
c0103f7d:	6a 41                	push   $0x41
  jmp __alltraps
c0103f7f:	e9 2e 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f84 <vector66>:
.globl vector66
vector66:
  pushl $0
c0103f84:	6a 00                	push   $0x0
  pushl $66
c0103f86:	6a 42                	push   $0x42
  jmp __alltraps
c0103f88:	e9 25 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f8d <vector67>:
.globl vector67
vector67:
  pushl $0
c0103f8d:	6a 00                	push   $0x0
  pushl $67
c0103f8f:	6a 43                	push   $0x43
  jmp __alltraps
c0103f91:	e9 1c 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f96 <vector68>:
.globl vector68
vector68:
  pushl $0
c0103f96:	6a 00                	push   $0x0
  pushl $68
c0103f98:	6a 44                	push   $0x44
  jmp __alltraps
c0103f9a:	e9 13 08 00 00       	jmp    c01047b2 <__alltraps>

c0103f9f <vector69>:
.globl vector69
vector69:
  pushl $0
c0103f9f:	6a 00                	push   $0x0
  pushl $69
c0103fa1:	6a 45                	push   $0x45
  jmp __alltraps
c0103fa3:	e9 0a 08 00 00       	jmp    c01047b2 <__alltraps>

c0103fa8 <vector70>:
.globl vector70
vector70:
  pushl $0
c0103fa8:	6a 00                	push   $0x0
  pushl $70
c0103faa:	6a 46                	push   $0x46
  jmp __alltraps
c0103fac:	e9 01 08 00 00       	jmp    c01047b2 <__alltraps>

c0103fb1 <vector71>:
.globl vector71
vector71:
  pushl $0
c0103fb1:	6a 00                	push   $0x0
  pushl $71
c0103fb3:	6a 47                	push   $0x47
  jmp __alltraps
c0103fb5:	e9 f8 07 00 00       	jmp    c01047b2 <__alltraps>

c0103fba <vector72>:
.globl vector72
vector72:
  pushl $0
c0103fba:	6a 00                	push   $0x0
  pushl $72
c0103fbc:	6a 48                	push   $0x48
  jmp __alltraps
c0103fbe:	e9 ef 07 00 00       	jmp    c01047b2 <__alltraps>

c0103fc3 <vector73>:
.globl vector73
vector73:
  pushl $0
c0103fc3:	6a 00                	push   $0x0
  pushl $73
c0103fc5:	6a 49                	push   $0x49
  jmp __alltraps
c0103fc7:	e9 e6 07 00 00       	jmp    c01047b2 <__alltraps>

c0103fcc <vector74>:
.globl vector74
vector74:
  pushl $0
c0103fcc:	6a 00                	push   $0x0
  pushl $74
c0103fce:	6a 4a                	push   $0x4a
  jmp __alltraps
c0103fd0:	e9 dd 07 00 00       	jmp    c01047b2 <__alltraps>

c0103fd5 <vector75>:
.globl vector75
vector75:
  pushl $0
c0103fd5:	6a 00                	push   $0x0
  pushl $75
c0103fd7:	6a 4b                	push   $0x4b
  jmp __alltraps
c0103fd9:	e9 d4 07 00 00       	jmp    c01047b2 <__alltraps>

c0103fde <vector76>:
.globl vector76
vector76:
  pushl $0
c0103fde:	6a 00                	push   $0x0
  pushl $76
c0103fe0:	6a 4c                	push   $0x4c
  jmp __alltraps
c0103fe2:	e9 cb 07 00 00       	jmp    c01047b2 <__alltraps>

c0103fe7 <vector77>:
.globl vector77
vector77:
  pushl $0
c0103fe7:	6a 00                	push   $0x0
  pushl $77
c0103fe9:	6a 4d                	push   $0x4d
  jmp __alltraps
c0103feb:	e9 c2 07 00 00       	jmp    c01047b2 <__alltraps>

c0103ff0 <vector78>:
.globl vector78
vector78:
  pushl $0
c0103ff0:	6a 00                	push   $0x0
  pushl $78
c0103ff2:	6a 4e                	push   $0x4e
  jmp __alltraps
c0103ff4:	e9 b9 07 00 00       	jmp    c01047b2 <__alltraps>

c0103ff9 <vector79>:
.globl vector79
vector79:
  pushl $0
c0103ff9:	6a 00                	push   $0x0
  pushl $79
c0103ffb:	6a 4f                	push   $0x4f
  jmp __alltraps
c0103ffd:	e9 b0 07 00 00       	jmp    c01047b2 <__alltraps>

c0104002 <vector80>:
.globl vector80
vector80:
  pushl $0
c0104002:	6a 00                	push   $0x0
  pushl $80
c0104004:	6a 50                	push   $0x50
  jmp __alltraps
c0104006:	e9 a7 07 00 00       	jmp    c01047b2 <__alltraps>

c010400b <vector81>:
.globl vector81
vector81:
  pushl $0
c010400b:	6a 00                	push   $0x0
  pushl $81
c010400d:	6a 51                	push   $0x51
  jmp __alltraps
c010400f:	e9 9e 07 00 00       	jmp    c01047b2 <__alltraps>

c0104014 <vector82>:
.globl vector82
vector82:
  pushl $0
c0104014:	6a 00                	push   $0x0
  pushl $82
c0104016:	6a 52                	push   $0x52
  jmp __alltraps
c0104018:	e9 95 07 00 00       	jmp    c01047b2 <__alltraps>

c010401d <vector83>:
.globl vector83
vector83:
  pushl $0
c010401d:	6a 00                	push   $0x0
  pushl $83
c010401f:	6a 53                	push   $0x53
  jmp __alltraps
c0104021:	e9 8c 07 00 00       	jmp    c01047b2 <__alltraps>

c0104026 <vector84>:
.globl vector84
vector84:
  pushl $0
c0104026:	6a 00                	push   $0x0
  pushl $84
c0104028:	6a 54                	push   $0x54
  jmp __alltraps
c010402a:	e9 83 07 00 00       	jmp    c01047b2 <__alltraps>

c010402f <vector85>:
.globl vector85
vector85:
  pushl $0
c010402f:	6a 00                	push   $0x0
  pushl $85
c0104031:	6a 55                	push   $0x55
  jmp __alltraps
c0104033:	e9 7a 07 00 00       	jmp    c01047b2 <__alltraps>

c0104038 <vector86>:
.globl vector86
vector86:
  pushl $0
c0104038:	6a 00                	push   $0x0
  pushl $86
c010403a:	6a 56                	push   $0x56
  jmp __alltraps
c010403c:	e9 71 07 00 00       	jmp    c01047b2 <__alltraps>

c0104041 <vector87>:
.globl vector87
vector87:
  pushl $0
c0104041:	6a 00                	push   $0x0
  pushl $87
c0104043:	6a 57                	push   $0x57
  jmp __alltraps
c0104045:	e9 68 07 00 00       	jmp    c01047b2 <__alltraps>

c010404a <vector88>:
.globl vector88
vector88:
  pushl $0
c010404a:	6a 00                	push   $0x0
  pushl $88
c010404c:	6a 58                	push   $0x58
  jmp __alltraps
c010404e:	e9 5f 07 00 00       	jmp    c01047b2 <__alltraps>

c0104053 <vector89>:
.globl vector89
vector89:
  pushl $0
c0104053:	6a 00                	push   $0x0
  pushl $89
c0104055:	6a 59                	push   $0x59
  jmp __alltraps
c0104057:	e9 56 07 00 00       	jmp    c01047b2 <__alltraps>

c010405c <vector90>:
.globl vector90
vector90:
  pushl $0
c010405c:	6a 00                	push   $0x0
  pushl $90
c010405e:	6a 5a                	push   $0x5a
  jmp __alltraps
c0104060:	e9 4d 07 00 00       	jmp    c01047b2 <__alltraps>

c0104065 <vector91>:
.globl vector91
vector91:
  pushl $0
c0104065:	6a 00                	push   $0x0
  pushl $91
c0104067:	6a 5b                	push   $0x5b
  jmp __alltraps
c0104069:	e9 44 07 00 00       	jmp    c01047b2 <__alltraps>

c010406e <vector92>:
.globl vector92
vector92:
  pushl $0
c010406e:	6a 00                	push   $0x0
  pushl $92
c0104070:	6a 5c                	push   $0x5c
  jmp __alltraps
c0104072:	e9 3b 07 00 00       	jmp    c01047b2 <__alltraps>

c0104077 <vector93>:
.globl vector93
vector93:
  pushl $0
c0104077:	6a 00                	push   $0x0
  pushl $93
c0104079:	6a 5d                	push   $0x5d
  jmp __alltraps
c010407b:	e9 32 07 00 00       	jmp    c01047b2 <__alltraps>

c0104080 <vector94>:
.globl vector94
vector94:
  pushl $0
c0104080:	6a 00                	push   $0x0
  pushl $94
c0104082:	6a 5e                	push   $0x5e
  jmp __alltraps
c0104084:	e9 29 07 00 00       	jmp    c01047b2 <__alltraps>

c0104089 <vector95>:
.globl vector95
vector95:
  pushl $0
c0104089:	6a 00                	push   $0x0
  pushl $95
c010408b:	6a 5f                	push   $0x5f
  jmp __alltraps
c010408d:	e9 20 07 00 00       	jmp    c01047b2 <__alltraps>

c0104092 <vector96>:
.globl vector96
vector96:
  pushl $0
c0104092:	6a 00                	push   $0x0
  pushl $96
c0104094:	6a 60                	push   $0x60
  jmp __alltraps
c0104096:	e9 17 07 00 00       	jmp    c01047b2 <__alltraps>

c010409b <vector97>:
.globl vector97
vector97:
  pushl $0
c010409b:	6a 00                	push   $0x0
  pushl $97
c010409d:	6a 61                	push   $0x61
  jmp __alltraps
c010409f:	e9 0e 07 00 00       	jmp    c01047b2 <__alltraps>

c01040a4 <vector98>:
.globl vector98
vector98:
  pushl $0
c01040a4:	6a 00                	push   $0x0
  pushl $98
c01040a6:	6a 62                	push   $0x62
  jmp __alltraps
c01040a8:	e9 05 07 00 00       	jmp    c01047b2 <__alltraps>

c01040ad <vector99>:
.globl vector99
vector99:
  pushl $0
c01040ad:	6a 00                	push   $0x0
  pushl $99
c01040af:	6a 63                	push   $0x63
  jmp __alltraps
c01040b1:	e9 fc 06 00 00       	jmp    c01047b2 <__alltraps>

c01040b6 <vector100>:
.globl vector100
vector100:
  pushl $0
c01040b6:	6a 00                	push   $0x0
  pushl $100
c01040b8:	6a 64                	push   $0x64
  jmp __alltraps
c01040ba:	e9 f3 06 00 00       	jmp    c01047b2 <__alltraps>

c01040bf <vector101>:
.globl vector101
vector101:
  pushl $0
c01040bf:	6a 00                	push   $0x0
  pushl $101
c01040c1:	6a 65                	push   $0x65
  jmp __alltraps
c01040c3:	e9 ea 06 00 00       	jmp    c01047b2 <__alltraps>

c01040c8 <vector102>:
.globl vector102
vector102:
  pushl $0
c01040c8:	6a 00                	push   $0x0
  pushl $102
c01040ca:	6a 66                	push   $0x66
  jmp __alltraps
c01040cc:	e9 e1 06 00 00       	jmp    c01047b2 <__alltraps>

c01040d1 <vector103>:
.globl vector103
vector103:
  pushl $0
c01040d1:	6a 00                	push   $0x0
  pushl $103
c01040d3:	6a 67                	push   $0x67
  jmp __alltraps
c01040d5:	e9 d8 06 00 00       	jmp    c01047b2 <__alltraps>

c01040da <vector104>:
.globl vector104
vector104:
  pushl $0
c01040da:	6a 00                	push   $0x0
  pushl $104
c01040dc:	6a 68                	push   $0x68
  jmp __alltraps
c01040de:	e9 cf 06 00 00       	jmp    c01047b2 <__alltraps>

c01040e3 <vector105>:
.globl vector105
vector105:
  pushl $0
c01040e3:	6a 00                	push   $0x0
  pushl $105
c01040e5:	6a 69                	push   $0x69
  jmp __alltraps
c01040e7:	e9 c6 06 00 00       	jmp    c01047b2 <__alltraps>

c01040ec <vector106>:
.globl vector106
vector106:
  pushl $0
c01040ec:	6a 00                	push   $0x0
  pushl $106
c01040ee:	6a 6a                	push   $0x6a
  jmp __alltraps
c01040f0:	e9 bd 06 00 00       	jmp    c01047b2 <__alltraps>

c01040f5 <vector107>:
.globl vector107
vector107:
  pushl $0
c01040f5:	6a 00                	push   $0x0
  pushl $107
c01040f7:	6a 6b                	push   $0x6b
  jmp __alltraps
c01040f9:	e9 b4 06 00 00       	jmp    c01047b2 <__alltraps>

c01040fe <vector108>:
.globl vector108
vector108:
  pushl $0
c01040fe:	6a 00                	push   $0x0
  pushl $108
c0104100:	6a 6c                	push   $0x6c
  jmp __alltraps
c0104102:	e9 ab 06 00 00       	jmp    c01047b2 <__alltraps>

c0104107 <vector109>:
.globl vector109
vector109:
  pushl $0
c0104107:	6a 00                	push   $0x0
  pushl $109
c0104109:	6a 6d                	push   $0x6d
  jmp __alltraps
c010410b:	e9 a2 06 00 00       	jmp    c01047b2 <__alltraps>

c0104110 <vector110>:
.globl vector110
vector110:
  pushl $0
c0104110:	6a 00                	push   $0x0
  pushl $110
c0104112:	6a 6e                	push   $0x6e
  jmp __alltraps
c0104114:	e9 99 06 00 00       	jmp    c01047b2 <__alltraps>

c0104119 <vector111>:
.globl vector111
vector111:
  pushl $0
c0104119:	6a 00                	push   $0x0
  pushl $111
c010411b:	6a 6f                	push   $0x6f
  jmp __alltraps
c010411d:	e9 90 06 00 00       	jmp    c01047b2 <__alltraps>

c0104122 <vector112>:
.globl vector112
vector112:
  pushl $0
c0104122:	6a 00                	push   $0x0
  pushl $112
c0104124:	6a 70                	push   $0x70
  jmp __alltraps
c0104126:	e9 87 06 00 00       	jmp    c01047b2 <__alltraps>

c010412b <vector113>:
.globl vector113
vector113:
  pushl $0
c010412b:	6a 00                	push   $0x0
  pushl $113
c010412d:	6a 71                	push   $0x71
  jmp __alltraps
c010412f:	e9 7e 06 00 00       	jmp    c01047b2 <__alltraps>

c0104134 <vector114>:
.globl vector114
vector114:
  pushl $0
c0104134:	6a 00                	push   $0x0
  pushl $114
c0104136:	6a 72                	push   $0x72
  jmp __alltraps
c0104138:	e9 75 06 00 00       	jmp    c01047b2 <__alltraps>

c010413d <vector115>:
.globl vector115
vector115:
  pushl $0
c010413d:	6a 00                	push   $0x0
  pushl $115
c010413f:	6a 73                	push   $0x73
  jmp __alltraps
c0104141:	e9 6c 06 00 00       	jmp    c01047b2 <__alltraps>

c0104146 <vector116>:
.globl vector116
vector116:
  pushl $0
c0104146:	6a 00                	push   $0x0
  pushl $116
c0104148:	6a 74                	push   $0x74
  jmp __alltraps
c010414a:	e9 63 06 00 00       	jmp    c01047b2 <__alltraps>

c010414f <vector117>:
.globl vector117
vector117:
  pushl $0
c010414f:	6a 00                	push   $0x0
  pushl $117
c0104151:	6a 75                	push   $0x75
  jmp __alltraps
c0104153:	e9 5a 06 00 00       	jmp    c01047b2 <__alltraps>

c0104158 <vector118>:
.globl vector118
vector118:
  pushl $0
c0104158:	6a 00                	push   $0x0
  pushl $118
c010415a:	6a 76                	push   $0x76
  jmp __alltraps
c010415c:	e9 51 06 00 00       	jmp    c01047b2 <__alltraps>

c0104161 <vector119>:
.globl vector119
vector119:
  pushl $0
c0104161:	6a 00                	push   $0x0
  pushl $119
c0104163:	6a 77                	push   $0x77
  jmp __alltraps
c0104165:	e9 48 06 00 00       	jmp    c01047b2 <__alltraps>

c010416a <vector120>:
.globl vector120
vector120:
  pushl $0
c010416a:	6a 00                	push   $0x0
  pushl $120
c010416c:	6a 78                	push   $0x78
  jmp __alltraps
c010416e:	e9 3f 06 00 00       	jmp    c01047b2 <__alltraps>

c0104173 <vector121>:
.globl vector121
vector121:
  pushl $0
c0104173:	6a 00                	push   $0x0
  pushl $121
c0104175:	6a 79                	push   $0x79
  jmp __alltraps
c0104177:	e9 36 06 00 00       	jmp    c01047b2 <__alltraps>

c010417c <vector122>:
.globl vector122
vector122:
  pushl $0
c010417c:	6a 00                	push   $0x0
  pushl $122
c010417e:	6a 7a                	push   $0x7a
  jmp __alltraps
c0104180:	e9 2d 06 00 00       	jmp    c01047b2 <__alltraps>

c0104185 <vector123>:
.globl vector123
vector123:
  pushl $0
c0104185:	6a 00                	push   $0x0
  pushl $123
c0104187:	6a 7b                	push   $0x7b
  jmp __alltraps
c0104189:	e9 24 06 00 00       	jmp    c01047b2 <__alltraps>

c010418e <vector124>:
.globl vector124
vector124:
  pushl $0
c010418e:	6a 00                	push   $0x0
  pushl $124
c0104190:	6a 7c                	push   $0x7c
  jmp __alltraps
c0104192:	e9 1b 06 00 00       	jmp    c01047b2 <__alltraps>

c0104197 <vector125>:
.globl vector125
vector125:
  pushl $0
c0104197:	6a 00                	push   $0x0
  pushl $125
c0104199:	6a 7d                	push   $0x7d
  jmp __alltraps
c010419b:	e9 12 06 00 00       	jmp    c01047b2 <__alltraps>

c01041a0 <vector126>:
.globl vector126
vector126:
  pushl $0
c01041a0:	6a 00                	push   $0x0
  pushl $126
c01041a2:	6a 7e                	push   $0x7e
  jmp __alltraps
c01041a4:	e9 09 06 00 00       	jmp    c01047b2 <__alltraps>

c01041a9 <vector127>:
.globl vector127
vector127:
  pushl $0
c01041a9:	6a 00                	push   $0x0
  pushl $127
c01041ab:	6a 7f                	push   $0x7f
  jmp __alltraps
c01041ad:	e9 00 06 00 00       	jmp    c01047b2 <__alltraps>

c01041b2 <vector128>:
.globl vector128
vector128:
  pushl $0
c01041b2:	6a 00                	push   $0x0
  pushl $128
c01041b4:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c01041b9:	e9 f4 05 00 00       	jmp    c01047b2 <__alltraps>

c01041be <vector129>:
.globl vector129
vector129:
  pushl $0
c01041be:	6a 00                	push   $0x0
  pushl $129
c01041c0:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c01041c5:	e9 e8 05 00 00       	jmp    c01047b2 <__alltraps>

c01041ca <vector130>:
.globl vector130
vector130:
  pushl $0
c01041ca:	6a 00                	push   $0x0
  pushl $130
c01041cc:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c01041d1:	e9 dc 05 00 00       	jmp    c01047b2 <__alltraps>

c01041d6 <vector131>:
.globl vector131
vector131:
  pushl $0
c01041d6:	6a 00                	push   $0x0
  pushl $131
c01041d8:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c01041dd:	e9 d0 05 00 00       	jmp    c01047b2 <__alltraps>

c01041e2 <vector132>:
.globl vector132
vector132:
  pushl $0
c01041e2:	6a 00                	push   $0x0
  pushl $132
c01041e4:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c01041e9:	e9 c4 05 00 00       	jmp    c01047b2 <__alltraps>

c01041ee <vector133>:
.globl vector133
vector133:
  pushl $0
c01041ee:	6a 00                	push   $0x0
  pushl $133
c01041f0:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c01041f5:	e9 b8 05 00 00       	jmp    c01047b2 <__alltraps>

c01041fa <vector134>:
.globl vector134
vector134:
  pushl $0
c01041fa:	6a 00                	push   $0x0
  pushl $134
c01041fc:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0104201:	e9 ac 05 00 00       	jmp    c01047b2 <__alltraps>

c0104206 <vector135>:
.globl vector135
vector135:
  pushl $0
c0104206:	6a 00                	push   $0x0
  pushl $135
c0104208:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c010420d:	e9 a0 05 00 00       	jmp    c01047b2 <__alltraps>

c0104212 <vector136>:
.globl vector136
vector136:
  pushl $0
c0104212:	6a 00                	push   $0x0
  pushl $136
c0104214:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0104219:	e9 94 05 00 00       	jmp    c01047b2 <__alltraps>

c010421e <vector137>:
.globl vector137
vector137:
  pushl $0
c010421e:	6a 00                	push   $0x0
  pushl $137
c0104220:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0104225:	e9 88 05 00 00       	jmp    c01047b2 <__alltraps>

c010422a <vector138>:
.globl vector138
vector138:
  pushl $0
c010422a:	6a 00                	push   $0x0
  pushl $138
c010422c:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0104231:	e9 7c 05 00 00       	jmp    c01047b2 <__alltraps>

c0104236 <vector139>:
.globl vector139
vector139:
  pushl $0
c0104236:	6a 00                	push   $0x0
  pushl $139
c0104238:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c010423d:	e9 70 05 00 00       	jmp    c01047b2 <__alltraps>

c0104242 <vector140>:
.globl vector140
vector140:
  pushl $0
c0104242:	6a 00                	push   $0x0
  pushl $140
c0104244:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0104249:	e9 64 05 00 00       	jmp    c01047b2 <__alltraps>

c010424e <vector141>:
.globl vector141
vector141:
  pushl $0
c010424e:	6a 00                	push   $0x0
  pushl $141
c0104250:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0104255:	e9 58 05 00 00       	jmp    c01047b2 <__alltraps>

c010425a <vector142>:
.globl vector142
vector142:
  pushl $0
c010425a:	6a 00                	push   $0x0
  pushl $142
c010425c:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0104261:	e9 4c 05 00 00       	jmp    c01047b2 <__alltraps>

c0104266 <vector143>:
.globl vector143
vector143:
  pushl $0
c0104266:	6a 00                	push   $0x0
  pushl $143
c0104268:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c010426d:	e9 40 05 00 00       	jmp    c01047b2 <__alltraps>

c0104272 <vector144>:
.globl vector144
vector144:
  pushl $0
c0104272:	6a 00                	push   $0x0
  pushl $144
c0104274:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0104279:	e9 34 05 00 00       	jmp    c01047b2 <__alltraps>

c010427e <vector145>:
.globl vector145
vector145:
  pushl $0
c010427e:	6a 00                	push   $0x0
  pushl $145
c0104280:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0104285:	e9 28 05 00 00       	jmp    c01047b2 <__alltraps>

c010428a <vector146>:
.globl vector146
vector146:
  pushl $0
c010428a:	6a 00                	push   $0x0
  pushl $146
c010428c:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0104291:	e9 1c 05 00 00       	jmp    c01047b2 <__alltraps>

c0104296 <vector147>:
.globl vector147
vector147:
  pushl $0
c0104296:	6a 00                	push   $0x0
  pushl $147
c0104298:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c010429d:	e9 10 05 00 00       	jmp    c01047b2 <__alltraps>

c01042a2 <vector148>:
.globl vector148
vector148:
  pushl $0
c01042a2:	6a 00                	push   $0x0
  pushl $148
c01042a4:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c01042a9:	e9 04 05 00 00       	jmp    c01047b2 <__alltraps>

c01042ae <vector149>:
.globl vector149
vector149:
  pushl $0
c01042ae:	6a 00                	push   $0x0
  pushl $149
c01042b0:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c01042b5:	e9 f8 04 00 00       	jmp    c01047b2 <__alltraps>

c01042ba <vector150>:
.globl vector150
vector150:
  pushl $0
c01042ba:	6a 00                	push   $0x0
  pushl $150
c01042bc:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01042c1:	e9 ec 04 00 00       	jmp    c01047b2 <__alltraps>

c01042c6 <vector151>:
.globl vector151
vector151:
  pushl $0
c01042c6:	6a 00                	push   $0x0
  pushl $151
c01042c8:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01042cd:	e9 e0 04 00 00       	jmp    c01047b2 <__alltraps>

c01042d2 <vector152>:
.globl vector152
vector152:
  pushl $0
c01042d2:	6a 00                	push   $0x0
  pushl $152
c01042d4:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01042d9:	e9 d4 04 00 00       	jmp    c01047b2 <__alltraps>

c01042de <vector153>:
.globl vector153
vector153:
  pushl $0
c01042de:	6a 00                	push   $0x0
  pushl $153
c01042e0:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01042e5:	e9 c8 04 00 00       	jmp    c01047b2 <__alltraps>

c01042ea <vector154>:
.globl vector154
vector154:
  pushl $0
c01042ea:	6a 00                	push   $0x0
  pushl $154
c01042ec:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01042f1:	e9 bc 04 00 00       	jmp    c01047b2 <__alltraps>

c01042f6 <vector155>:
.globl vector155
vector155:
  pushl $0
c01042f6:	6a 00                	push   $0x0
  pushl $155
c01042f8:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01042fd:	e9 b0 04 00 00       	jmp    c01047b2 <__alltraps>

c0104302 <vector156>:
.globl vector156
vector156:
  pushl $0
c0104302:	6a 00                	push   $0x0
  pushl $156
c0104304:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c0104309:	e9 a4 04 00 00       	jmp    c01047b2 <__alltraps>

c010430e <vector157>:
.globl vector157
vector157:
  pushl $0
c010430e:	6a 00                	push   $0x0
  pushl $157
c0104310:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0104315:	e9 98 04 00 00       	jmp    c01047b2 <__alltraps>

c010431a <vector158>:
.globl vector158
vector158:
  pushl $0
c010431a:	6a 00                	push   $0x0
  pushl $158
c010431c:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0104321:	e9 8c 04 00 00       	jmp    c01047b2 <__alltraps>

c0104326 <vector159>:
.globl vector159
vector159:
  pushl $0
c0104326:	6a 00                	push   $0x0
  pushl $159
c0104328:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c010432d:	e9 80 04 00 00       	jmp    c01047b2 <__alltraps>

c0104332 <vector160>:
.globl vector160
vector160:
  pushl $0
c0104332:	6a 00                	push   $0x0
  pushl $160
c0104334:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0104339:	e9 74 04 00 00       	jmp    c01047b2 <__alltraps>

c010433e <vector161>:
.globl vector161
vector161:
  pushl $0
c010433e:	6a 00                	push   $0x0
  pushl $161
c0104340:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0104345:	e9 68 04 00 00       	jmp    c01047b2 <__alltraps>

c010434a <vector162>:
.globl vector162
vector162:
  pushl $0
c010434a:	6a 00                	push   $0x0
  pushl $162
c010434c:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0104351:	e9 5c 04 00 00       	jmp    c01047b2 <__alltraps>

c0104356 <vector163>:
.globl vector163
vector163:
  pushl $0
c0104356:	6a 00                	push   $0x0
  pushl $163
c0104358:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c010435d:	e9 50 04 00 00       	jmp    c01047b2 <__alltraps>

c0104362 <vector164>:
.globl vector164
vector164:
  pushl $0
c0104362:	6a 00                	push   $0x0
  pushl $164
c0104364:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c0104369:	e9 44 04 00 00       	jmp    c01047b2 <__alltraps>

c010436e <vector165>:
.globl vector165
vector165:
  pushl $0
c010436e:	6a 00                	push   $0x0
  pushl $165
c0104370:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0104375:	e9 38 04 00 00       	jmp    c01047b2 <__alltraps>

c010437a <vector166>:
.globl vector166
vector166:
  pushl $0
c010437a:	6a 00                	push   $0x0
  pushl $166
c010437c:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0104381:	e9 2c 04 00 00       	jmp    c01047b2 <__alltraps>

c0104386 <vector167>:
.globl vector167
vector167:
  pushl $0
c0104386:	6a 00                	push   $0x0
  pushl $167
c0104388:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c010438d:	e9 20 04 00 00       	jmp    c01047b2 <__alltraps>

c0104392 <vector168>:
.globl vector168
vector168:
  pushl $0
c0104392:	6a 00                	push   $0x0
  pushl $168
c0104394:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c0104399:	e9 14 04 00 00       	jmp    c01047b2 <__alltraps>

c010439e <vector169>:
.globl vector169
vector169:
  pushl $0
c010439e:	6a 00                	push   $0x0
  pushl $169
c01043a0:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01043a5:	e9 08 04 00 00       	jmp    c01047b2 <__alltraps>

c01043aa <vector170>:
.globl vector170
vector170:
  pushl $0
c01043aa:	6a 00                	push   $0x0
  pushl $170
c01043ac:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01043b1:	e9 fc 03 00 00       	jmp    c01047b2 <__alltraps>

c01043b6 <vector171>:
.globl vector171
vector171:
  pushl $0
c01043b6:	6a 00                	push   $0x0
  pushl $171
c01043b8:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01043bd:	e9 f0 03 00 00       	jmp    c01047b2 <__alltraps>

c01043c2 <vector172>:
.globl vector172
vector172:
  pushl $0
c01043c2:	6a 00                	push   $0x0
  pushl $172
c01043c4:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01043c9:	e9 e4 03 00 00       	jmp    c01047b2 <__alltraps>

c01043ce <vector173>:
.globl vector173
vector173:
  pushl $0
c01043ce:	6a 00                	push   $0x0
  pushl $173
c01043d0:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01043d5:	e9 d8 03 00 00       	jmp    c01047b2 <__alltraps>

c01043da <vector174>:
.globl vector174
vector174:
  pushl $0
c01043da:	6a 00                	push   $0x0
  pushl $174
c01043dc:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01043e1:	e9 cc 03 00 00       	jmp    c01047b2 <__alltraps>

c01043e6 <vector175>:
.globl vector175
vector175:
  pushl $0
c01043e6:	6a 00                	push   $0x0
  pushl $175
c01043e8:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01043ed:	e9 c0 03 00 00       	jmp    c01047b2 <__alltraps>

c01043f2 <vector176>:
.globl vector176
vector176:
  pushl $0
c01043f2:	6a 00                	push   $0x0
  pushl $176
c01043f4:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01043f9:	e9 b4 03 00 00       	jmp    c01047b2 <__alltraps>

c01043fe <vector177>:
.globl vector177
vector177:
  pushl $0
c01043fe:	6a 00                	push   $0x0
  pushl $177
c0104400:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0104405:	e9 a8 03 00 00       	jmp    c01047b2 <__alltraps>

c010440a <vector178>:
.globl vector178
vector178:
  pushl $0
c010440a:	6a 00                	push   $0x0
  pushl $178
c010440c:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0104411:	e9 9c 03 00 00       	jmp    c01047b2 <__alltraps>

c0104416 <vector179>:
.globl vector179
vector179:
  pushl $0
c0104416:	6a 00                	push   $0x0
  pushl $179
c0104418:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c010441d:	e9 90 03 00 00       	jmp    c01047b2 <__alltraps>

c0104422 <vector180>:
.globl vector180
vector180:
  pushl $0
c0104422:	6a 00                	push   $0x0
  pushl $180
c0104424:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0104429:	e9 84 03 00 00       	jmp    c01047b2 <__alltraps>

c010442e <vector181>:
.globl vector181
vector181:
  pushl $0
c010442e:	6a 00                	push   $0x0
  pushl $181
c0104430:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0104435:	e9 78 03 00 00       	jmp    c01047b2 <__alltraps>

c010443a <vector182>:
.globl vector182
vector182:
  pushl $0
c010443a:	6a 00                	push   $0x0
  pushl $182
c010443c:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0104441:	e9 6c 03 00 00       	jmp    c01047b2 <__alltraps>

c0104446 <vector183>:
.globl vector183
vector183:
  pushl $0
c0104446:	6a 00                	push   $0x0
  pushl $183
c0104448:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c010444d:	e9 60 03 00 00       	jmp    c01047b2 <__alltraps>

c0104452 <vector184>:
.globl vector184
vector184:
  pushl $0
c0104452:	6a 00                	push   $0x0
  pushl $184
c0104454:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0104459:	e9 54 03 00 00       	jmp    c01047b2 <__alltraps>

c010445e <vector185>:
.globl vector185
vector185:
  pushl $0
c010445e:	6a 00                	push   $0x0
  pushl $185
c0104460:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0104465:	e9 48 03 00 00       	jmp    c01047b2 <__alltraps>

c010446a <vector186>:
.globl vector186
vector186:
  pushl $0
c010446a:	6a 00                	push   $0x0
  pushl $186
c010446c:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0104471:	e9 3c 03 00 00       	jmp    c01047b2 <__alltraps>

c0104476 <vector187>:
.globl vector187
vector187:
  pushl $0
c0104476:	6a 00                	push   $0x0
  pushl $187
c0104478:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c010447d:	e9 30 03 00 00       	jmp    c01047b2 <__alltraps>

c0104482 <vector188>:
.globl vector188
vector188:
  pushl $0
c0104482:	6a 00                	push   $0x0
  pushl $188
c0104484:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c0104489:	e9 24 03 00 00       	jmp    c01047b2 <__alltraps>

c010448e <vector189>:
.globl vector189
vector189:
  pushl $0
c010448e:	6a 00                	push   $0x0
  pushl $189
c0104490:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c0104495:	e9 18 03 00 00       	jmp    c01047b2 <__alltraps>

c010449a <vector190>:
.globl vector190
vector190:
  pushl $0
c010449a:	6a 00                	push   $0x0
  pushl $190
c010449c:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01044a1:	e9 0c 03 00 00       	jmp    c01047b2 <__alltraps>

c01044a6 <vector191>:
.globl vector191
vector191:
  pushl $0
c01044a6:	6a 00                	push   $0x0
  pushl $191
c01044a8:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01044ad:	e9 00 03 00 00       	jmp    c01047b2 <__alltraps>

c01044b2 <vector192>:
.globl vector192
vector192:
  pushl $0
c01044b2:	6a 00                	push   $0x0
  pushl $192
c01044b4:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01044b9:	e9 f4 02 00 00       	jmp    c01047b2 <__alltraps>

c01044be <vector193>:
.globl vector193
vector193:
  pushl $0
c01044be:	6a 00                	push   $0x0
  pushl $193
c01044c0:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01044c5:	e9 e8 02 00 00       	jmp    c01047b2 <__alltraps>

c01044ca <vector194>:
.globl vector194
vector194:
  pushl $0
c01044ca:	6a 00                	push   $0x0
  pushl $194
c01044cc:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01044d1:	e9 dc 02 00 00       	jmp    c01047b2 <__alltraps>

c01044d6 <vector195>:
.globl vector195
vector195:
  pushl $0
c01044d6:	6a 00                	push   $0x0
  pushl $195
c01044d8:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01044dd:	e9 d0 02 00 00       	jmp    c01047b2 <__alltraps>

c01044e2 <vector196>:
.globl vector196
vector196:
  pushl $0
c01044e2:	6a 00                	push   $0x0
  pushl $196
c01044e4:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01044e9:	e9 c4 02 00 00       	jmp    c01047b2 <__alltraps>

c01044ee <vector197>:
.globl vector197
vector197:
  pushl $0
c01044ee:	6a 00                	push   $0x0
  pushl $197
c01044f0:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01044f5:	e9 b8 02 00 00       	jmp    c01047b2 <__alltraps>

c01044fa <vector198>:
.globl vector198
vector198:
  pushl $0
c01044fa:	6a 00                	push   $0x0
  pushl $198
c01044fc:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0104501:	e9 ac 02 00 00       	jmp    c01047b2 <__alltraps>

c0104506 <vector199>:
.globl vector199
vector199:
  pushl $0
c0104506:	6a 00                	push   $0x0
  pushl $199
c0104508:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c010450d:	e9 a0 02 00 00       	jmp    c01047b2 <__alltraps>

c0104512 <vector200>:
.globl vector200
vector200:
  pushl $0
c0104512:	6a 00                	push   $0x0
  pushl $200
c0104514:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0104519:	e9 94 02 00 00       	jmp    c01047b2 <__alltraps>

c010451e <vector201>:
.globl vector201
vector201:
  pushl $0
c010451e:	6a 00                	push   $0x0
  pushl $201
c0104520:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0104525:	e9 88 02 00 00       	jmp    c01047b2 <__alltraps>

c010452a <vector202>:
.globl vector202
vector202:
  pushl $0
c010452a:	6a 00                	push   $0x0
  pushl $202
c010452c:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0104531:	e9 7c 02 00 00       	jmp    c01047b2 <__alltraps>

c0104536 <vector203>:
.globl vector203
vector203:
  pushl $0
c0104536:	6a 00                	push   $0x0
  pushl $203
c0104538:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c010453d:	e9 70 02 00 00       	jmp    c01047b2 <__alltraps>

c0104542 <vector204>:
.globl vector204
vector204:
  pushl $0
c0104542:	6a 00                	push   $0x0
  pushl $204
c0104544:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0104549:	e9 64 02 00 00       	jmp    c01047b2 <__alltraps>

c010454e <vector205>:
.globl vector205
vector205:
  pushl $0
c010454e:	6a 00                	push   $0x0
  pushl $205
c0104550:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0104555:	e9 58 02 00 00       	jmp    c01047b2 <__alltraps>

c010455a <vector206>:
.globl vector206
vector206:
  pushl $0
c010455a:	6a 00                	push   $0x0
  pushl $206
c010455c:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0104561:	e9 4c 02 00 00       	jmp    c01047b2 <__alltraps>

c0104566 <vector207>:
.globl vector207
vector207:
  pushl $0
c0104566:	6a 00                	push   $0x0
  pushl $207
c0104568:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c010456d:	e9 40 02 00 00       	jmp    c01047b2 <__alltraps>

c0104572 <vector208>:
.globl vector208
vector208:
  pushl $0
c0104572:	6a 00                	push   $0x0
  pushl $208
c0104574:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c0104579:	e9 34 02 00 00       	jmp    c01047b2 <__alltraps>

c010457e <vector209>:
.globl vector209
vector209:
  pushl $0
c010457e:	6a 00                	push   $0x0
  pushl $209
c0104580:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c0104585:	e9 28 02 00 00       	jmp    c01047b2 <__alltraps>

c010458a <vector210>:
.globl vector210
vector210:
  pushl $0
c010458a:	6a 00                	push   $0x0
  pushl $210
c010458c:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0104591:	e9 1c 02 00 00       	jmp    c01047b2 <__alltraps>

c0104596 <vector211>:
.globl vector211
vector211:
  pushl $0
c0104596:	6a 00                	push   $0x0
  pushl $211
c0104598:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c010459d:	e9 10 02 00 00       	jmp    c01047b2 <__alltraps>

c01045a2 <vector212>:
.globl vector212
vector212:
  pushl $0
c01045a2:	6a 00                	push   $0x0
  pushl $212
c01045a4:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01045a9:	e9 04 02 00 00       	jmp    c01047b2 <__alltraps>

c01045ae <vector213>:
.globl vector213
vector213:
  pushl $0
c01045ae:	6a 00                	push   $0x0
  pushl $213
c01045b0:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01045b5:	e9 f8 01 00 00       	jmp    c01047b2 <__alltraps>

c01045ba <vector214>:
.globl vector214
vector214:
  pushl $0
c01045ba:	6a 00                	push   $0x0
  pushl $214
c01045bc:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01045c1:	e9 ec 01 00 00       	jmp    c01047b2 <__alltraps>

c01045c6 <vector215>:
.globl vector215
vector215:
  pushl $0
c01045c6:	6a 00                	push   $0x0
  pushl $215
c01045c8:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01045cd:	e9 e0 01 00 00       	jmp    c01047b2 <__alltraps>

c01045d2 <vector216>:
.globl vector216
vector216:
  pushl $0
c01045d2:	6a 00                	push   $0x0
  pushl $216
c01045d4:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01045d9:	e9 d4 01 00 00       	jmp    c01047b2 <__alltraps>

c01045de <vector217>:
.globl vector217
vector217:
  pushl $0
c01045de:	6a 00                	push   $0x0
  pushl $217
c01045e0:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01045e5:	e9 c8 01 00 00       	jmp    c01047b2 <__alltraps>

c01045ea <vector218>:
.globl vector218
vector218:
  pushl $0
c01045ea:	6a 00                	push   $0x0
  pushl $218
c01045ec:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01045f1:	e9 bc 01 00 00       	jmp    c01047b2 <__alltraps>

c01045f6 <vector219>:
.globl vector219
vector219:
  pushl $0
c01045f6:	6a 00                	push   $0x0
  pushl $219
c01045f8:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01045fd:	e9 b0 01 00 00       	jmp    c01047b2 <__alltraps>

c0104602 <vector220>:
.globl vector220
vector220:
  pushl $0
c0104602:	6a 00                	push   $0x0
  pushl $220
c0104604:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c0104609:	e9 a4 01 00 00       	jmp    c01047b2 <__alltraps>

c010460e <vector221>:
.globl vector221
vector221:
  pushl $0
c010460e:	6a 00                	push   $0x0
  pushl $221
c0104610:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0104615:	e9 98 01 00 00       	jmp    c01047b2 <__alltraps>

c010461a <vector222>:
.globl vector222
vector222:
  pushl $0
c010461a:	6a 00                	push   $0x0
  pushl $222
c010461c:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0104621:	e9 8c 01 00 00       	jmp    c01047b2 <__alltraps>

c0104626 <vector223>:
.globl vector223
vector223:
  pushl $0
c0104626:	6a 00                	push   $0x0
  pushl $223
c0104628:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c010462d:	e9 80 01 00 00       	jmp    c01047b2 <__alltraps>

c0104632 <vector224>:
.globl vector224
vector224:
  pushl $0
c0104632:	6a 00                	push   $0x0
  pushl $224
c0104634:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0104639:	e9 74 01 00 00       	jmp    c01047b2 <__alltraps>

c010463e <vector225>:
.globl vector225
vector225:
  pushl $0
c010463e:	6a 00                	push   $0x0
  pushl $225
c0104640:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0104645:	e9 68 01 00 00       	jmp    c01047b2 <__alltraps>

c010464a <vector226>:
.globl vector226
vector226:
  pushl $0
c010464a:	6a 00                	push   $0x0
  pushl $226
c010464c:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0104651:	e9 5c 01 00 00       	jmp    c01047b2 <__alltraps>

c0104656 <vector227>:
.globl vector227
vector227:
  pushl $0
c0104656:	6a 00                	push   $0x0
  pushl $227
c0104658:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c010465d:	e9 50 01 00 00       	jmp    c01047b2 <__alltraps>

c0104662 <vector228>:
.globl vector228
vector228:
  pushl $0
c0104662:	6a 00                	push   $0x0
  pushl $228
c0104664:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c0104669:	e9 44 01 00 00       	jmp    c01047b2 <__alltraps>

c010466e <vector229>:
.globl vector229
vector229:
  pushl $0
c010466e:	6a 00                	push   $0x0
  pushl $229
c0104670:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c0104675:	e9 38 01 00 00       	jmp    c01047b2 <__alltraps>

c010467a <vector230>:
.globl vector230
vector230:
  pushl $0
c010467a:	6a 00                	push   $0x0
  pushl $230
c010467c:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0104681:	e9 2c 01 00 00       	jmp    c01047b2 <__alltraps>

c0104686 <vector231>:
.globl vector231
vector231:
  pushl $0
c0104686:	6a 00                	push   $0x0
  pushl $231
c0104688:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c010468d:	e9 20 01 00 00       	jmp    c01047b2 <__alltraps>

c0104692 <vector232>:
.globl vector232
vector232:
  pushl $0
c0104692:	6a 00                	push   $0x0
  pushl $232
c0104694:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c0104699:	e9 14 01 00 00       	jmp    c01047b2 <__alltraps>

c010469e <vector233>:
.globl vector233
vector233:
  pushl $0
c010469e:	6a 00                	push   $0x0
  pushl $233
c01046a0:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01046a5:	e9 08 01 00 00       	jmp    c01047b2 <__alltraps>

c01046aa <vector234>:
.globl vector234
vector234:
  pushl $0
c01046aa:	6a 00                	push   $0x0
  pushl $234
c01046ac:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01046b1:	e9 fc 00 00 00       	jmp    c01047b2 <__alltraps>

c01046b6 <vector235>:
.globl vector235
vector235:
  pushl $0
c01046b6:	6a 00                	push   $0x0
  pushl $235
c01046b8:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01046bd:	e9 f0 00 00 00       	jmp    c01047b2 <__alltraps>

c01046c2 <vector236>:
.globl vector236
vector236:
  pushl $0
c01046c2:	6a 00                	push   $0x0
  pushl $236
c01046c4:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01046c9:	e9 e4 00 00 00       	jmp    c01047b2 <__alltraps>

c01046ce <vector237>:
.globl vector237
vector237:
  pushl $0
c01046ce:	6a 00                	push   $0x0
  pushl $237
c01046d0:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01046d5:	e9 d8 00 00 00       	jmp    c01047b2 <__alltraps>

c01046da <vector238>:
.globl vector238
vector238:
  pushl $0
c01046da:	6a 00                	push   $0x0
  pushl $238
c01046dc:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01046e1:	e9 cc 00 00 00       	jmp    c01047b2 <__alltraps>

c01046e6 <vector239>:
.globl vector239
vector239:
  pushl $0
c01046e6:	6a 00                	push   $0x0
  pushl $239
c01046e8:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01046ed:	e9 c0 00 00 00       	jmp    c01047b2 <__alltraps>

c01046f2 <vector240>:
.globl vector240
vector240:
  pushl $0
c01046f2:	6a 00                	push   $0x0
  pushl $240
c01046f4:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01046f9:	e9 b4 00 00 00       	jmp    c01047b2 <__alltraps>

c01046fe <vector241>:
.globl vector241
vector241:
  pushl $0
c01046fe:	6a 00                	push   $0x0
  pushl $241
c0104700:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c0104705:	e9 a8 00 00 00       	jmp    c01047b2 <__alltraps>

c010470a <vector242>:
.globl vector242
vector242:
  pushl $0
c010470a:	6a 00                	push   $0x0
  pushl $242
c010470c:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0104711:	e9 9c 00 00 00       	jmp    c01047b2 <__alltraps>

c0104716 <vector243>:
.globl vector243
vector243:
  pushl $0
c0104716:	6a 00                	push   $0x0
  pushl $243
c0104718:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c010471d:	e9 90 00 00 00       	jmp    c01047b2 <__alltraps>

c0104722 <vector244>:
.globl vector244
vector244:
  pushl $0
c0104722:	6a 00                	push   $0x0
  pushl $244
c0104724:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0104729:	e9 84 00 00 00       	jmp    c01047b2 <__alltraps>

c010472e <vector245>:
.globl vector245
vector245:
  pushl $0
c010472e:	6a 00                	push   $0x0
  pushl $245
c0104730:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0104735:	e9 78 00 00 00       	jmp    c01047b2 <__alltraps>

c010473a <vector246>:
.globl vector246
vector246:
  pushl $0
c010473a:	6a 00                	push   $0x0
  pushl $246
c010473c:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0104741:	e9 6c 00 00 00       	jmp    c01047b2 <__alltraps>

c0104746 <vector247>:
.globl vector247
vector247:
  pushl $0
c0104746:	6a 00                	push   $0x0
  pushl $247
c0104748:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c010474d:	e9 60 00 00 00       	jmp    c01047b2 <__alltraps>

c0104752 <vector248>:
.globl vector248
vector248:
  pushl $0
c0104752:	6a 00                	push   $0x0
  pushl $248
c0104754:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0104759:	e9 54 00 00 00       	jmp    c01047b2 <__alltraps>

c010475e <vector249>:
.globl vector249
vector249:
  pushl $0
c010475e:	6a 00                	push   $0x0
  pushl $249
c0104760:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c0104765:	e9 48 00 00 00       	jmp    c01047b2 <__alltraps>

c010476a <vector250>:
.globl vector250
vector250:
  pushl $0
c010476a:	6a 00                	push   $0x0
  pushl $250
c010476c:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0104771:	e9 3c 00 00 00       	jmp    c01047b2 <__alltraps>

c0104776 <vector251>:
.globl vector251
vector251:
  pushl $0
c0104776:	6a 00                	push   $0x0
  pushl $251
c0104778:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c010477d:	e9 30 00 00 00       	jmp    c01047b2 <__alltraps>

c0104782 <vector252>:
.globl vector252
vector252:
  pushl $0
c0104782:	6a 00                	push   $0x0
  pushl $252
c0104784:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c0104789:	e9 24 00 00 00       	jmp    c01047b2 <__alltraps>

c010478e <vector253>:
.globl vector253
vector253:
  pushl $0
c010478e:	6a 00                	push   $0x0
  pushl $253
c0104790:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c0104795:	e9 18 00 00 00       	jmp    c01047b2 <__alltraps>

c010479a <vector254>:
.globl vector254
vector254:
  pushl $0
c010479a:	6a 00                	push   $0x0
  pushl $254
c010479c:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01047a1:	e9 0c 00 00 00       	jmp    c01047b2 <__alltraps>

c01047a6 <vector255>:
.globl vector255
vector255:
  pushl $0
c01047a6:	6a 00                	push   $0x0
  pushl $255
c01047a8:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01047ad:	e9 00 00 00 00       	jmp    c01047b2 <__alltraps>

c01047b2 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c01047b2:	1e                   	push   %ds
    pushl %es
c01047b3:	06                   	push   %es
    pushl %fs
c01047b4:	0f a0                	push   %fs
    pushl %gs
c01047b6:	0f a8                	push   %gs
    pushal
c01047b8:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c01047b9:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c01047be:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c01047c0:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c01047c2:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c01047c3:	e8 e5 f4 ff ff       	call   c0103cad <trap>

    # pop the pushed stack pointer
    popl %esp
c01047c8:	5c                   	pop    %esp

c01047c9 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c01047c9:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c01047ca:	0f a9                	pop    %gs
    popl %fs
c01047cc:	0f a1                	pop    %fs
    popl %es
c01047ce:	07                   	pop    %es
    popl %ds
c01047cf:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c01047d0:	83 c4 08             	add    $0x8,%esp
    iret
c01047d3:	cf                   	iret   

c01047d4 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c01047d4:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c01047d8:	e9 ec ff ff ff       	jmp    c01047c9 <__trapret>

c01047dd <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01047dd:	55                   	push   %ebp
c01047de:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01047e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01047e3:	8b 15 64 3d 1b c0    	mov    0xc01b3d64,%edx
c01047e9:	29 d0                	sub    %edx,%eax
c01047eb:	c1 f8 02             	sar    $0x2,%eax
c01047ee:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c01047f4:	5d                   	pop    %ebp
c01047f5:	c3                   	ret    

c01047f6 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01047f6:	55                   	push   %ebp
c01047f7:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c01047f9:	ff 75 08             	pushl  0x8(%ebp)
c01047fc:	e8 dc ff ff ff       	call   c01047dd <page2ppn>
c0104801:	83 c4 04             	add    $0x4,%esp
c0104804:	c1 e0 0c             	shl    $0xc,%eax
}
c0104807:	c9                   	leave  
c0104808:	c3                   	ret    

c0104809 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104809:	55                   	push   %ebp
c010480a:	89 e5                	mov    %esp,%ebp
c010480c:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c010480f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104812:	c1 e8 0c             	shr    $0xc,%eax
c0104815:	89 c2                	mov    %eax,%edx
c0104817:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c010481c:	39 c2                	cmp    %eax,%edx
c010481e:	72 14                	jb     c0104834 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0104820:	83 ec 04             	sub    $0x4,%esp
c0104823:	68 30 d9 10 c0       	push   $0xc010d930
c0104828:	6a 5e                	push   $0x5e
c010482a:	68 4f d9 10 c0       	push   $0xc010d94f
c010482f:	e8 2d cf ff ff       	call   c0101761 <__panic>
    }
    return &pages[PPN(pa)];
c0104834:	8b 0d 64 3d 1b c0    	mov    0xc01b3d64,%ecx
c010483a:	8b 45 08             	mov    0x8(%ebp),%eax
c010483d:	c1 e8 0c             	shr    $0xc,%eax
c0104840:	89 c2                	mov    %eax,%edx
c0104842:	89 d0                	mov    %edx,%eax
c0104844:	c1 e0 03             	shl    $0x3,%eax
c0104847:	01 d0                	add    %edx,%eax
c0104849:	c1 e0 02             	shl    $0x2,%eax
c010484c:	01 c8                	add    %ecx,%eax
}
c010484e:	c9                   	leave  
c010484f:	c3                   	ret    

c0104850 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104850:	55                   	push   %ebp
c0104851:	89 e5                	mov    %esp,%ebp
c0104853:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0104856:	ff 75 08             	pushl  0x8(%ebp)
c0104859:	e8 98 ff ff ff       	call   c01047f6 <page2pa>
c010485e:	83 c4 04             	add    $0x4,%esp
c0104861:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104864:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104867:	c1 e8 0c             	shr    $0xc,%eax
c010486a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010486d:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c0104872:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104875:	72 14                	jb     c010488b <page2kva+0x3b>
c0104877:	ff 75 f4             	pushl  -0xc(%ebp)
c010487a:	68 60 d9 10 c0       	push   $0xc010d960
c010487f:	6a 65                	push   $0x65
c0104881:	68 4f d9 10 c0       	push   $0xc010d94f
c0104886:	e8 d6 ce ff ff       	call   c0101761 <__panic>
c010488b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010488e:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104893:	c9                   	leave  
c0104894:	c3                   	ret    

c0104895 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104895:	55                   	push   %ebp
c0104896:	89 e5                	mov    %esp,%ebp
c0104898:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c010489b:	8b 45 08             	mov    0x8(%ebp),%eax
c010489e:	83 e0 01             	and    $0x1,%eax
c01048a1:	85 c0                	test   %eax,%eax
c01048a3:	75 14                	jne    c01048b9 <pte2page+0x24>
        panic("pte2page called with invalid pte");
c01048a5:	83 ec 04             	sub    $0x4,%esp
c01048a8:	68 84 d9 10 c0       	push   $0xc010d984
c01048ad:	6a 70                	push   $0x70
c01048af:	68 4f d9 10 c0       	push   $0xc010d94f
c01048b4:	e8 a8 ce ff ff       	call   c0101761 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c01048b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01048bc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01048c1:	83 ec 0c             	sub    $0xc,%esp
c01048c4:	50                   	push   %eax
c01048c5:	e8 3f ff ff ff       	call   c0104809 <pa2page>
c01048ca:	83 c4 10             	add    $0x10,%esp
}
c01048cd:	c9                   	leave  
c01048ce:	c3                   	ret    

c01048cf <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c01048cf:	55                   	push   %ebp
c01048d0:	89 e5                	mov    %esp,%ebp
c01048d2:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c01048d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01048d8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01048dd:	83 ec 0c             	sub    $0xc,%esp
c01048e0:	50                   	push   %eax
c01048e1:	e8 23 ff ff ff       	call   c0104809 <pa2page>
c01048e6:	83 c4 10             	add    $0x10,%esp
}
c01048e9:	c9                   	leave  
c01048ea:	c3                   	ret    

c01048eb <page_ref>:

static inline int
page_ref(struct Page *page) {
c01048eb:	55                   	push   %ebp
c01048ec:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01048ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01048f1:	8b 00                	mov    (%eax),%eax
}
c01048f3:	5d                   	pop    %ebp
c01048f4:	c3                   	ret    

c01048f5 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01048f5:	55                   	push   %ebp
c01048f6:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01048f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01048fb:	8b 55 0c             	mov    0xc(%ebp),%edx
c01048fe:	89 10                	mov    %edx,(%eax)
}
c0104900:	90                   	nop
c0104901:	5d                   	pop    %ebp
c0104902:	c3                   	ret    

c0104903 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0104903:	55                   	push   %ebp
c0104904:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0104906:	8b 45 08             	mov    0x8(%ebp),%eax
c0104909:	8b 00                	mov    (%eax),%eax
c010490b:	8d 50 01             	lea    0x1(%eax),%edx
c010490e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104911:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104913:	8b 45 08             	mov    0x8(%ebp),%eax
c0104916:	8b 00                	mov    (%eax),%eax
}
c0104918:	5d                   	pop    %ebp
c0104919:	c3                   	ret    

c010491a <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c010491a:	55                   	push   %ebp
c010491b:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c010491d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104920:	8b 00                	mov    (%eax),%eax
c0104922:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104925:	8b 45 08             	mov    0x8(%ebp),%eax
c0104928:	89 10                	mov    %edx,(%eax)
    return page->ref;
c010492a:	8b 45 08             	mov    0x8(%ebp),%eax
c010492d:	8b 00                	mov    (%eax),%eax
}
c010492f:	5d                   	pop    %ebp
c0104930:	c3                   	ret    

c0104931 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104931:	55                   	push   %ebp
c0104932:	89 e5                	mov    %esp,%ebp
c0104934:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104937:	9c                   	pushf  
c0104938:	58                   	pop    %eax
c0104939:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010493c:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010493f:	25 00 02 00 00       	and    $0x200,%eax
c0104944:	85 c0                	test   %eax,%eax
c0104946:	74 0c                	je     c0104954 <__intr_save+0x23>
        intr_disable();
c0104948:	e8 b7 eb ff ff       	call   c0103504 <intr_disable>
        return 1;
c010494d:	b8 01 00 00 00       	mov    $0x1,%eax
c0104952:	eb 05                	jmp    c0104959 <__intr_save+0x28>
    }
    return 0;
c0104954:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104959:	c9                   	leave  
c010495a:	c3                   	ret    

c010495b <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010495b:	55                   	push   %ebp
c010495c:	89 e5                	mov    %esp,%ebp
c010495e:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104961:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104965:	74 05                	je     c010496c <__intr_restore+0x11>
        intr_enable();
c0104967:	e8 91 eb ff ff       	call   c01034fd <intr_enable>
    }
}
c010496c:	90                   	nop
c010496d:	c9                   	leave  
c010496e:	c3                   	ret    

c010496f <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c010496f:	55                   	push   %ebp
c0104970:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0104972:	8b 45 08             	mov    0x8(%ebp),%eax
c0104975:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0104978:	b8 23 00 00 00       	mov    $0x23,%eax
c010497d:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c010497f:	b8 23 00 00 00       	mov    $0x23,%eax
c0104984:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0104986:	b8 10 00 00 00       	mov    $0x10,%eax
c010498b:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c010498d:	b8 10 00 00 00       	mov    $0x10,%eax
c0104992:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0104994:	b8 10 00 00 00       	mov    $0x10,%eax
c0104999:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c010499b:	ea a2 49 10 c0 08 00 	ljmp   $0x8,$0xc01049a2
}
c01049a2:	90                   	nop
c01049a3:	5d                   	pop    %ebp
c01049a4:	c3                   	ret    

c01049a5 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c01049a5:	55                   	push   %ebp
c01049a6:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c01049a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01049ab:	a3 84 1c 1b c0       	mov    %eax,0xc01b1c84
}
c01049b0:	90                   	nop
c01049b1:	5d                   	pop    %ebp
c01049b2:	c3                   	ret    

c01049b3 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c01049b3:	55                   	push   %ebp
c01049b4:	89 e5                	mov    %esp,%ebp
c01049b6:	83 ec 10             	sub    $0x10,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c01049b9:	b8 00 f0 12 c0       	mov    $0xc012f000,%eax
c01049be:	50                   	push   %eax
c01049bf:	e8 e1 ff ff ff       	call   c01049a5 <load_esp0>
c01049c4:	83 c4 04             	add    $0x4,%esp
    ts.ts_ss0 = KERNEL_DS;
c01049c7:	66 c7 05 88 1c 1b c0 	movw   $0x10,0xc01b1c88
c01049ce:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c01049d0:	66 c7 05 28 fa 12 c0 	movw   $0x68,0xc012fa28
c01049d7:	68 00 
c01049d9:	b8 80 1c 1b c0       	mov    $0xc01b1c80,%eax
c01049de:	66 a3 2a fa 12 c0    	mov    %ax,0xc012fa2a
c01049e4:	b8 80 1c 1b c0       	mov    $0xc01b1c80,%eax
c01049e9:	c1 e8 10             	shr    $0x10,%eax
c01049ec:	a2 2c fa 12 c0       	mov    %al,0xc012fa2c
c01049f1:	0f b6 05 2d fa 12 c0 	movzbl 0xc012fa2d,%eax
c01049f8:	83 e0 f0             	and    $0xfffffff0,%eax
c01049fb:	83 c8 09             	or     $0x9,%eax
c01049fe:	a2 2d fa 12 c0       	mov    %al,0xc012fa2d
c0104a03:	0f b6 05 2d fa 12 c0 	movzbl 0xc012fa2d,%eax
c0104a0a:	83 e0 ef             	and    $0xffffffef,%eax
c0104a0d:	a2 2d fa 12 c0       	mov    %al,0xc012fa2d
c0104a12:	0f b6 05 2d fa 12 c0 	movzbl 0xc012fa2d,%eax
c0104a19:	83 e0 9f             	and    $0xffffff9f,%eax
c0104a1c:	a2 2d fa 12 c0       	mov    %al,0xc012fa2d
c0104a21:	0f b6 05 2d fa 12 c0 	movzbl 0xc012fa2d,%eax
c0104a28:	83 c8 80             	or     $0xffffff80,%eax
c0104a2b:	a2 2d fa 12 c0       	mov    %al,0xc012fa2d
c0104a30:	0f b6 05 2e fa 12 c0 	movzbl 0xc012fa2e,%eax
c0104a37:	83 e0 f0             	and    $0xfffffff0,%eax
c0104a3a:	a2 2e fa 12 c0       	mov    %al,0xc012fa2e
c0104a3f:	0f b6 05 2e fa 12 c0 	movzbl 0xc012fa2e,%eax
c0104a46:	83 e0 ef             	and    $0xffffffef,%eax
c0104a49:	a2 2e fa 12 c0       	mov    %al,0xc012fa2e
c0104a4e:	0f b6 05 2e fa 12 c0 	movzbl 0xc012fa2e,%eax
c0104a55:	83 e0 df             	and    $0xffffffdf,%eax
c0104a58:	a2 2e fa 12 c0       	mov    %al,0xc012fa2e
c0104a5d:	0f b6 05 2e fa 12 c0 	movzbl 0xc012fa2e,%eax
c0104a64:	83 c8 40             	or     $0x40,%eax
c0104a67:	a2 2e fa 12 c0       	mov    %al,0xc012fa2e
c0104a6c:	0f b6 05 2e fa 12 c0 	movzbl 0xc012fa2e,%eax
c0104a73:	83 e0 7f             	and    $0x7f,%eax
c0104a76:	a2 2e fa 12 c0       	mov    %al,0xc012fa2e
c0104a7b:	b8 80 1c 1b c0       	mov    $0xc01b1c80,%eax
c0104a80:	c1 e8 18             	shr    $0x18,%eax
c0104a83:	a2 2f fa 12 c0       	mov    %al,0xc012fa2f

    // reload all segment registers
    lgdt(&gdt_pd);
c0104a88:	68 30 fa 12 c0       	push   $0xc012fa30
c0104a8d:	e8 dd fe ff ff       	call   c010496f <lgdt>
c0104a92:	83 c4 04             	add    $0x4,%esp
c0104a95:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0104a9b:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0104a9f:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c0104aa2:	90                   	nop
c0104aa3:	c9                   	leave  
c0104aa4:	c3                   	ret    

c0104aa5 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c0104aa5:	55                   	push   %ebp
c0104aa6:	89 e5                	mov    %esp,%ebp
c0104aa8:	83 ec 08             	sub    $0x8,%esp
    pmm_manager = &default_pmm_manager;
c0104aab:	c7 05 5c 3d 1b c0 9c 	movl   $0xc010ef9c,0xc01b3d5c
c0104ab2:	ef 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c0104ab5:	a1 5c 3d 1b c0       	mov    0xc01b3d5c,%eax
c0104aba:	8b 00                	mov    (%eax),%eax
c0104abc:	83 ec 08             	sub    $0x8,%esp
c0104abf:	50                   	push   %eax
c0104ac0:	68 b0 d9 10 c0       	push   $0xc010d9b0
c0104ac5:	e8 b9 b7 ff ff       	call   c0100283 <cprintf>
c0104aca:	83 c4 10             	add    $0x10,%esp
    pmm_manager->init();
c0104acd:	a1 5c 3d 1b c0       	mov    0xc01b3d5c,%eax
c0104ad2:	8b 40 04             	mov    0x4(%eax),%eax
c0104ad5:	ff d0                	call   *%eax
}
c0104ad7:	90                   	nop
c0104ad8:	c9                   	leave  
c0104ad9:	c3                   	ret    

c0104ada <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0104ada:	55                   	push   %ebp
c0104adb:	89 e5                	mov    %esp,%ebp
c0104add:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->init_memmap(base, n);
c0104ae0:	a1 5c 3d 1b c0       	mov    0xc01b3d5c,%eax
c0104ae5:	8b 40 08             	mov    0x8(%eax),%eax
c0104ae8:	83 ec 08             	sub    $0x8,%esp
c0104aeb:	ff 75 0c             	pushl  0xc(%ebp)
c0104aee:	ff 75 08             	pushl  0x8(%ebp)
c0104af1:	ff d0                	call   *%eax
c0104af3:	83 c4 10             	add    $0x10,%esp
}
c0104af6:	90                   	nop
c0104af7:	c9                   	leave  
c0104af8:	c3                   	ret    

c0104af9 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0104af9:	55                   	push   %ebp
c0104afa:	89 e5                	mov    %esp,%ebp
c0104afc:	83 ec 18             	sub    $0x18,%esp
    struct Page *page=NULL;
c0104aff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0104b06:	e8 26 fe ff ff       	call   c0104931 <__intr_save>
c0104b0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0104b0e:	a1 5c 3d 1b c0       	mov    0xc01b3d5c,%eax
c0104b13:	8b 40 0c             	mov    0xc(%eax),%eax
c0104b16:	83 ec 0c             	sub    $0xc,%esp
c0104b19:	ff 75 08             	pushl  0x8(%ebp)
c0104b1c:	ff d0                	call   *%eax
c0104b1e:	83 c4 10             	add    $0x10,%esp
c0104b21:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0104b24:	83 ec 0c             	sub    $0xc,%esp
c0104b27:	ff 75 f0             	pushl  -0x10(%ebp)
c0104b2a:	e8 2c fe ff ff       	call   c010495b <__intr_restore>
c0104b2f:	83 c4 10             	add    $0x10,%esp

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0104b32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104b36:	75 28                	jne    c0104b60 <alloc_pages+0x67>
c0104b38:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0104b3c:	77 22                	ja     c0104b60 <alloc_pages+0x67>
c0104b3e:	a1 f0 1c 1b c0       	mov    0xc01b1cf0,%eax
c0104b43:	85 c0                	test   %eax,%eax
c0104b45:	74 19                	je     c0104b60 <alloc_pages+0x67>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0104b47:	8b 55 08             	mov    0x8(%ebp),%edx
c0104b4a:	a1 68 3d 1b c0       	mov    0xc01b3d68,%eax
c0104b4f:	83 ec 04             	sub    $0x4,%esp
c0104b52:	6a 00                	push   $0x0
c0104b54:	52                   	push   %edx
c0104b55:	50                   	push   %eax
c0104b56:	e8 97 2b 00 00       	call   c01076f2 <swap_out>
c0104b5b:	83 c4 10             	add    $0x10,%esp
    }
c0104b5e:	eb a6                	jmp    c0104b06 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0104b60:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104b63:	c9                   	leave  
c0104b64:	c3                   	ret    

c0104b65 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c0104b65:	55                   	push   %ebp
c0104b66:	89 e5                	mov    %esp,%ebp
c0104b68:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0104b6b:	e8 c1 fd ff ff       	call   c0104931 <__intr_save>
c0104b70:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0104b73:	a1 5c 3d 1b c0       	mov    0xc01b3d5c,%eax
c0104b78:	8b 40 10             	mov    0x10(%eax),%eax
c0104b7b:	83 ec 08             	sub    $0x8,%esp
c0104b7e:	ff 75 0c             	pushl  0xc(%ebp)
c0104b81:	ff 75 08             	pushl  0x8(%ebp)
c0104b84:	ff d0                	call   *%eax
c0104b86:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0104b89:	83 ec 0c             	sub    $0xc,%esp
c0104b8c:	ff 75 f4             	pushl  -0xc(%ebp)
c0104b8f:	e8 c7 fd ff ff       	call   c010495b <__intr_restore>
c0104b94:	83 c4 10             	add    $0x10,%esp
}
c0104b97:	90                   	nop
c0104b98:	c9                   	leave  
c0104b99:	c3                   	ret    

c0104b9a <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c0104b9a:	55                   	push   %ebp
c0104b9b:	89 e5                	mov    %esp,%ebp
c0104b9d:	83 ec 18             	sub    $0x18,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0104ba0:	e8 8c fd ff ff       	call   c0104931 <__intr_save>
c0104ba5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c0104ba8:	a1 5c 3d 1b c0       	mov    0xc01b3d5c,%eax
c0104bad:	8b 40 14             	mov    0x14(%eax),%eax
c0104bb0:	ff d0                	call   *%eax
c0104bb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0104bb5:	83 ec 0c             	sub    $0xc,%esp
c0104bb8:	ff 75 f4             	pushl  -0xc(%ebp)
c0104bbb:	e8 9b fd ff ff       	call   c010495b <__intr_restore>
c0104bc0:	83 c4 10             	add    $0x10,%esp
    return ret;
c0104bc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0104bc6:	c9                   	leave  
c0104bc7:	c3                   	ret    

c0104bc8 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c0104bc8:	55                   	push   %ebp
c0104bc9:	89 e5                	mov    %esp,%ebp
c0104bcb:	57                   	push   %edi
c0104bcc:	56                   	push   %esi
c0104bcd:	53                   	push   %ebx
c0104bce:	83 ec 7c             	sub    $0x7c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0104bd1:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c0104bd8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0104bdf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0104be6:	83 ec 0c             	sub    $0xc,%esp
c0104be9:	68 c7 d9 10 c0       	push   $0xc010d9c7
c0104bee:	e8 90 b6 ff ff       	call   c0100283 <cprintf>
c0104bf3:	83 c4 10             	add    $0x10,%esp
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0104bf6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0104bfd:	e9 fc 00 00 00       	jmp    c0104cfe <page_init+0x136>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0104c02:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104c05:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104c08:	89 d0                	mov    %edx,%eax
c0104c0a:	c1 e0 02             	shl    $0x2,%eax
c0104c0d:	01 d0                	add    %edx,%eax
c0104c0f:	c1 e0 02             	shl    $0x2,%eax
c0104c12:	01 c8                	add    %ecx,%eax
c0104c14:	8b 50 08             	mov    0x8(%eax),%edx
c0104c17:	8b 40 04             	mov    0x4(%eax),%eax
c0104c1a:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0104c1d:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0104c20:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104c23:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104c26:	89 d0                	mov    %edx,%eax
c0104c28:	c1 e0 02             	shl    $0x2,%eax
c0104c2b:	01 d0                	add    %edx,%eax
c0104c2d:	c1 e0 02             	shl    $0x2,%eax
c0104c30:	01 c8                	add    %ecx,%eax
c0104c32:	8b 48 0c             	mov    0xc(%eax),%ecx
c0104c35:	8b 58 10             	mov    0x10(%eax),%ebx
c0104c38:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0104c3b:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0104c3e:	01 c8                	add    %ecx,%eax
c0104c40:	11 da                	adc    %ebx,%edx
c0104c42:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0104c45:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0104c48:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104c4b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104c4e:	89 d0                	mov    %edx,%eax
c0104c50:	c1 e0 02             	shl    $0x2,%eax
c0104c53:	01 d0                	add    %edx,%eax
c0104c55:	c1 e0 02             	shl    $0x2,%eax
c0104c58:	01 c8                	add    %ecx,%eax
c0104c5a:	83 c0 14             	add    $0x14,%eax
c0104c5d:	8b 00                	mov    (%eax),%eax
c0104c5f:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0104c62:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0104c65:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0104c68:	83 c0 ff             	add    $0xffffffff,%eax
c0104c6b:	83 d2 ff             	adc    $0xffffffff,%edx
c0104c6e:	89 c1                	mov    %eax,%ecx
c0104c70:	89 d3                	mov    %edx,%ebx
c0104c72:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0104c75:	89 55 80             	mov    %edx,-0x80(%ebp)
c0104c78:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104c7b:	89 d0                	mov    %edx,%eax
c0104c7d:	c1 e0 02             	shl    $0x2,%eax
c0104c80:	01 d0                	add    %edx,%eax
c0104c82:	c1 e0 02             	shl    $0x2,%eax
c0104c85:	03 45 80             	add    -0x80(%ebp),%eax
c0104c88:	8b 50 10             	mov    0x10(%eax),%edx
c0104c8b:	8b 40 0c             	mov    0xc(%eax),%eax
c0104c8e:	ff 75 84             	pushl  -0x7c(%ebp)
c0104c91:	53                   	push   %ebx
c0104c92:	51                   	push   %ecx
c0104c93:	ff 75 bc             	pushl  -0x44(%ebp)
c0104c96:	ff 75 b8             	pushl  -0x48(%ebp)
c0104c99:	52                   	push   %edx
c0104c9a:	50                   	push   %eax
c0104c9b:	68 d4 d9 10 c0       	push   $0xc010d9d4
c0104ca0:	e8 de b5 ff ff       	call   c0100283 <cprintf>
c0104ca5:	83 c4 20             	add    $0x20,%esp
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0104ca8:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104cab:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104cae:	89 d0                	mov    %edx,%eax
c0104cb0:	c1 e0 02             	shl    $0x2,%eax
c0104cb3:	01 d0                	add    %edx,%eax
c0104cb5:	c1 e0 02             	shl    $0x2,%eax
c0104cb8:	01 c8                	add    %ecx,%eax
c0104cba:	83 c0 14             	add    $0x14,%eax
c0104cbd:	8b 00                	mov    (%eax),%eax
c0104cbf:	83 f8 01             	cmp    $0x1,%eax
c0104cc2:	75 36                	jne    c0104cfa <page_init+0x132>
            if (maxpa < end && begin < KMEMSIZE) {
c0104cc4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104cc7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104cca:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0104ccd:	77 2b                	ja     c0104cfa <page_init+0x132>
c0104ccf:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0104cd2:	72 05                	jb     c0104cd9 <page_init+0x111>
c0104cd4:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0104cd7:	73 21                	jae    c0104cfa <page_init+0x132>
c0104cd9:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0104cdd:	77 1b                	ja     c0104cfa <page_init+0x132>
c0104cdf:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0104ce3:	72 09                	jb     c0104cee <page_init+0x126>
c0104ce5:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c0104cec:	77 0c                	ja     c0104cfa <page_init+0x132>
                maxpa = end;
c0104cee:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0104cf1:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0104cf4:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0104cf7:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0104cfa:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0104cfe:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104d01:	8b 00                	mov    (%eax),%eax
c0104d03:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0104d06:	0f 8f f6 fe ff ff    	jg     c0104c02 <page_init+0x3a>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c0104d0c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104d10:	72 1d                	jb     c0104d2f <page_init+0x167>
c0104d12:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104d16:	77 09                	ja     c0104d21 <page_init+0x159>
c0104d18:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c0104d1f:	76 0e                	jbe    c0104d2f <page_init+0x167>
        maxpa = KMEMSIZE;
c0104d21:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0104d28:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c0104d2f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104d32:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104d35:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0104d39:	c1 ea 0c             	shr    $0xc,%edx
c0104d3c:	a3 60 1c 1b c0       	mov    %eax,0xc01b1c60
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0104d41:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c0104d48:	b8 60 3e 1b c0       	mov    $0xc01b3e60,%eax
c0104d4d:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104d50:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0104d53:	01 d0                	add    %edx,%eax
c0104d55:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0104d58:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0104d5b:	ba 00 00 00 00       	mov    $0x0,%edx
c0104d60:	f7 75 ac             	divl   -0x54(%ebp)
c0104d63:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0104d66:	29 d0                	sub    %edx,%eax
c0104d68:	a3 64 3d 1b c0       	mov    %eax,0xc01b3d64

    for (i = 0; i < npage; i ++) {
c0104d6d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0104d74:	eb 2f                	jmp    c0104da5 <page_init+0x1dd>
        SetPageReserved(pages + i);
c0104d76:	8b 0d 64 3d 1b c0    	mov    0xc01b3d64,%ecx
c0104d7c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104d7f:	89 d0                	mov    %edx,%eax
c0104d81:	c1 e0 03             	shl    $0x3,%eax
c0104d84:	01 d0                	add    %edx,%eax
c0104d86:	c1 e0 02             	shl    $0x2,%eax
c0104d89:	01 c8                	add    %ecx,%eax
c0104d8b:	83 c0 04             	add    $0x4,%eax
c0104d8e:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c0104d95:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0104d98:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0104d9b:	8b 55 90             	mov    -0x70(%ebp),%edx
c0104d9e:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c0104da1:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0104da5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104da8:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c0104dad:	39 c2                	cmp    %eax,%edx
c0104daf:	72 c5                	jb     c0104d76 <page_init+0x1ae>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0104db1:	8b 15 60 1c 1b c0    	mov    0xc01b1c60,%edx
c0104db7:	89 d0                	mov    %edx,%eax
c0104db9:	c1 e0 03             	shl    $0x3,%eax
c0104dbc:	01 d0                	add    %edx,%eax
c0104dbe:	c1 e0 02             	shl    $0x2,%eax
c0104dc1:	89 c2                	mov    %eax,%edx
c0104dc3:	a1 64 3d 1b c0       	mov    0xc01b3d64,%eax
c0104dc8:	01 d0                	add    %edx,%eax
c0104dca:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c0104dcd:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c0104dd4:	77 17                	ja     c0104ded <page_init+0x225>
c0104dd6:	ff 75 a4             	pushl  -0x5c(%ebp)
c0104dd9:	68 04 da 10 c0       	push   $0xc010da04
c0104dde:	68 e9 00 00 00       	push   $0xe9
c0104de3:	68 28 da 10 c0       	push   $0xc010da28
c0104de8:	e8 74 c9 ff ff       	call   c0101761 <__panic>
c0104ded:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0104df0:	05 00 00 00 40       	add    $0x40000000,%eax
c0104df5:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0104df8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0104dff:	e9 69 01 00 00       	jmp    c0104f6d <page_init+0x3a5>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0104e04:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104e07:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104e0a:	89 d0                	mov    %edx,%eax
c0104e0c:	c1 e0 02             	shl    $0x2,%eax
c0104e0f:	01 d0                	add    %edx,%eax
c0104e11:	c1 e0 02             	shl    $0x2,%eax
c0104e14:	01 c8                	add    %ecx,%eax
c0104e16:	8b 50 08             	mov    0x8(%eax),%edx
c0104e19:	8b 40 04             	mov    0x4(%eax),%eax
c0104e1c:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0104e1f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0104e22:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104e25:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104e28:	89 d0                	mov    %edx,%eax
c0104e2a:	c1 e0 02             	shl    $0x2,%eax
c0104e2d:	01 d0                	add    %edx,%eax
c0104e2f:	c1 e0 02             	shl    $0x2,%eax
c0104e32:	01 c8                	add    %ecx,%eax
c0104e34:	8b 48 0c             	mov    0xc(%eax),%ecx
c0104e37:	8b 58 10             	mov    0x10(%eax),%ebx
c0104e3a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104e3d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104e40:	01 c8                	add    %ecx,%eax
c0104e42:	11 da                	adc    %ebx,%edx
c0104e44:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0104e47:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0104e4a:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0104e4d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104e50:	89 d0                	mov    %edx,%eax
c0104e52:	c1 e0 02             	shl    $0x2,%eax
c0104e55:	01 d0                	add    %edx,%eax
c0104e57:	c1 e0 02             	shl    $0x2,%eax
c0104e5a:	01 c8                	add    %ecx,%eax
c0104e5c:	83 c0 14             	add    $0x14,%eax
c0104e5f:	8b 00                	mov    (%eax),%eax
c0104e61:	83 f8 01             	cmp    $0x1,%eax
c0104e64:	0f 85 ff 00 00 00    	jne    c0104f69 <page_init+0x3a1>
            if (begin < freemem) {
c0104e6a:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0104e6d:	ba 00 00 00 00       	mov    $0x0,%edx
c0104e72:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0104e75:	72 17                	jb     c0104e8e <page_init+0x2c6>
c0104e77:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0104e7a:	77 05                	ja     c0104e81 <page_init+0x2b9>
c0104e7c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0104e7f:	76 0d                	jbe    c0104e8e <page_init+0x2c6>
                begin = freemem;
c0104e81:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0104e84:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0104e87:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0104e8e:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0104e92:	72 1d                	jb     c0104eb1 <page_init+0x2e9>
c0104e94:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0104e98:	77 09                	ja     c0104ea3 <page_init+0x2db>
c0104e9a:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c0104ea1:	76 0e                	jbe    c0104eb1 <page_init+0x2e9>
                end = KMEMSIZE;
c0104ea3:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0104eaa:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c0104eb1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104eb4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104eb7:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0104eba:	0f 87 a9 00 00 00    	ja     c0104f69 <page_init+0x3a1>
c0104ec0:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0104ec3:	72 09                	jb     c0104ece <page_init+0x306>
c0104ec5:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0104ec8:	0f 83 9b 00 00 00    	jae    c0104f69 <page_init+0x3a1>
                begin = ROUNDUP(begin, PGSIZE);
c0104ece:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c0104ed5:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104ed8:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0104edb:	01 d0                	add    %edx,%eax
c0104edd:	83 e8 01             	sub    $0x1,%eax
c0104ee0:	89 45 98             	mov    %eax,-0x68(%ebp)
c0104ee3:	8b 45 98             	mov    -0x68(%ebp),%eax
c0104ee6:	ba 00 00 00 00       	mov    $0x0,%edx
c0104eeb:	f7 75 9c             	divl   -0x64(%ebp)
c0104eee:	8b 45 98             	mov    -0x68(%ebp),%eax
c0104ef1:	29 d0                	sub    %edx,%eax
c0104ef3:	ba 00 00 00 00       	mov    $0x0,%edx
c0104ef8:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0104efb:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0104efe:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0104f01:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0104f04:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0104f07:	ba 00 00 00 00       	mov    $0x0,%edx
c0104f0c:	89 c3                	mov    %eax,%ebx
c0104f0e:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
c0104f14:	89 de                	mov    %ebx,%esi
c0104f16:	89 d0                	mov    %edx,%eax
c0104f18:	83 e0 00             	and    $0x0,%eax
c0104f1b:	89 c7                	mov    %eax,%edi
c0104f1d:	89 75 c8             	mov    %esi,-0x38(%ebp)
c0104f20:	89 7d cc             	mov    %edi,-0x34(%ebp)
                if (begin < end) {
c0104f23:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104f26:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104f29:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0104f2c:	77 3b                	ja     c0104f69 <page_init+0x3a1>
c0104f2e:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0104f31:	72 05                	jb     c0104f38 <page_init+0x370>
c0104f33:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0104f36:	73 31                	jae    c0104f69 <page_init+0x3a1>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0104f38:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0104f3b:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104f3e:	2b 45 d0             	sub    -0x30(%ebp),%eax
c0104f41:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
c0104f44:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0104f48:	c1 ea 0c             	shr    $0xc,%edx
c0104f4b:	89 c3                	mov    %eax,%ebx
c0104f4d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104f50:	83 ec 0c             	sub    $0xc,%esp
c0104f53:	50                   	push   %eax
c0104f54:	e8 b0 f8 ff ff       	call   c0104809 <pa2page>
c0104f59:	83 c4 10             	add    $0x10,%esp
c0104f5c:	83 ec 08             	sub    $0x8,%esp
c0104f5f:	53                   	push   %ebx
c0104f60:	50                   	push   %eax
c0104f61:	e8 74 fb ff ff       	call   c0104ada <init_memmap>
c0104f66:	83 c4 10             	add    $0x10,%esp
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c0104f69:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0104f6d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104f70:	8b 00                	mov    (%eax),%eax
c0104f72:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0104f75:	0f 8f 89 fe ff ff    	jg     c0104e04 <page_init+0x23c>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c0104f7b:	90                   	nop
c0104f7c:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0104f7f:	5b                   	pop    %ebx
c0104f80:	5e                   	pop    %esi
c0104f81:	5f                   	pop    %edi
c0104f82:	5d                   	pop    %ebp
c0104f83:	c3                   	ret    

c0104f84 <enable_paging>:

static void
enable_paging(void) {
c0104f84:	55                   	push   %ebp
c0104f85:	89 e5                	mov    %esp,%ebp
c0104f87:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c0104f8a:	a1 60 3d 1b c0       	mov    0xc01b3d60,%eax
c0104f8f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c0104f92:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104f95:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c0104f98:	0f 20 c0             	mov    %cr0,%eax
c0104f9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c0104f9e:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c0104fa1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c0104fa4:	81 4d f8 2f 00 05 80 	orl    $0x8005002f,-0x8(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c0104fab:	83 65 f8 f3          	andl   $0xfffffff3,-0x8(%ebp)
c0104faf:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0104fb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c0104fb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fb8:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c0104fbb:	90                   	nop
c0104fbc:	c9                   	leave  
c0104fbd:	c3                   	ret    

c0104fbe <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0104fbe:	55                   	push   %ebp
c0104fbf:	89 e5                	mov    %esp,%ebp
c0104fc1:	83 ec 28             	sub    $0x28,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0104fc4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104fc7:	33 45 14             	xor    0x14(%ebp),%eax
c0104fca:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104fcf:	85 c0                	test   %eax,%eax
c0104fd1:	74 19                	je     c0104fec <boot_map_segment+0x2e>
c0104fd3:	68 36 da 10 c0       	push   $0xc010da36
c0104fd8:	68 4d da 10 c0       	push   $0xc010da4d
c0104fdd:	68 12 01 00 00       	push   $0x112
c0104fe2:	68 28 da 10 c0       	push   $0xc010da28
c0104fe7:	e8 75 c7 ff ff       	call   c0101761 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0104fec:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0104ff3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104ff6:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104ffb:	89 c2                	mov    %eax,%edx
c0104ffd:	8b 45 10             	mov    0x10(%ebp),%eax
c0105000:	01 c2                	add    %eax,%edx
c0105002:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105005:	01 d0                	add    %edx,%eax
c0105007:	83 e8 01             	sub    $0x1,%eax
c010500a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010500d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105010:	ba 00 00 00 00       	mov    $0x0,%edx
c0105015:	f7 75 f0             	divl   -0x10(%ebp)
c0105018:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010501b:	29 d0                	sub    %edx,%eax
c010501d:	c1 e8 0c             	shr    $0xc,%eax
c0105020:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0105023:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105026:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105029:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010502c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105031:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0105034:	8b 45 14             	mov    0x14(%ebp),%eax
c0105037:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010503a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010503d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105042:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105045:	eb 57                	jmp    c010509e <boot_map_segment+0xe0>
        pte_t *ptep = get_pte(pgdir, la, 1);
c0105047:	83 ec 04             	sub    $0x4,%esp
c010504a:	6a 01                	push   $0x1
c010504c:	ff 75 0c             	pushl  0xc(%ebp)
c010504f:	ff 75 08             	pushl  0x8(%ebp)
c0105052:	e8 9d 01 00 00       	call   c01051f4 <get_pte>
c0105057:	83 c4 10             	add    $0x10,%esp
c010505a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c010505d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105061:	75 19                	jne    c010507c <boot_map_segment+0xbe>
c0105063:	68 62 da 10 c0       	push   $0xc010da62
c0105068:	68 4d da 10 c0       	push   $0xc010da4d
c010506d:	68 18 01 00 00       	push   $0x118
c0105072:	68 28 da 10 c0       	push   $0xc010da28
c0105077:	e8 e5 c6 ff ff       	call   c0101761 <__panic>
        *ptep = pa | PTE_P | perm;
c010507c:	8b 45 14             	mov    0x14(%ebp),%eax
c010507f:	0b 45 18             	or     0x18(%ebp),%eax
c0105082:	83 c8 01             	or     $0x1,%eax
c0105085:	89 c2                	mov    %eax,%edx
c0105087:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010508a:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c010508c:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0105090:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c0105097:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c010509e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01050a2:	75 a3                	jne    c0105047 <boot_map_segment+0x89>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c01050a4:	90                   	nop
c01050a5:	c9                   	leave  
c01050a6:	c3                   	ret    

c01050a7 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c01050a7:	55                   	push   %ebp
c01050a8:	89 e5                	mov    %esp,%ebp
c01050aa:	83 ec 18             	sub    $0x18,%esp
    struct Page *p = alloc_page();
c01050ad:	83 ec 0c             	sub    $0xc,%esp
c01050b0:	6a 01                	push   $0x1
c01050b2:	e8 42 fa ff ff       	call   c0104af9 <alloc_pages>
c01050b7:	83 c4 10             	add    $0x10,%esp
c01050ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c01050bd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01050c1:	75 17                	jne    c01050da <boot_alloc_page+0x33>
        panic("boot_alloc_page failed.\n");
c01050c3:	83 ec 04             	sub    $0x4,%esp
c01050c6:	68 6f da 10 c0       	push   $0xc010da6f
c01050cb:	68 24 01 00 00       	push   $0x124
c01050d0:	68 28 da 10 c0       	push   $0xc010da28
c01050d5:	e8 87 c6 ff ff       	call   c0101761 <__panic>
    }
    return page2kva(p);
c01050da:	83 ec 0c             	sub    $0xc,%esp
c01050dd:	ff 75 f4             	pushl  -0xc(%ebp)
c01050e0:	e8 6b f7 ff ff       	call   c0104850 <page2kva>
c01050e5:	83 c4 10             	add    $0x10,%esp
}
c01050e8:	c9                   	leave  
c01050e9:	c3                   	ret    

c01050ea <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c01050ea:	55                   	push   %ebp
c01050eb:	89 e5                	mov    %esp,%ebp
c01050ed:	83 ec 18             	sub    $0x18,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c01050f0:	e8 b0 f9 ff ff       	call   c0104aa5 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c01050f5:	e8 ce fa ff ff       	call   c0104bc8 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c01050fa:	e8 60 08 00 00       	call   c010595f <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c01050ff:	e8 a3 ff ff ff       	call   c01050a7 <boot_alloc_page>
c0105104:	a3 64 1c 1b c0       	mov    %eax,0xc01b1c64
    memset(boot_pgdir, 0, PGSIZE);
c0105109:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c010510e:	83 ec 04             	sub    $0x4,%esp
c0105111:	68 00 10 00 00       	push   $0x1000
c0105116:	6a 00                	push   $0x0
c0105118:	50                   	push   %eax
c0105119:	e8 d2 73 00 00       	call   c010c4f0 <memset>
c010511e:	83 c4 10             	add    $0x10,%esp
    boot_cr3 = PADDR(boot_pgdir);
c0105121:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105126:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105129:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105130:	77 17                	ja     c0105149 <pmm_init+0x5f>
c0105132:	ff 75 f4             	pushl  -0xc(%ebp)
c0105135:	68 04 da 10 c0       	push   $0xc010da04
c010513a:	68 3e 01 00 00       	push   $0x13e
c010513f:	68 28 da 10 c0       	push   $0xc010da28
c0105144:	e8 18 c6 ff ff       	call   c0101761 <__panic>
c0105149:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010514c:	05 00 00 00 40       	add    $0x40000000,%eax
c0105151:	a3 60 3d 1b c0       	mov    %eax,0xc01b3d60

    check_pgdir();
c0105156:	e8 27 08 00 00       	call   c0105982 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c010515b:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105160:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0105166:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c010516b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010516e:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0105175:	77 17                	ja     c010518e <pmm_init+0xa4>
c0105177:	ff 75 f0             	pushl  -0x10(%ebp)
c010517a:	68 04 da 10 c0       	push   $0xc010da04
c010517f:	68 46 01 00 00       	push   $0x146
c0105184:	68 28 da 10 c0       	push   $0xc010da28
c0105189:	e8 d3 c5 ff ff       	call   c0101761 <__panic>
c010518e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105191:	05 00 00 00 40       	add    $0x40000000,%eax
c0105196:	83 c8 03             	or     $0x3,%eax
c0105199:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c010519b:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c01051a0:	83 ec 0c             	sub    $0xc,%esp
c01051a3:	6a 02                	push   $0x2
c01051a5:	6a 00                	push   $0x0
c01051a7:	68 00 00 00 38       	push   $0x38000000
c01051ac:	68 00 00 00 c0       	push   $0xc0000000
c01051b1:	50                   	push   %eax
c01051b2:	e8 07 fe ff ff       	call   c0104fbe <boot_map_segment>
c01051b7:	83 c4 20             	add    $0x20,%esp

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c01051ba:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c01051bf:	8b 15 64 1c 1b c0    	mov    0xc01b1c64,%edx
c01051c5:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c01051cb:	89 10                	mov    %edx,(%eax)

    enable_paging();
c01051cd:	e8 b2 fd ff ff       	call   c0104f84 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c01051d2:	e8 dc f7 ff ff       	call   c01049b3 <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c01051d7:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c01051dc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c01051e2:	e8 01 0d 00 00       	call   c0105ee8 <check_boot_pgdir>

    print_pgdir();
c01051e7:	e8 f7 10 00 00       	call   c01062e3 <print_pgdir>
    
    kmalloc_init();
c01051ec:	e8 3f 33 00 00       	call   c0108530 <kmalloc_init>

}
c01051f1:	90                   	nop
c01051f2:	c9                   	leave  
c01051f3:	c3                   	ret    

c01051f4 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c01051f4:	55                   	push   %ebp
c01051f5:	89 e5                	mov    %esp,%ebp
c01051f7:	83 ec 28             	sub    $0x28,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c01051fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01051fd:	c1 e8 16             	shr    $0x16,%eax
c0105200:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105207:	8b 45 08             	mov    0x8(%ebp),%eax
c010520a:	01 d0                	add    %edx,%eax
c010520c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {
c010520f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105212:	8b 00                	mov    (%eax),%eax
c0105214:	83 e0 01             	and    $0x1,%eax
c0105217:	85 c0                	test   %eax,%eax
c0105219:	0f 85 9f 00 00 00    	jne    c01052be <get_pte+0xca>
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c010521f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105223:	74 16                	je     c010523b <get_pte+0x47>
c0105225:	83 ec 0c             	sub    $0xc,%esp
c0105228:	6a 01                	push   $0x1
c010522a:	e8 ca f8 ff ff       	call   c0104af9 <alloc_pages>
c010522f:	83 c4 10             	add    $0x10,%esp
c0105232:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105235:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105239:	75 0a                	jne    c0105245 <get_pte+0x51>
            return NULL;
c010523b:	b8 00 00 00 00       	mov    $0x0,%eax
c0105240:	e9 ca 00 00 00       	jmp    c010530f <get_pte+0x11b>
        }
        set_page_ref(page, 1);
c0105245:	83 ec 08             	sub    $0x8,%esp
c0105248:	6a 01                	push   $0x1
c010524a:	ff 75 f0             	pushl  -0x10(%ebp)
c010524d:	e8 a3 f6 ff ff       	call   c01048f5 <set_page_ref>
c0105252:	83 c4 10             	add    $0x10,%esp
        uintptr_t pa = page2pa(page);
c0105255:	83 ec 0c             	sub    $0xc,%esp
c0105258:	ff 75 f0             	pushl  -0x10(%ebp)
c010525b:	e8 96 f5 ff ff       	call   c01047f6 <page2pa>
c0105260:	83 c4 10             	add    $0x10,%esp
c0105263:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c0105266:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105269:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010526c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010526f:	c1 e8 0c             	shr    $0xc,%eax
c0105272:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105275:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c010527a:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010527d:	72 17                	jb     c0105296 <get_pte+0xa2>
c010527f:	ff 75 e8             	pushl  -0x18(%ebp)
c0105282:	68 60 d9 10 c0       	push   $0xc010d960
c0105287:	68 97 01 00 00       	push   $0x197
c010528c:	68 28 da 10 c0       	push   $0xc010da28
c0105291:	e8 cb c4 ff ff       	call   c0101761 <__panic>
c0105296:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105299:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010529e:	83 ec 04             	sub    $0x4,%esp
c01052a1:	68 00 10 00 00       	push   $0x1000
c01052a6:	6a 00                	push   $0x0
c01052a8:	50                   	push   %eax
c01052a9:	e8 42 72 00 00       	call   c010c4f0 <memset>
c01052ae:	83 c4 10             	add    $0x10,%esp
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c01052b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01052b4:	83 c8 07             	or     $0x7,%eax
c01052b7:	89 c2                	mov    %eax,%edx
c01052b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052bc:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c01052be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052c1:	8b 00                	mov    (%eax),%eax
c01052c3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01052c8:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01052cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01052ce:	c1 e8 0c             	shr    $0xc,%eax
c01052d1:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01052d4:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c01052d9:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c01052dc:	72 17                	jb     c01052f5 <get_pte+0x101>
c01052de:	ff 75 e0             	pushl  -0x20(%ebp)
c01052e1:	68 60 d9 10 c0       	push   $0xc010d960
c01052e6:	68 9a 01 00 00       	push   $0x19a
c01052eb:	68 28 da 10 c0       	push   $0xc010da28
c01052f0:	e8 6c c4 ff ff       	call   c0101761 <__panic>
c01052f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01052f8:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01052fd:	89 c2                	mov    %eax,%edx
c01052ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105302:	c1 e8 0c             	shr    $0xc,%eax
c0105305:	25 ff 03 00 00       	and    $0x3ff,%eax
c010530a:	c1 e0 02             	shl    $0x2,%eax
c010530d:	01 d0                	add    %edx,%eax
}
c010530f:	c9                   	leave  
c0105310:	c3                   	ret    

c0105311 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0105311:	55                   	push   %ebp
c0105312:	89 e5                	mov    %esp,%ebp
c0105314:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105317:	83 ec 04             	sub    $0x4,%esp
c010531a:	6a 00                	push   $0x0
c010531c:	ff 75 0c             	pushl  0xc(%ebp)
c010531f:	ff 75 08             	pushl  0x8(%ebp)
c0105322:	e8 cd fe ff ff       	call   c01051f4 <get_pte>
c0105327:	83 c4 10             	add    $0x10,%esp
c010532a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c010532d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105331:	74 08                	je     c010533b <get_page+0x2a>
        *ptep_store = ptep;
c0105333:	8b 45 10             	mov    0x10(%ebp),%eax
c0105336:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105339:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c010533b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010533f:	74 1f                	je     c0105360 <get_page+0x4f>
c0105341:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105344:	8b 00                	mov    (%eax),%eax
c0105346:	83 e0 01             	and    $0x1,%eax
c0105349:	85 c0                	test   %eax,%eax
c010534b:	74 13                	je     c0105360 <get_page+0x4f>
        return pte2page(*ptep);
c010534d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105350:	8b 00                	mov    (%eax),%eax
c0105352:	83 ec 0c             	sub    $0xc,%esp
c0105355:	50                   	push   %eax
c0105356:	e8 3a f5 ff ff       	call   c0104895 <pte2page>
c010535b:	83 c4 10             	add    $0x10,%esp
c010535e:	eb 05                	jmp    c0105365 <get_page+0x54>
    }
    return NULL;
c0105360:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105365:	c9                   	leave  
c0105366:	c3                   	ret    

c0105367 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0105367:	55                   	push   %ebp
c0105368:	89 e5                	mov    %esp,%ebp
c010536a:	83 ec 18             	sub    $0x18,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c010536d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105370:	8b 00                	mov    (%eax),%eax
c0105372:	83 e0 01             	and    $0x1,%eax
c0105375:	85 c0                	test   %eax,%eax
c0105377:	74 50                	je     c01053c9 <page_remove_pte+0x62>
        struct Page *page = pte2page(*ptep);
c0105379:	8b 45 10             	mov    0x10(%ebp),%eax
c010537c:	8b 00                	mov    (%eax),%eax
c010537e:	83 ec 0c             	sub    $0xc,%esp
c0105381:	50                   	push   %eax
c0105382:	e8 0e f5 ff ff       	call   c0104895 <pte2page>
c0105387:	83 c4 10             	add    $0x10,%esp
c010538a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {
c010538d:	83 ec 0c             	sub    $0xc,%esp
c0105390:	ff 75 f4             	pushl  -0xc(%ebp)
c0105393:	e8 82 f5 ff ff       	call   c010491a <page_ref_dec>
c0105398:	83 c4 10             	add    $0x10,%esp
c010539b:	85 c0                	test   %eax,%eax
c010539d:	75 10                	jne    c01053af <page_remove_pte+0x48>
            free_page(page);
c010539f:	83 ec 08             	sub    $0x8,%esp
c01053a2:	6a 01                	push   $0x1
c01053a4:	ff 75 f4             	pushl  -0xc(%ebp)
c01053a7:	e8 b9 f7 ff ff       	call   c0104b65 <free_pages>
c01053ac:	83 c4 10             	add    $0x10,%esp
        }
        *ptep = 0;
c01053af:	8b 45 10             	mov    0x10(%ebp),%eax
c01053b2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c01053b8:	83 ec 08             	sub    $0x8,%esp
c01053bb:	ff 75 0c             	pushl  0xc(%ebp)
c01053be:	ff 75 08             	pushl  0x8(%ebp)
c01053c1:	e8 98 04 00 00       	call   c010585e <tlb_invalidate>
c01053c6:	83 c4 10             	add    $0x10,%esp
    }
}
c01053c9:	90                   	nop
c01053ca:	c9                   	leave  
c01053cb:	c3                   	ret    

c01053cc <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c01053cc:	55                   	push   %ebp
c01053cd:	89 e5                	mov    %esp,%ebp
c01053cf:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c01053d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01053d5:	25 ff 0f 00 00       	and    $0xfff,%eax
c01053da:	85 c0                	test   %eax,%eax
c01053dc:	75 0c                	jne    c01053ea <unmap_range+0x1e>
c01053de:	8b 45 10             	mov    0x10(%ebp),%eax
c01053e1:	25 ff 0f 00 00       	and    $0xfff,%eax
c01053e6:	85 c0                	test   %eax,%eax
c01053e8:	74 19                	je     c0105403 <unmap_range+0x37>
c01053ea:	68 88 da 10 c0       	push   $0xc010da88
c01053ef:	68 4d da 10 c0       	push   $0xc010da4d
c01053f4:	68 d4 01 00 00       	push   $0x1d4
c01053f9:	68 28 da 10 c0       	push   $0xc010da28
c01053fe:	e8 5e c3 ff ff       	call   c0101761 <__panic>
    assert(USER_ACCESS(start, end));
c0105403:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010540a:	76 11                	jbe    c010541d <unmap_range+0x51>
c010540c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010540f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105412:	73 09                	jae    c010541d <unmap_range+0x51>
c0105414:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c010541b:	76 19                	jbe    c0105436 <unmap_range+0x6a>
c010541d:	68 b1 da 10 c0       	push   $0xc010dab1
c0105422:	68 4d da 10 c0       	push   $0xc010da4d
c0105427:	68 d5 01 00 00       	push   $0x1d5
c010542c:	68 28 da 10 c0       	push   $0xc010da28
c0105431:	e8 2b c3 ff ff       	call   c0101761 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105436:	83 ec 04             	sub    $0x4,%esp
c0105439:	6a 00                	push   $0x0
c010543b:	ff 75 0c             	pushl  0xc(%ebp)
c010543e:	ff 75 08             	pushl  0x8(%ebp)
c0105441:	e8 ae fd ff ff       	call   c01051f4 <get_pte>
c0105446:	83 c4 10             	add    $0x10,%esp
c0105449:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c010544c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105450:	75 18                	jne    c010546a <unmap_range+0x9e>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105452:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105455:	05 00 00 40 00       	add    $0x400000,%eax
c010545a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010545d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105460:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105465:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105468:	eb 24                	jmp    c010548e <unmap_range+0xc2>
        }
        if (*ptep != 0) {
c010546a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010546d:	8b 00                	mov    (%eax),%eax
c010546f:	85 c0                	test   %eax,%eax
c0105471:	74 14                	je     c0105487 <unmap_range+0xbb>
            page_remove_pte(pgdir, start, ptep);
c0105473:	83 ec 04             	sub    $0x4,%esp
c0105476:	ff 75 f4             	pushl  -0xc(%ebp)
c0105479:	ff 75 0c             	pushl  0xc(%ebp)
c010547c:	ff 75 08             	pushl  0x8(%ebp)
c010547f:	e8 e3 fe ff ff       	call   c0105367 <page_remove_pte>
c0105484:	83 c4 10             	add    $0x10,%esp
        }
        start += PGSIZE;
c0105487:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c010548e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105492:	74 08                	je     c010549c <unmap_range+0xd0>
c0105494:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105497:	3b 45 10             	cmp    0x10(%ebp),%eax
c010549a:	72 9a                	jb     c0105436 <unmap_range+0x6a>
}
c010549c:	90                   	nop
c010549d:	c9                   	leave  
c010549e:	c3                   	ret    

c010549f <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c010549f:	55                   	push   %ebp
c01054a0:	89 e5                	mov    %esp,%ebp
c01054a2:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c01054a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01054a8:	25 ff 0f 00 00       	and    $0xfff,%eax
c01054ad:	85 c0                	test   %eax,%eax
c01054af:	75 0c                	jne    c01054bd <exit_range+0x1e>
c01054b1:	8b 45 10             	mov    0x10(%ebp),%eax
c01054b4:	25 ff 0f 00 00       	and    $0xfff,%eax
c01054b9:	85 c0                	test   %eax,%eax
c01054bb:	74 19                	je     c01054d6 <exit_range+0x37>
c01054bd:	68 88 da 10 c0       	push   $0xc010da88
c01054c2:	68 4d da 10 c0       	push   $0xc010da4d
c01054c7:	68 e6 01 00 00       	push   $0x1e6
c01054cc:	68 28 da 10 c0       	push   $0xc010da28
c01054d1:	e8 8b c2 ff ff       	call   c0101761 <__panic>
    assert(USER_ACCESS(start, end));
c01054d6:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c01054dd:	76 11                	jbe    c01054f0 <exit_range+0x51>
c01054df:	8b 45 0c             	mov    0xc(%ebp),%eax
c01054e2:	3b 45 10             	cmp    0x10(%ebp),%eax
c01054e5:	73 09                	jae    c01054f0 <exit_range+0x51>
c01054e7:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c01054ee:	76 19                	jbe    c0105509 <exit_range+0x6a>
c01054f0:	68 b1 da 10 c0       	push   $0xc010dab1
c01054f5:	68 4d da 10 c0       	push   $0xc010da4d
c01054fa:	68 e7 01 00 00       	push   $0x1e7
c01054ff:	68 28 da 10 c0       	push   $0xc010da28
c0105504:	e8 58 c2 ff ff       	call   c0101761 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105509:	8b 45 0c             	mov    0xc(%ebp),%eax
c010550c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010550f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105512:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105517:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c010551a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010551d:	c1 e8 16             	shr    $0x16,%eax
c0105520:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105523:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105526:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010552d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105530:	01 d0                	add    %edx,%eax
c0105532:	8b 00                	mov    (%eax),%eax
c0105534:	83 e0 01             	and    $0x1,%eax
c0105537:	85 c0                	test   %eax,%eax
c0105539:	74 40                	je     c010557b <exit_range+0xdc>
            free_page(pde2page(pgdir[pde_idx]));
c010553b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010553e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105545:	8b 45 08             	mov    0x8(%ebp),%eax
c0105548:	01 d0                	add    %edx,%eax
c010554a:	8b 00                	mov    (%eax),%eax
c010554c:	83 ec 0c             	sub    $0xc,%esp
c010554f:	50                   	push   %eax
c0105550:	e8 7a f3 ff ff       	call   c01048cf <pde2page>
c0105555:	83 c4 10             	add    $0x10,%esp
c0105558:	83 ec 08             	sub    $0x8,%esp
c010555b:	6a 01                	push   $0x1
c010555d:	50                   	push   %eax
c010555e:	e8 02 f6 ff ff       	call   c0104b65 <free_pages>
c0105563:	83 c4 10             	add    $0x10,%esp
            pgdir[pde_idx] = 0;
c0105566:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105569:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105570:	8b 45 08             	mov    0x8(%ebp),%eax
c0105573:	01 d0                	add    %edx,%eax
c0105575:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c010557b:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105582:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105586:	74 08                	je     c0105590 <exit_range+0xf1>
c0105588:	8b 45 0c             	mov    0xc(%ebp),%eax
c010558b:	3b 45 10             	cmp    0x10(%ebp),%eax
c010558e:	72 8a                	jb     c010551a <exit_range+0x7b>
}
c0105590:	90                   	nop
c0105591:	c9                   	leave  
c0105592:	c3                   	ret    

c0105593 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105593:	55                   	push   %ebp
c0105594:	89 e5                	mov    %esp,%ebp
c0105596:	83 ec 38             	sub    $0x38,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105599:	8b 45 10             	mov    0x10(%ebp),%eax
c010559c:	25 ff 0f 00 00       	and    $0xfff,%eax
c01055a1:	85 c0                	test   %eax,%eax
c01055a3:	75 0c                	jne    c01055b1 <copy_range+0x1e>
c01055a5:	8b 45 14             	mov    0x14(%ebp),%eax
c01055a8:	25 ff 0f 00 00       	and    $0xfff,%eax
c01055ad:	85 c0                	test   %eax,%eax
c01055af:	74 19                	je     c01055ca <copy_range+0x37>
c01055b1:	68 88 da 10 c0       	push   $0xc010da88
c01055b6:	68 4d da 10 c0       	push   $0xc010da4d
c01055bb:	68 fc 01 00 00       	push   $0x1fc
c01055c0:	68 28 da 10 c0       	push   $0xc010da28
c01055c5:	e8 97 c1 ff ff       	call   c0101761 <__panic>
    assert(USER_ACCESS(start, end));
c01055ca:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c01055d1:	76 11                	jbe    c01055e4 <copy_range+0x51>
c01055d3:	8b 45 10             	mov    0x10(%ebp),%eax
c01055d6:	3b 45 14             	cmp    0x14(%ebp),%eax
c01055d9:	73 09                	jae    c01055e4 <copy_range+0x51>
c01055db:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c01055e2:	76 19                	jbe    c01055fd <copy_range+0x6a>
c01055e4:	68 b1 da 10 c0       	push   $0xc010dab1
c01055e9:	68 4d da 10 c0       	push   $0xc010da4d
c01055ee:	68 fd 01 00 00       	push   $0x1fd
c01055f3:	68 28 da 10 c0       	push   $0xc010da28
c01055f8:	e8 64 c1 ff ff       	call   c0101761 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c01055fd:	83 ec 04             	sub    $0x4,%esp
c0105600:	6a 00                	push   $0x0
c0105602:	ff 75 10             	pushl  0x10(%ebp)
c0105605:	ff 75 0c             	pushl  0xc(%ebp)
c0105608:	e8 e7 fb ff ff       	call   c01051f4 <get_pte>
c010560d:	83 c4 10             	add    $0x10,%esp
c0105610:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105613:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105617:	75 1b                	jne    c0105634 <copy_range+0xa1>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105619:	8b 45 10             	mov    0x10(%ebp),%eax
c010561c:	05 00 00 40 00       	add    $0x400000,%eax
c0105621:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105624:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105627:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c010562c:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c010562f:	e9 1f 01 00 00       	jmp    c0105753 <copy_range+0x1c0>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105634:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105637:	8b 00                	mov    (%eax),%eax
c0105639:	83 e0 01             	and    $0x1,%eax
c010563c:	85 c0                	test   %eax,%eax
c010563e:	0f 84 08 01 00 00    	je     c010574c <copy_range+0x1b9>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105644:	83 ec 04             	sub    $0x4,%esp
c0105647:	6a 01                	push   $0x1
c0105649:	ff 75 10             	pushl  0x10(%ebp)
c010564c:	ff 75 08             	pushl  0x8(%ebp)
c010564f:	e8 a0 fb ff ff       	call   c01051f4 <get_pte>
c0105654:	83 c4 10             	add    $0x10,%esp
c0105657:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010565a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010565e:	75 0a                	jne    c010566a <copy_range+0xd7>
                return -E_NO_MEM;
c0105660:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105665:	e9 00 01 00 00       	jmp    c010576a <copy_range+0x1d7>
            }
        uint32_t perm = (*ptep & PTE_USER);
c010566a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010566d:	8b 00                	mov    (%eax),%eax
c010566f:	83 e0 07             	and    $0x7,%eax
c0105672:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105675:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105678:	8b 00                	mov    (%eax),%eax
c010567a:	83 ec 0c             	sub    $0xc,%esp
c010567d:	50                   	push   %eax
c010567e:	e8 12 f2 ff ff       	call   c0104895 <pte2page>
c0105683:	83 c4 10             	add    $0x10,%esp
c0105686:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105689:	83 ec 0c             	sub    $0xc,%esp
c010568c:	6a 01                	push   $0x1
c010568e:	e8 66 f4 ff ff       	call   c0104af9 <alloc_pages>
c0105693:	83 c4 10             	add    $0x10,%esp
c0105696:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105699:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010569d:	75 19                	jne    c01056b8 <copy_range+0x125>
c010569f:	68 c9 da 10 c0       	push   $0xc010dac9
c01056a4:	68 4d da 10 c0       	push   $0xc010da4d
c01056a9:	68 10 02 00 00       	push   $0x210
c01056ae:	68 28 da 10 c0       	push   $0xc010da28
c01056b3:	e8 a9 c0 ff ff       	call   c0101761 <__panic>
        assert(npage!=NULL);
c01056b8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01056bc:	75 19                	jne    c01056d7 <copy_range+0x144>
c01056be:	68 d4 da 10 c0       	push   $0xc010dad4
c01056c3:	68 4d da 10 c0       	push   $0xc010da4d
c01056c8:	68 11 02 00 00       	push   $0x211
c01056cd:	68 28 da 10 c0       	push   $0xc010da28
c01056d2:	e8 8a c0 ff ff       	call   c0101761 <__panic>
        int ret=0;
c01056d7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void * kva_src = page2kva(page);
c01056de:	83 ec 0c             	sub    $0xc,%esp
c01056e1:	ff 75 e4             	pushl  -0x1c(%ebp)
c01056e4:	e8 67 f1 ff ff       	call   c0104850 <page2kva>
c01056e9:	83 c4 10             	add    $0x10,%esp
c01056ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
        void * kva_dst = page2kva(npage);
c01056ef:	83 ec 0c             	sub    $0xc,%esp
c01056f2:	ff 75 e0             	pushl  -0x20(%ebp)
c01056f5:	e8 56 f1 ff ff       	call   c0104850 <page2kva>
c01056fa:	83 c4 10             	add    $0x10,%esp
c01056fd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    
        memcpy(kva_dst, kva_src, PGSIZE);
c0105700:	83 ec 04             	sub    $0x4,%esp
c0105703:	68 00 10 00 00       	push   $0x1000
c0105708:	ff 75 d8             	pushl  -0x28(%ebp)
c010570b:	ff 75 d4             	pushl  -0x2c(%ebp)
c010570e:	e8 c0 6e 00 00       	call   c010c5d3 <memcpy>
c0105713:	83 c4 10             	add    $0x10,%esp

        ret = page_insert(to, npage, start, perm);
c0105716:	ff 75 e8             	pushl  -0x18(%ebp)
c0105719:	ff 75 10             	pushl  0x10(%ebp)
c010571c:	ff 75 e0             	pushl  -0x20(%ebp)
c010571f:	ff 75 08             	pushl  0x8(%ebp)
c0105722:	e8 7e 00 00 00       	call   c01057a5 <page_insert>
c0105727:	83 c4 10             	add    $0x10,%esp
c010572a:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c010572d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105731:	74 19                	je     c010574c <copy_range+0x1b9>
c0105733:	68 e0 da 10 c0       	push   $0xc010dae0
c0105738:	68 4d da 10 c0       	push   $0xc010da4d
c010573d:	68 27 02 00 00       	push   $0x227
c0105742:	68 28 da 10 c0       	push   $0xc010da28
c0105747:	e8 15 c0 ff ff       	call   c0101761 <__panic>
        }
        start += PGSIZE;
c010574c:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105753:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105757:	74 0c                	je     c0105765 <copy_range+0x1d2>
c0105759:	8b 45 10             	mov    0x10(%ebp),%eax
c010575c:	3b 45 14             	cmp    0x14(%ebp),%eax
c010575f:	0f 82 98 fe ff ff    	jb     c01055fd <copy_range+0x6a>
    return 0;
c0105765:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010576a:	c9                   	leave  
c010576b:	c3                   	ret    

c010576c <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c010576c:	55                   	push   %ebp
c010576d:	89 e5                	mov    %esp,%ebp
c010576f:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105772:	83 ec 04             	sub    $0x4,%esp
c0105775:	6a 00                	push   $0x0
c0105777:	ff 75 0c             	pushl  0xc(%ebp)
c010577a:	ff 75 08             	pushl  0x8(%ebp)
c010577d:	e8 72 fa ff ff       	call   c01051f4 <get_pte>
c0105782:	83 c4 10             	add    $0x10,%esp
c0105785:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105788:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010578c:	74 14                	je     c01057a2 <page_remove+0x36>
        page_remove_pte(pgdir, la, ptep);
c010578e:	83 ec 04             	sub    $0x4,%esp
c0105791:	ff 75 f4             	pushl  -0xc(%ebp)
c0105794:	ff 75 0c             	pushl  0xc(%ebp)
c0105797:	ff 75 08             	pushl  0x8(%ebp)
c010579a:	e8 c8 fb ff ff       	call   c0105367 <page_remove_pte>
c010579f:	83 c4 10             	add    $0x10,%esp
    }
}
c01057a2:	90                   	nop
c01057a3:	c9                   	leave  
c01057a4:	c3                   	ret    

c01057a5 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c01057a5:	55                   	push   %ebp
c01057a6:	89 e5                	mov    %esp,%ebp
c01057a8:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c01057ab:	83 ec 04             	sub    $0x4,%esp
c01057ae:	6a 01                	push   $0x1
c01057b0:	ff 75 10             	pushl  0x10(%ebp)
c01057b3:	ff 75 08             	pushl  0x8(%ebp)
c01057b6:	e8 39 fa ff ff       	call   c01051f4 <get_pte>
c01057bb:	83 c4 10             	add    $0x10,%esp
c01057be:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c01057c1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01057c5:	75 0a                	jne    c01057d1 <page_insert+0x2c>
        return -E_NO_MEM;
c01057c7:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01057cc:	e9 8b 00 00 00       	jmp    c010585c <page_insert+0xb7>
    }
    page_ref_inc(page);
c01057d1:	83 ec 0c             	sub    $0xc,%esp
c01057d4:	ff 75 0c             	pushl  0xc(%ebp)
c01057d7:	e8 27 f1 ff ff       	call   c0104903 <page_ref_inc>
c01057dc:	83 c4 10             	add    $0x10,%esp
    if (*ptep & PTE_P) {
c01057df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057e2:	8b 00                	mov    (%eax),%eax
c01057e4:	83 e0 01             	and    $0x1,%eax
c01057e7:	85 c0                	test   %eax,%eax
c01057e9:	74 40                	je     c010582b <page_insert+0x86>
        struct Page *p = pte2page(*ptep);
c01057eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057ee:	8b 00                	mov    (%eax),%eax
c01057f0:	83 ec 0c             	sub    $0xc,%esp
c01057f3:	50                   	push   %eax
c01057f4:	e8 9c f0 ff ff       	call   c0104895 <pte2page>
c01057f9:	83 c4 10             	add    $0x10,%esp
c01057fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c01057ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105802:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105805:	75 10                	jne    c0105817 <page_insert+0x72>
            page_ref_dec(page);
c0105807:	83 ec 0c             	sub    $0xc,%esp
c010580a:	ff 75 0c             	pushl  0xc(%ebp)
c010580d:	e8 08 f1 ff ff       	call   c010491a <page_ref_dec>
c0105812:	83 c4 10             	add    $0x10,%esp
c0105815:	eb 14                	jmp    c010582b <page_insert+0x86>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0105817:	83 ec 04             	sub    $0x4,%esp
c010581a:	ff 75 f4             	pushl  -0xc(%ebp)
c010581d:	ff 75 10             	pushl  0x10(%ebp)
c0105820:	ff 75 08             	pushl  0x8(%ebp)
c0105823:	e8 3f fb ff ff       	call   c0105367 <page_remove_pte>
c0105828:	83 c4 10             	add    $0x10,%esp
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c010582b:	83 ec 0c             	sub    $0xc,%esp
c010582e:	ff 75 0c             	pushl  0xc(%ebp)
c0105831:	e8 c0 ef ff ff       	call   c01047f6 <page2pa>
c0105836:	83 c4 10             	add    $0x10,%esp
c0105839:	0b 45 14             	or     0x14(%ebp),%eax
c010583c:	83 c8 01             	or     $0x1,%eax
c010583f:	89 c2                	mov    %eax,%edx
c0105841:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105844:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0105846:	83 ec 08             	sub    $0x8,%esp
c0105849:	ff 75 10             	pushl  0x10(%ebp)
c010584c:	ff 75 08             	pushl  0x8(%ebp)
c010584f:	e8 0a 00 00 00       	call   c010585e <tlb_invalidate>
c0105854:	83 c4 10             	add    $0x10,%esp
    return 0;
c0105857:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010585c:	c9                   	leave  
c010585d:	c3                   	ret    

c010585e <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c010585e:	55                   	push   %ebp
c010585f:	89 e5                	mov    %esp,%ebp
c0105861:	83 ec 18             	sub    $0x18,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0105864:	0f 20 d8             	mov    %cr3,%eax
c0105867:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return cr3;
c010586a:	8b 55 ec             	mov    -0x14(%ebp),%edx
    if (rcr3() == PADDR(pgdir)) {
c010586d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105870:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105873:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c010587a:	77 17                	ja     c0105893 <tlb_invalidate+0x35>
c010587c:	ff 75 f0             	pushl  -0x10(%ebp)
c010587f:	68 04 da 10 c0       	push   $0xc010da04
c0105884:	68 58 02 00 00       	push   $0x258
c0105889:	68 28 da 10 c0       	push   $0xc010da28
c010588e:	e8 ce be ff ff       	call   c0101761 <__panic>
c0105893:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105896:	05 00 00 00 40       	add    $0x40000000,%eax
c010589b:	39 c2                	cmp    %eax,%edx
c010589d:	75 0c                	jne    c01058ab <tlb_invalidate+0x4d>
        invlpg((void *)la);
c010589f:	8b 45 0c             	mov    0xc(%ebp),%eax
c01058a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c01058a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058a8:	0f 01 38             	invlpg (%eax)
    }
}
c01058ab:	90                   	nop
c01058ac:	c9                   	leave  
c01058ad:	c3                   	ret    

c01058ae <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c01058ae:	55                   	push   %ebp
c01058af:	89 e5                	mov    %esp,%ebp
c01058b1:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_page();
c01058b4:	83 ec 0c             	sub    $0xc,%esp
c01058b7:	6a 01                	push   $0x1
c01058b9:	e8 3b f2 ff ff       	call   c0104af9 <alloc_pages>
c01058be:	83 c4 10             	add    $0x10,%esp
c01058c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c01058c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01058c8:	0f 84 8c 00 00 00    	je     c010595a <pgdir_alloc_page+0xac>
        if (page_insert(pgdir, page, la, perm) != 0) {
c01058ce:	ff 75 10             	pushl  0x10(%ebp)
c01058d1:	ff 75 0c             	pushl  0xc(%ebp)
c01058d4:	ff 75 f4             	pushl  -0xc(%ebp)
c01058d7:	ff 75 08             	pushl  0x8(%ebp)
c01058da:	e8 c6 fe ff ff       	call   c01057a5 <page_insert>
c01058df:	83 c4 10             	add    $0x10,%esp
c01058e2:	85 c0                	test   %eax,%eax
c01058e4:	74 17                	je     c01058fd <pgdir_alloc_page+0x4f>
            free_page(page);
c01058e6:	83 ec 08             	sub    $0x8,%esp
c01058e9:	6a 01                	push   $0x1
c01058eb:	ff 75 f4             	pushl  -0xc(%ebp)
c01058ee:	e8 72 f2 ff ff       	call   c0104b65 <free_pages>
c01058f3:	83 c4 10             	add    $0x10,%esp
            return NULL;
c01058f6:	b8 00 00 00 00       	mov    $0x0,%eax
c01058fb:	eb 60                	jmp    c010595d <pgdir_alloc_page+0xaf>
        }
        if (swap_init_ok){
c01058fd:	a1 f0 1c 1b c0       	mov    0xc01b1cf0,%eax
c0105902:	85 c0                	test   %eax,%eax
c0105904:	74 54                	je     c010595a <pgdir_alloc_page+0xac>
            if(check_mm_struct!=NULL) {
c0105906:	a1 68 3d 1b c0       	mov    0xc01b3d68,%eax
c010590b:	85 c0                	test   %eax,%eax
c010590d:	74 4b                	je     c010595a <pgdir_alloc_page+0xac>
                swap_map_swappable(check_mm_struct, la, page, 0);
c010590f:	a1 68 3d 1b c0       	mov    0xc01b3d68,%eax
c0105914:	6a 00                	push   $0x0
c0105916:	ff 75 f4             	pushl  -0xc(%ebp)
c0105919:	ff 75 0c             	pushl  0xc(%ebp)
c010591c:	50                   	push   %eax
c010591d:	e8 91 1d 00 00       	call   c01076b3 <swap_map_swappable>
c0105922:	83 c4 10             	add    $0x10,%esp
                page->pra_vaddr=la;
c0105925:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105928:	8b 55 0c             	mov    0xc(%ebp),%edx
c010592b:	89 50 20             	mov    %edx,0x20(%eax)
                assert(page_ref(page) == 1);
c010592e:	83 ec 0c             	sub    $0xc,%esp
c0105931:	ff 75 f4             	pushl  -0xc(%ebp)
c0105934:	e8 b2 ef ff ff       	call   c01048eb <page_ref>
c0105939:	83 c4 10             	add    $0x10,%esp
c010593c:	83 f8 01             	cmp    $0x1,%eax
c010593f:	74 19                	je     c010595a <pgdir_alloc_page+0xac>
c0105941:	68 e9 da 10 c0       	push   $0xc010dae9
c0105946:	68 4d da 10 c0       	push   $0xc010da4d
c010594b:	68 6c 02 00 00       	push   $0x26c
c0105950:	68 28 da 10 c0       	push   $0xc010da28
c0105955:	e8 07 be ff ff       	call   c0101761 <__panic>
            }
        }

    }

    return page;
c010595a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010595d:	c9                   	leave  
c010595e:	c3                   	ret    

c010595f <check_alloc_page>:

static void
check_alloc_page(void) {
c010595f:	55                   	push   %ebp
c0105960:	89 e5                	mov    %esp,%ebp
c0105962:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->check();
c0105965:	a1 5c 3d 1b c0       	mov    0xc01b3d5c,%eax
c010596a:	8b 40 18             	mov    0x18(%eax),%eax
c010596d:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c010596f:	83 ec 0c             	sub    $0xc,%esp
c0105972:	68 00 db 10 c0       	push   $0xc010db00
c0105977:	e8 07 a9 ff ff       	call   c0100283 <cprintf>
c010597c:	83 c4 10             	add    $0x10,%esp
}
c010597f:	90                   	nop
c0105980:	c9                   	leave  
c0105981:	c3                   	ret    

c0105982 <check_pgdir>:

static void
check_pgdir(void) {
c0105982:	55                   	push   %ebp
c0105983:	89 e5                	mov    %esp,%ebp
c0105985:	83 ec 28             	sub    $0x28,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c0105988:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c010598d:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0105992:	76 19                	jbe    c01059ad <check_pgdir+0x2b>
c0105994:	68 1f db 10 c0       	push   $0xc010db1f
c0105999:	68 4d da 10 c0       	push   $0xc010da4d
c010599e:	68 84 02 00 00       	push   $0x284
c01059a3:	68 28 da 10 c0       	push   $0xc010da28
c01059a8:	e8 b4 bd ff ff       	call   c0101761 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c01059ad:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c01059b2:	85 c0                	test   %eax,%eax
c01059b4:	74 0e                	je     c01059c4 <check_pgdir+0x42>
c01059b6:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c01059bb:	25 ff 0f 00 00       	and    $0xfff,%eax
c01059c0:	85 c0                	test   %eax,%eax
c01059c2:	74 19                	je     c01059dd <check_pgdir+0x5b>
c01059c4:	68 3c db 10 c0       	push   $0xc010db3c
c01059c9:	68 4d da 10 c0       	push   $0xc010da4d
c01059ce:	68 85 02 00 00       	push   $0x285
c01059d3:	68 28 da 10 c0       	push   $0xc010da28
c01059d8:	e8 84 bd ff ff       	call   c0101761 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c01059dd:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c01059e2:	83 ec 04             	sub    $0x4,%esp
c01059e5:	6a 00                	push   $0x0
c01059e7:	6a 00                	push   $0x0
c01059e9:	50                   	push   %eax
c01059ea:	e8 22 f9 ff ff       	call   c0105311 <get_page>
c01059ef:	83 c4 10             	add    $0x10,%esp
c01059f2:	85 c0                	test   %eax,%eax
c01059f4:	74 19                	je     c0105a0f <check_pgdir+0x8d>
c01059f6:	68 74 db 10 c0       	push   $0xc010db74
c01059fb:	68 4d da 10 c0       	push   $0xc010da4d
c0105a00:	68 86 02 00 00       	push   $0x286
c0105a05:	68 28 da 10 c0       	push   $0xc010da28
c0105a0a:	e8 52 bd ff ff       	call   c0101761 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c0105a0f:	83 ec 0c             	sub    $0xc,%esp
c0105a12:	6a 01                	push   $0x1
c0105a14:	e8 e0 f0 ff ff       	call   c0104af9 <alloc_pages>
c0105a19:	83 c4 10             	add    $0x10,%esp
c0105a1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c0105a1f:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105a24:	6a 00                	push   $0x0
c0105a26:	6a 00                	push   $0x0
c0105a28:	ff 75 f4             	pushl  -0xc(%ebp)
c0105a2b:	50                   	push   %eax
c0105a2c:	e8 74 fd ff ff       	call   c01057a5 <page_insert>
c0105a31:	83 c4 10             	add    $0x10,%esp
c0105a34:	85 c0                	test   %eax,%eax
c0105a36:	74 19                	je     c0105a51 <check_pgdir+0xcf>
c0105a38:	68 9c db 10 c0       	push   $0xc010db9c
c0105a3d:	68 4d da 10 c0       	push   $0xc010da4d
c0105a42:	68 8a 02 00 00       	push   $0x28a
c0105a47:	68 28 da 10 c0       	push   $0xc010da28
c0105a4c:	e8 10 bd ff ff       	call   c0101761 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0105a51:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105a56:	83 ec 04             	sub    $0x4,%esp
c0105a59:	6a 00                	push   $0x0
c0105a5b:	6a 00                	push   $0x0
c0105a5d:	50                   	push   %eax
c0105a5e:	e8 91 f7 ff ff       	call   c01051f4 <get_pte>
c0105a63:	83 c4 10             	add    $0x10,%esp
c0105a66:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105a69:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105a6d:	75 19                	jne    c0105a88 <check_pgdir+0x106>
c0105a6f:	68 c8 db 10 c0       	push   $0xc010dbc8
c0105a74:	68 4d da 10 c0       	push   $0xc010da4d
c0105a79:	68 8d 02 00 00       	push   $0x28d
c0105a7e:	68 28 da 10 c0       	push   $0xc010da28
c0105a83:	e8 d9 bc ff ff       	call   c0101761 <__panic>
    assert(pte2page(*ptep) == p1);
c0105a88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a8b:	8b 00                	mov    (%eax),%eax
c0105a8d:	83 ec 0c             	sub    $0xc,%esp
c0105a90:	50                   	push   %eax
c0105a91:	e8 ff ed ff ff       	call   c0104895 <pte2page>
c0105a96:	83 c4 10             	add    $0x10,%esp
c0105a99:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105a9c:	74 19                	je     c0105ab7 <check_pgdir+0x135>
c0105a9e:	68 f5 db 10 c0       	push   $0xc010dbf5
c0105aa3:	68 4d da 10 c0       	push   $0xc010da4d
c0105aa8:	68 8e 02 00 00       	push   $0x28e
c0105aad:	68 28 da 10 c0       	push   $0xc010da28
c0105ab2:	e8 aa bc ff ff       	call   c0101761 <__panic>
    assert(page_ref(p1) == 1);
c0105ab7:	83 ec 0c             	sub    $0xc,%esp
c0105aba:	ff 75 f4             	pushl  -0xc(%ebp)
c0105abd:	e8 29 ee ff ff       	call   c01048eb <page_ref>
c0105ac2:	83 c4 10             	add    $0x10,%esp
c0105ac5:	83 f8 01             	cmp    $0x1,%eax
c0105ac8:	74 19                	je     c0105ae3 <check_pgdir+0x161>
c0105aca:	68 0b dc 10 c0       	push   $0xc010dc0b
c0105acf:	68 4d da 10 c0       	push   $0xc010da4d
c0105ad4:	68 8f 02 00 00       	push   $0x28f
c0105ad9:	68 28 da 10 c0       	push   $0xc010da28
c0105ade:	e8 7e bc ff ff       	call   c0101761 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c0105ae3:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105ae8:	8b 00                	mov    (%eax),%eax
c0105aea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105aef:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105af2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105af5:	c1 e8 0c             	shr    $0xc,%eax
c0105af8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105afb:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c0105b00:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0105b03:	72 17                	jb     c0105b1c <check_pgdir+0x19a>
c0105b05:	ff 75 ec             	pushl  -0x14(%ebp)
c0105b08:	68 60 d9 10 c0       	push   $0xc010d960
c0105b0d:	68 91 02 00 00       	push   $0x291
c0105b12:	68 28 da 10 c0       	push   $0xc010da28
c0105b17:	e8 45 bc ff ff       	call   c0101761 <__panic>
c0105b1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105b1f:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105b24:	83 c0 04             	add    $0x4,%eax
c0105b27:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c0105b2a:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105b2f:	83 ec 04             	sub    $0x4,%esp
c0105b32:	6a 00                	push   $0x0
c0105b34:	68 00 10 00 00       	push   $0x1000
c0105b39:	50                   	push   %eax
c0105b3a:	e8 b5 f6 ff ff       	call   c01051f4 <get_pte>
c0105b3f:	83 c4 10             	add    $0x10,%esp
c0105b42:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105b45:	74 19                	je     c0105b60 <check_pgdir+0x1de>
c0105b47:	68 20 dc 10 c0       	push   $0xc010dc20
c0105b4c:	68 4d da 10 c0       	push   $0xc010da4d
c0105b51:	68 92 02 00 00       	push   $0x292
c0105b56:	68 28 da 10 c0       	push   $0xc010da28
c0105b5b:	e8 01 bc ff ff       	call   c0101761 <__panic>

    p2 = alloc_page();
c0105b60:	83 ec 0c             	sub    $0xc,%esp
c0105b63:	6a 01                	push   $0x1
c0105b65:	e8 8f ef ff ff       	call   c0104af9 <alloc_pages>
c0105b6a:	83 c4 10             	add    $0x10,%esp
c0105b6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0105b70:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105b75:	6a 06                	push   $0x6
c0105b77:	68 00 10 00 00       	push   $0x1000
c0105b7c:	ff 75 e4             	pushl  -0x1c(%ebp)
c0105b7f:	50                   	push   %eax
c0105b80:	e8 20 fc ff ff       	call   c01057a5 <page_insert>
c0105b85:	83 c4 10             	add    $0x10,%esp
c0105b88:	85 c0                	test   %eax,%eax
c0105b8a:	74 19                	je     c0105ba5 <check_pgdir+0x223>
c0105b8c:	68 48 dc 10 c0       	push   $0xc010dc48
c0105b91:	68 4d da 10 c0       	push   $0xc010da4d
c0105b96:	68 95 02 00 00       	push   $0x295
c0105b9b:	68 28 da 10 c0       	push   $0xc010da28
c0105ba0:	e8 bc bb ff ff       	call   c0101761 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0105ba5:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105baa:	83 ec 04             	sub    $0x4,%esp
c0105bad:	6a 00                	push   $0x0
c0105baf:	68 00 10 00 00       	push   $0x1000
c0105bb4:	50                   	push   %eax
c0105bb5:	e8 3a f6 ff ff       	call   c01051f4 <get_pte>
c0105bba:	83 c4 10             	add    $0x10,%esp
c0105bbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105bc0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105bc4:	75 19                	jne    c0105bdf <check_pgdir+0x25d>
c0105bc6:	68 80 dc 10 c0       	push   $0xc010dc80
c0105bcb:	68 4d da 10 c0       	push   $0xc010da4d
c0105bd0:	68 96 02 00 00       	push   $0x296
c0105bd5:	68 28 da 10 c0       	push   $0xc010da28
c0105bda:	e8 82 bb ff ff       	call   c0101761 <__panic>
    assert(*ptep & PTE_U);
c0105bdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105be2:	8b 00                	mov    (%eax),%eax
c0105be4:	83 e0 04             	and    $0x4,%eax
c0105be7:	85 c0                	test   %eax,%eax
c0105be9:	75 19                	jne    c0105c04 <check_pgdir+0x282>
c0105beb:	68 b0 dc 10 c0       	push   $0xc010dcb0
c0105bf0:	68 4d da 10 c0       	push   $0xc010da4d
c0105bf5:	68 97 02 00 00       	push   $0x297
c0105bfa:	68 28 da 10 c0       	push   $0xc010da28
c0105bff:	e8 5d bb ff ff       	call   c0101761 <__panic>
    assert(*ptep & PTE_W);
c0105c04:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c07:	8b 00                	mov    (%eax),%eax
c0105c09:	83 e0 02             	and    $0x2,%eax
c0105c0c:	85 c0                	test   %eax,%eax
c0105c0e:	75 19                	jne    c0105c29 <check_pgdir+0x2a7>
c0105c10:	68 be dc 10 c0       	push   $0xc010dcbe
c0105c15:	68 4d da 10 c0       	push   $0xc010da4d
c0105c1a:	68 98 02 00 00       	push   $0x298
c0105c1f:	68 28 da 10 c0       	push   $0xc010da28
c0105c24:	e8 38 bb ff ff       	call   c0101761 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0105c29:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105c2e:	8b 00                	mov    (%eax),%eax
c0105c30:	83 e0 04             	and    $0x4,%eax
c0105c33:	85 c0                	test   %eax,%eax
c0105c35:	75 19                	jne    c0105c50 <check_pgdir+0x2ce>
c0105c37:	68 cc dc 10 c0       	push   $0xc010dccc
c0105c3c:	68 4d da 10 c0       	push   $0xc010da4d
c0105c41:	68 99 02 00 00       	push   $0x299
c0105c46:	68 28 da 10 c0       	push   $0xc010da28
c0105c4b:	e8 11 bb ff ff       	call   c0101761 <__panic>
    assert(page_ref(p2) == 1);
c0105c50:	83 ec 0c             	sub    $0xc,%esp
c0105c53:	ff 75 e4             	pushl  -0x1c(%ebp)
c0105c56:	e8 90 ec ff ff       	call   c01048eb <page_ref>
c0105c5b:	83 c4 10             	add    $0x10,%esp
c0105c5e:	83 f8 01             	cmp    $0x1,%eax
c0105c61:	74 19                	je     c0105c7c <check_pgdir+0x2fa>
c0105c63:	68 e2 dc 10 c0       	push   $0xc010dce2
c0105c68:	68 4d da 10 c0       	push   $0xc010da4d
c0105c6d:	68 9a 02 00 00       	push   $0x29a
c0105c72:	68 28 da 10 c0       	push   $0xc010da28
c0105c77:	e8 e5 ba ff ff       	call   c0101761 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0105c7c:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105c81:	6a 00                	push   $0x0
c0105c83:	68 00 10 00 00       	push   $0x1000
c0105c88:	ff 75 f4             	pushl  -0xc(%ebp)
c0105c8b:	50                   	push   %eax
c0105c8c:	e8 14 fb ff ff       	call   c01057a5 <page_insert>
c0105c91:	83 c4 10             	add    $0x10,%esp
c0105c94:	85 c0                	test   %eax,%eax
c0105c96:	74 19                	je     c0105cb1 <check_pgdir+0x32f>
c0105c98:	68 f4 dc 10 c0       	push   $0xc010dcf4
c0105c9d:	68 4d da 10 c0       	push   $0xc010da4d
c0105ca2:	68 9c 02 00 00       	push   $0x29c
c0105ca7:	68 28 da 10 c0       	push   $0xc010da28
c0105cac:	e8 b0 ba ff ff       	call   c0101761 <__panic>
    assert(page_ref(p1) == 2);
c0105cb1:	83 ec 0c             	sub    $0xc,%esp
c0105cb4:	ff 75 f4             	pushl  -0xc(%ebp)
c0105cb7:	e8 2f ec ff ff       	call   c01048eb <page_ref>
c0105cbc:	83 c4 10             	add    $0x10,%esp
c0105cbf:	83 f8 02             	cmp    $0x2,%eax
c0105cc2:	74 19                	je     c0105cdd <check_pgdir+0x35b>
c0105cc4:	68 20 dd 10 c0       	push   $0xc010dd20
c0105cc9:	68 4d da 10 c0       	push   $0xc010da4d
c0105cce:	68 9d 02 00 00       	push   $0x29d
c0105cd3:	68 28 da 10 c0       	push   $0xc010da28
c0105cd8:	e8 84 ba ff ff       	call   c0101761 <__panic>
    assert(page_ref(p2) == 0);
c0105cdd:	83 ec 0c             	sub    $0xc,%esp
c0105ce0:	ff 75 e4             	pushl  -0x1c(%ebp)
c0105ce3:	e8 03 ec ff ff       	call   c01048eb <page_ref>
c0105ce8:	83 c4 10             	add    $0x10,%esp
c0105ceb:	85 c0                	test   %eax,%eax
c0105ced:	74 19                	je     c0105d08 <check_pgdir+0x386>
c0105cef:	68 32 dd 10 c0       	push   $0xc010dd32
c0105cf4:	68 4d da 10 c0       	push   $0xc010da4d
c0105cf9:	68 9e 02 00 00       	push   $0x29e
c0105cfe:	68 28 da 10 c0       	push   $0xc010da28
c0105d03:	e8 59 ba ff ff       	call   c0101761 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0105d08:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105d0d:	83 ec 04             	sub    $0x4,%esp
c0105d10:	6a 00                	push   $0x0
c0105d12:	68 00 10 00 00       	push   $0x1000
c0105d17:	50                   	push   %eax
c0105d18:	e8 d7 f4 ff ff       	call   c01051f4 <get_pte>
c0105d1d:	83 c4 10             	add    $0x10,%esp
c0105d20:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105d23:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105d27:	75 19                	jne    c0105d42 <check_pgdir+0x3c0>
c0105d29:	68 80 dc 10 c0       	push   $0xc010dc80
c0105d2e:	68 4d da 10 c0       	push   $0xc010da4d
c0105d33:	68 9f 02 00 00       	push   $0x29f
c0105d38:	68 28 da 10 c0       	push   $0xc010da28
c0105d3d:	e8 1f ba ff ff       	call   c0101761 <__panic>
    assert(pte2page(*ptep) == p1);
c0105d42:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d45:	8b 00                	mov    (%eax),%eax
c0105d47:	83 ec 0c             	sub    $0xc,%esp
c0105d4a:	50                   	push   %eax
c0105d4b:	e8 45 eb ff ff       	call   c0104895 <pte2page>
c0105d50:	83 c4 10             	add    $0x10,%esp
c0105d53:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105d56:	74 19                	je     c0105d71 <check_pgdir+0x3ef>
c0105d58:	68 f5 db 10 c0       	push   $0xc010dbf5
c0105d5d:	68 4d da 10 c0       	push   $0xc010da4d
c0105d62:	68 a0 02 00 00       	push   $0x2a0
c0105d67:	68 28 da 10 c0       	push   $0xc010da28
c0105d6c:	e8 f0 b9 ff ff       	call   c0101761 <__panic>
    assert((*ptep & PTE_U) == 0);
c0105d71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d74:	8b 00                	mov    (%eax),%eax
c0105d76:	83 e0 04             	and    $0x4,%eax
c0105d79:	85 c0                	test   %eax,%eax
c0105d7b:	74 19                	je     c0105d96 <check_pgdir+0x414>
c0105d7d:	68 44 dd 10 c0       	push   $0xc010dd44
c0105d82:	68 4d da 10 c0       	push   $0xc010da4d
c0105d87:	68 a1 02 00 00       	push   $0x2a1
c0105d8c:	68 28 da 10 c0       	push   $0xc010da28
c0105d91:	e8 cb b9 ff ff       	call   c0101761 <__panic>

    page_remove(boot_pgdir, 0x0);
c0105d96:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105d9b:	83 ec 08             	sub    $0x8,%esp
c0105d9e:	6a 00                	push   $0x0
c0105da0:	50                   	push   %eax
c0105da1:	e8 c6 f9 ff ff       	call   c010576c <page_remove>
c0105da6:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 1);
c0105da9:	83 ec 0c             	sub    $0xc,%esp
c0105dac:	ff 75 f4             	pushl  -0xc(%ebp)
c0105daf:	e8 37 eb ff ff       	call   c01048eb <page_ref>
c0105db4:	83 c4 10             	add    $0x10,%esp
c0105db7:	83 f8 01             	cmp    $0x1,%eax
c0105dba:	74 19                	je     c0105dd5 <check_pgdir+0x453>
c0105dbc:	68 0b dc 10 c0       	push   $0xc010dc0b
c0105dc1:	68 4d da 10 c0       	push   $0xc010da4d
c0105dc6:	68 a4 02 00 00       	push   $0x2a4
c0105dcb:	68 28 da 10 c0       	push   $0xc010da28
c0105dd0:	e8 8c b9 ff ff       	call   c0101761 <__panic>
    assert(page_ref(p2) == 0);
c0105dd5:	83 ec 0c             	sub    $0xc,%esp
c0105dd8:	ff 75 e4             	pushl  -0x1c(%ebp)
c0105ddb:	e8 0b eb ff ff       	call   c01048eb <page_ref>
c0105de0:	83 c4 10             	add    $0x10,%esp
c0105de3:	85 c0                	test   %eax,%eax
c0105de5:	74 19                	je     c0105e00 <check_pgdir+0x47e>
c0105de7:	68 32 dd 10 c0       	push   $0xc010dd32
c0105dec:	68 4d da 10 c0       	push   $0xc010da4d
c0105df1:	68 a5 02 00 00       	push   $0x2a5
c0105df6:	68 28 da 10 c0       	push   $0xc010da28
c0105dfb:	e8 61 b9 ff ff       	call   c0101761 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0105e00:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105e05:	83 ec 08             	sub    $0x8,%esp
c0105e08:	68 00 10 00 00       	push   $0x1000
c0105e0d:	50                   	push   %eax
c0105e0e:	e8 59 f9 ff ff       	call   c010576c <page_remove>
c0105e13:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 0);
c0105e16:	83 ec 0c             	sub    $0xc,%esp
c0105e19:	ff 75 f4             	pushl  -0xc(%ebp)
c0105e1c:	e8 ca ea ff ff       	call   c01048eb <page_ref>
c0105e21:	83 c4 10             	add    $0x10,%esp
c0105e24:	85 c0                	test   %eax,%eax
c0105e26:	74 19                	je     c0105e41 <check_pgdir+0x4bf>
c0105e28:	68 59 dd 10 c0       	push   $0xc010dd59
c0105e2d:	68 4d da 10 c0       	push   $0xc010da4d
c0105e32:	68 a8 02 00 00       	push   $0x2a8
c0105e37:	68 28 da 10 c0       	push   $0xc010da28
c0105e3c:	e8 20 b9 ff ff       	call   c0101761 <__panic>
    assert(page_ref(p2) == 0);
c0105e41:	83 ec 0c             	sub    $0xc,%esp
c0105e44:	ff 75 e4             	pushl  -0x1c(%ebp)
c0105e47:	e8 9f ea ff ff       	call   c01048eb <page_ref>
c0105e4c:	83 c4 10             	add    $0x10,%esp
c0105e4f:	85 c0                	test   %eax,%eax
c0105e51:	74 19                	je     c0105e6c <check_pgdir+0x4ea>
c0105e53:	68 32 dd 10 c0       	push   $0xc010dd32
c0105e58:	68 4d da 10 c0       	push   $0xc010da4d
c0105e5d:	68 a9 02 00 00       	push   $0x2a9
c0105e62:	68 28 da 10 c0       	push   $0xc010da28
c0105e67:	e8 f5 b8 ff ff       	call   c0101761 <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0105e6c:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105e71:	8b 00                	mov    (%eax),%eax
c0105e73:	83 ec 0c             	sub    $0xc,%esp
c0105e76:	50                   	push   %eax
c0105e77:	e8 53 ea ff ff       	call   c01048cf <pde2page>
c0105e7c:	83 c4 10             	add    $0x10,%esp
c0105e7f:	83 ec 0c             	sub    $0xc,%esp
c0105e82:	50                   	push   %eax
c0105e83:	e8 63 ea ff ff       	call   c01048eb <page_ref>
c0105e88:	83 c4 10             	add    $0x10,%esp
c0105e8b:	83 f8 01             	cmp    $0x1,%eax
c0105e8e:	74 19                	je     c0105ea9 <check_pgdir+0x527>
c0105e90:	68 6c dd 10 c0       	push   $0xc010dd6c
c0105e95:	68 4d da 10 c0       	push   $0xc010da4d
c0105e9a:	68 ab 02 00 00       	push   $0x2ab
c0105e9f:	68 28 da 10 c0       	push   $0xc010da28
c0105ea4:	e8 b8 b8 ff ff       	call   c0101761 <__panic>
    free_page(pde2page(boot_pgdir[0]));
c0105ea9:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105eae:	8b 00                	mov    (%eax),%eax
c0105eb0:	83 ec 0c             	sub    $0xc,%esp
c0105eb3:	50                   	push   %eax
c0105eb4:	e8 16 ea ff ff       	call   c01048cf <pde2page>
c0105eb9:	83 c4 10             	add    $0x10,%esp
c0105ebc:	83 ec 08             	sub    $0x8,%esp
c0105ebf:	6a 01                	push   $0x1
c0105ec1:	50                   	push   %eax
c0105ec2:	e8 9e ec ff ff       	call   c0104b65 <free_pages>
c0105ec7:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c0105eca:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105ecf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0105ed5:	83 ec 0c             	sub    $0xc,%esp
c0105ed8:	68 93 dd 10 c0       	push   $0xc010dd93
c0105edd:	e8 a1 a3 ff ff       	call   c0100283 <cprintf>
c0105ee2:	83 c4 10             	add    $0x10,%esp
}
c0105ee5:	90                   	nop
c0105ee6:	c9                   	leave  
c0105ee7:	c3                   	ret    

c0105ee8 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0105ee8:	55                   	push   %ebp
c0105ee9:	89 e5                	mov    %esp,%ebp
c0105eeb:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0105eee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0105ef5:	e9 a3 00 00 00       	jmp    c0105f9d <check_boot_pgdir+0xb5>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0105efa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105efd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105f00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f03:	c1 e8 0c             	shr    $0xc,%eax
c0105f06:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105f09:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c0105f0e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0105f11:	72 17                	jb     c0105f2a <check_boot_pgdir+0x42>
c0105f13:	ff 75 f0             	pushl  -0x10(%ebp)
c0105f16:	68 60 d9 10 c0       	push   $0xc010d960
c0105f1b:	68 b7 02 00 00       	push   $0x2b7
c0105f20:	68 28 da 10 c0       	push   $0xc010da28
c0105f25:	e8 37 b8 ff ff       	call   c0101761 <__panic>
c0105f2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f2d:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105f32:	89 c2                	mov    %eax,%edx
c0105f34:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105f39:	83 ec 04             	sub    $0x4,%esp
c0105f3c:	6a 00                	push   $0x0
c0105f3e:	52                   	push   %edx
c0105f3f:	50                   	push   %eax
c0105f40:	e8 af f2 ff ff       	call   c01051f4 <get_pte>
c0105f45:	83 c4 10             	add    $0x10,%esp
c0105f48:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105f4b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0105f4f:	75 19                	jne    c0105f6a <check_boot_pgdir+0x82>
c0105f51:	68 b0 dd 10 c0       	push   $0xc010ddb0
c0105f56:	68 4d da 10 c0       	push   $0xc010da4d
c0105f5b:	68 b7 02 00 00       	push   $0x2b7
c0105f60:	68 28 da 10 c0       	push   $0xc010da28
c0105f65:	e8 f7 b7 ff ff       	call   c0101761 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0105f6a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105f6d:	8b 00                	mov    (%eax),%eax
c0105f6f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105f74:	89 c2                	mov    %eax,%edx
c0105f76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f79:	39 c2                	cmp    %eax,%edx
c0105f7b:	74 19                	je     c0105f96 <check_boot_pgdir+0xae>
c0105f7d:	68 ed dd 10 c0       	push   $0xc010dded
c0105f82:	68 4d da 10 c0       	push   $0xc010da4d
c0105f87:	68 b8 02 00 00       	push   $0x2b8
c0105f8c:	68 28 da 10 c0       	push   $0xc010da28
c0105f91:	e8 cb b7 ff ff       	call   c0101761 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0105f96:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0105f9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105fa0:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c0105fa5:	39 c2                	cmp    %eax,%edx
c0105fa7:	0f 82 4d ff ff ff    	jb     c0105efa <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0105fad:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105fb2:	05 ac 0f 00 00       	add    $0xfac,%eax
c0105fb7:	8b 00                	mov    (%eax),%eax
c0105fb9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105fbe:	89 c2                	mov    %eax,%edx
c0105fc0:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0105fc5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105fc8:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0105fcf:	77 17                	ja     c0105fe8 <check_boot_pgdir+0x100>
c0105fd1:	ff 75 e4             	pushl  -0x1c(%ebp)
c0105fd4:	68 04 da 10 c0       	push   $0xc010da04
c0105fd9:	68 bb 02 00 00       	push   $0x2bb
c0105fde:	68 28 da 10 c0       	push   $0xc010da28
c0105fe3:	e8 79 b7 ff ff       	call   c0101761 <__panic>
c0105fe8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105feb:	05 00 00 00 40       	add    $0x40000000,%eax
c0105ff0:	39 c2                	cmp    %eax,%edx
c0105ff2:	74 19                	je     c010600d <check_boot_pgdir+0x125>
c0105ff4:	68 04 de 10 c0       	push   $0xc010de04
c0105ff9:	68 4d da 10 c0       	push   $0xc010da4d
c0105ffe:	68 bb 02 00 00       	push   $0x2bb
c0106003:	68 28 da 10 c0       	push   $0xc010da28
c0106008:	e8 54 b7 ff ff       	call   c0101761 <__panic>

    assert(boot_pgdir[0] == 0);
c010600d:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0106012:	8b 00                	mov    (%eax),%eax
c0106014:	85 c0                	test   %eax,%eax
c0106016:	74 19                	je     c0106031 <check_boot_pgdir+0x149>
c0106018:	68 38 de 10 c0       	push   $0xc010de38
c010601d:	68 4d da 10 c0       	push   $0xc010da4d
c0106022:	68 bd 02 00 00       	push   $0x2bd
c0106027:	68 28 da 10 c0       	push   $0xc010da28
c010602c:	e8 30 b7 ff ff       	call   c0101761 <__panic>

    struct Page *p;
    p = alloc_page();
c0106031:	83 ec 0c             	sub    $0xc,%esp
c0106034:	6a 01                	push   $0x1
c0106036:	e8 be ea ff ff       	call   c0104af9 <alloc_pages>
c010603b:	83 c4 10             	add    $0x10,%esp
c010603e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0106041:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c0106046:	6a 02                	push   $0x2
c0106048:	68 00 01 00 00       	push   $0x100
c010604d:	ff 75 e0             	pushl  -0x20(%ebp)
c0106050:	50                   	push   %eax
c0106051:	e8 4f f7 ff ff       	call   c01057a5 <page_insert>
c0106056:	83 c4 10             	add    $0x10,%esp
c0106059:	85 c0                	test   %eax,%eax
c010605b:	74 19                	je     c0106076 <check_boot_pgdir+0x18e>
c010605d:	68 4c de 10 c0       	push   $0xc010de4c
c0106062:	68 4d da 10 c0       	push   $0xc010da4d
c0106067:	68 c1 02 00 00       	push   $0x2c1
c010606c:	68 28 da 10 c0       	push   $0xc010da28
c0106071:	e8 eb b6 ff ff       	call   c0101761 <__panic>
    assert(page_ref(p) == 1);
c0106076:	83 ec 0c             	sub    $0xc,%esp
c0106079:	ff 75 e0             	pushl  -0x20(%ebp)
c010607c:	e8 6a e8 ff ff       	call   c01048eb <page_ref>
c0106081:	83 c4 10             	add    $0x10,%esp
c0106084:	83 f8 01             	cmp    $0x1,%eax
c0106087:	74 19                	je     c01060a2 <check_boot_pgdir+0x1ba>
c0106089:	68 7a de 10 c0       	push   $0xc010de7a
c010608e:	68 4d da 10 c0       	push   $0xc010da4d
c0106093:	68 c2 02 00 00       	push   $0x2c2
c0106098:	68 28 da 10 c0       	push   $0xc010da28
c010609d:	e8 bf b6 ff ff       	call   c0101761 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c01060a2:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c01060a7:	6a 02                	push   $0x2
c01060a9:	68 00 11 00 00       	push   $0x1100
c01060ae:	ff 75 e0             	pushl  -0x20(%ebp)
c01060b1:	50                   	push   %eax
c01060b2:	e8 ee f6 ff ff       	call   c01057a5 <page_insert>
c01060b7:	83 c4 10             	add    $0x10,%esp
c01060ba:	85 c0                	test   %eax,%eax
c01060bc:	74 19                	je     c01060d7 <check_boot_pgdir+0x1ef>
c01060be:	68 8c de 10 c0       	push   $0xc010de8c
c01060c3:	68 4d da 10 c0       	push   $0xc010da4d
c01060c8:	68 c3 02 00 00       	push   $0x2c3
c01060cd:	68 28 da 10 c0       	push   $0xc010da28
c01060d2:	e8 8a b6 ff ff       	call   c0101761 <__panic>
    assert(page_ref(p) == 2);
c01060d7:	83 ec 0c             	sub    $0xc,%esp
c01060da:	ff 75 e0             	pushl  -0x20(%ebp)
c01060dd:	e8 09 e8 ff ff       	call   c01048eb <page_ref>
c01060e2:	83 c4 10             	add    $0x10,%esp
c01060e5:	83 f8 02             	cmp    $0x2,%eax
c01060e8:	74 19                	je     c0106103 <check_boot_pgdir+0x21b>
c01060ea:	68 c3 de 10 c0       	push   $0xc010dec3
c01060ef:	68 4d da 10 c0       	push   $0xc010da4d
c01060f4:	68 c4 02 00 00       	push   $0x2c4
c01060f9:	68 28 da 10 c0       	push   $0xc010da28
c01060fe:	e8 5e b6 ff ff       	call   c0101761 <__panic>

    const char *str = "ucore: Hello world!!";
c0106103:	c7 45 dc d4 de 10 c0 	movl   $0xc010ded4,-0x24(%ebp)
    strcpy((void *)0x100, str);
c010610a:	83 ec 08             	sub    $0x8,%esp
c010610d:	ff 75 dc             	pushl  -0x24(%ebp)
c0106110:	68 00 01 00 00       	push   $0x100
c0106115:	e8 fd 60 00 00       	call   c010c217 <strcpy>
c010611a:	83 c4 10             	add    $0x10,%esp
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c010611d:	83 ec 08             	sub    $0x8,%esp
c0106120:	68 00 11 00 00       	push   $0x1100
c0106125:	68 00 01 00 00       	push   $0x100
c010612a:	e8 62 61 00 00       	call   c010c291 <strcmp>
c010612f:	83 c4 10             	add    $0x10,%esp
c0106132:	85 c0                	test   %eax,%eax
c0106134:	74 19                	je     c010614f <check_boot_pgdir+0x267>
c0106136:	68 ec de 10 c0       	push   $0xc010deec
c010613b:	68 4d da 10 c0       	push   $0xc010da4d
c0106140:	68 c8 02 00 00       	push   $0x2c8
c0106145:	68 28 da 10 c0       	push   $0xc010da28
c010614a:	e8 12 b6 ff ff       	call   c0101761 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c010614f:	83 ec 0c             	sub    $0xc,%esp
c0106152:	ff 75 e0             	pushl  -0x20(%ebp)
c0106155:	e8 f6 e6 ff ff       	call   c0104850 <page2kva>
c010615a:	83 c4 10             	add    $0x10,%esp
c010615d:	05 00 01 00 00       	add    $0x100,%eax
c0106162:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106165:	83 ec 0c             	sub    $0xc,%esp
c0106168:	68 00 01 00 00       	push   $0x100
c010616d:	e8 4d 60 00 00       	call   c010c1bf <strlen>
c0106172:	83 c4 10             	add    $0x10,%esp
c0106175:	85 c0                	test   %eax,%eax
c0106177:	74 19                	je     c0106192 <check_boot_pgdir+0x2aa>
c0106179:	68 24 df 10 c0       	push   $0xc010df24
c010617e:	68 4d da 10 c0       	push   $0xc010da4d
c0106183:	68 cb 02 00 00       	push   $0x2cb
c0106188:	68 28 da 10 c0       	push   $0xc010da28
c010618d:	e8 cf b5 ff ff       	call   c0101761 <__panic>

    free_page(p);
c0106192:	83 ec 08             	sub    $0x8,%esp
c0106195:	6a 01                	push   $0x1
c0106197:	ff 75 e0             	pushl  -0x20(%ebp)
c010619a:	e8 c6 e9 ff ff       	call   c0104b65 <free_pages>
c010619f:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(boot_pgdir[0]));
c01061a2:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c01061a7:	8b 00                	mov    (%eax),%eax
c01061a9:	83 ec 0c             	sub    $0xc,%esp
c01061ac:	50                   	push   %eax
c01061ad:	e8 1d e7 ff ff       	call   c01048cf <pde2page>
c01061b2:	83 c4 10             	add    $0x10,%esp
c01061b5:	83 ec 08             	sub    $0x8,%esp
c01061b8:	6a 01                	push   $0x1
c01061ba:	50                   	push   %eax
c01061bb:	e8 a5 e9 ff ff       	call   c0104b65 <free_pages>
c01061c0:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c01061c3:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c01061c8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c01061ce:	83 ec 0c             	sub    $0xc,%esp
c01061d1:	68 48 df 10 c0       	push   $0xc010df48
c01061d6:	e8 a8 a0 ff ff       	call   c0100283 <cprintf>
c01061db:	83 c4 10             	add    $0x10,%esp
}
c01061de:	90                   	nop
c01061df:	c9                   	leave  
c01061e0:	c3                   	ret    

c01061e1 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c01061e1:	55                   	push   %ebp
c01061e2:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c01061e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01061e7:	83 e0 04             	and    $0x4,%eax
c01061ea:	85 c0                	test   %eax,%eax
c01061ec:	74 07                	je     c01061f5 <perm2str+0x14>
c01061ee:	b8 75 00 00 00       	mov    $0x75,%eax
c01061f3:	eb 05                	jmp    c01061fa <perm2str+0x19>
c01061f5:	b8 2d 00 00 00       	mov    $0x2d,%eax
c01061fa:	a2 e8 1c 1b c0       	mov    %al,0xc01b1ce8
    str[1] = 'r';
c01061ff:	c6 05 e9 1c 1b c0 72 	movb   $0x72,0xc01b1ce9
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106206:	8b 45 08             	mov    0x8(%ebp),%eax
c0106209:	83 e0 02             	and    $0x2,%eax
c010620c:	85 c0                	test   %eax,%eax
c010620e:	74 07                	je     c0106217 <perm2str+0x36>
c0106210:	b8 77 00 00 00       	mov    $0x77,%eax
c0106215:	eb 05                	jmp    c010621c <perm2str+0x3b>
c0106217:	b8 2d 00 00 00       	mov    $0x2d,%eax
c010621c:	a2 ea 1c 1b c0       	mov    %al,0xc01b1cea
    str[3] = '\0';
c0106221:	c6 05 eb 1c 1b c0 00 	movb   $0x0,0xc01b1ceb
    return str;
c0106228:	b8 e8 1c 1b c0       	mov    $0xc01b1ce8,%eax
}
c010622d:	5d                   	pop    %ebp
c010622e:	c3                   	ret    

c010622f <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c010622f:	55                   	push   %ebp
c0106230:	89 e5                	mov    %esp,%ebp
c0106232:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106235:	8b 45 10             	mov    0x10(%ebp),%eax
c0106238:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010623b:	72 0e                	jb     c010624b <get_pgtable_items+0x1c>
        return 0;
c010623d:	b8 00 00 00 00       	mov    $0x0,%eax
c0106242:	e9 9a 00 00 00       	jmp    c01062e1 <get_pgtable_items+0xb2>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
c0106247:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c010624b:	8b 45 10             	mov    0x10(%ebp),%eax
c010624e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106251:	73 18                	jae    c010626b <get_pgtable_items+0x3c>
c0106253:	8b 45 10             	mov    0x10(%ebp),%eax
c0106256:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010625d:	8b 45 14             	mov    0x14(%ebp),%eax
c0106260:	01 d0                	add    %edx,%eax
c0106262:	8b 00                	mov    (%eax),%eax
c0106264:	83 e0 01             	and    $0x1,%eax
c0106267:	85 c0                	test   %eax,%eax
c0106269:	74 dc                	je     c0106247 <get_pgtable_items+0x18>
        start ++;
    }
    if (start < right) {
c010626b:	8b 45 10             	mov    0x10(%ebp),%eax
c010626e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106271:	73 69                	jae    c01062dc <get_pgtable_items+0xad>
        if (left_store != NULL) {
c0106273:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106277:	74 08                	je     c0106281 <get_pgtable_items+0x52>
            *left_store = start;
c0106279:	8b 45 18             	mov    0x18(%ebp),%eax
c010627c:	8b 55 10             	mov    0x10(%ebp),%edx
c010627f:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106281:	8b 45 10             	mov    0x10(%ebp),%eax
c0106284:	8d 50 01             	lea    0x1(%eax),%edx
c0106287:	89 55 10             	mov    %edx,0x10(%ebp)
c010628a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106291:	8b 45 14             	mov    0x14(%ebp),%eax
c0106294:	01 d0                	add    %edx,%eax
c0106296:	8b 00                	mov    (%eax),%eax
c0106298:	83 e0 07             	and    $0x7,%eax
c010629b:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c010629e:	eb 04                	jmp    c01062a4 <get_pgtable_items+0x75>
            start ++;
c01062a0:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c01062a4:	8b 45 10             	mov    0x10(%ebp),%eax
c01062a7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01062aa:	73 1d                	jae    c01062c9 <get_pgtable_items+0x9a>
c01062ac:	8b 45 10             	mov    0x10(%ebp),%eax
c01062af:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01062b6:	8b 45 14             	mov    0x14(%ebp),%eax
c01062b9:	01 d0                	add    %edx,%eax
c01062bb:	8b 00                	mov    (%eax),%eax
c01062bd:	83 e0 07             	and    $0x7,%eax
c01062c0:	89 c2                	mov    %eax,%edx
c01062c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01062c5:	39 c2                	cmp    %eax,%edx
c01062c7:	74 d7                	je     c01062a0 <get_pgtable_items+0x71>
            start ++;
        }
        if (right_store != NULL) {
c01062c9:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01062cd:	74 08                	je     c01062d7 <get_pgtable_items+0xa8>
            *right_store = start;
c01062cf:	8b 45 1c             	mov    0x1c(%ebp),%eax
c01062d2:	8b 55 10             	mov    0x10(%ebp),%edx
c01062d5:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c01062d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01062da:	eb 05                	jmp    c01062e1 <get_pgtable_items+0xb2>
    }
    return 0;
c01062dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01062e1:	c9                   	leave  
c01062e2:	c3                   	ret    

c01062e3 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c01062e3:	55                   	push   %ebp
c01062e4:	89 e5                	mov    %esp,%ebp
c01062e6:	57                   	push   %edi
c01062e7:	56                   	push   %esi
c01062e8:	53                   	push   %ebx
c01062e9:	83 ec 2c             	sub    $0x2c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c01062ec:	83 ec 0c             	sub    $0xc,%esp
c01062ef:	68 68 df 10 c0       	push   $0xc010df68
c01062f4:	e8 8a 9f ff ff       	call   c0100283 <cprintf>
c01062f9:	83 c4 10             	add    $0x10,%esp
    size_t left, right = 0, perm;
c01062fc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106303:	e9 e5 00 00 00       	jmp    c01063ed <print_pgdir+0x10a>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106308:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010630b:	83 ec 0c             	sub    $0xc,%esp
c010630e:	50                   	push   %eax
c010630f:	e8 cd fe ff ff       	call   c01061e1 <perm2str>
c0106314:	83 c4 10             	add    $0x10,%esp
c0106317:	89 c7                	mov    %eax,%edi
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106319:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010631c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010631f:	29 c2                	sub    %eax,%edx
c0106321:	89 d0                	mov    %edx,%eax
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106323:	c1 e0 16             	shl    $0x16,%eax
c0106326:	89 c3                	mov    %eax,%ebx
c0106328:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010632b:	c1 e0 16             	shl    $0x16,%eax
c010632e:	89 c1                	mov    %eax,%ecx
c0106330:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106333:	c1 e0 16             	shl    $0x16,%eax
c0106336:	89 c2                	mov    %eax,%edx
c0106338:	8b 75 dc             	mov    -0x24(%ebp),%esi
c010633b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010633e:	29 c6                	sub    %eax,%esi
c0106340:	89 f0                	mov    %esi,%eax
c0106342:	83 ec 08             	sub    $0x8,%esp
c0106345:	57                   	push   %edi
c0106346:	53                   	push   %ebx
c0106347:	51                   	push   %ecx
c0106348:	52                   	push   %edx
c0106349:	50                   	push   %eax
c010634a:	68 99 df 10 c0       	push   $0xc010df99
c010634f:	e8 2f 9f ff ff       	call   c0100283 <cprintf>
c0106354:	83 c4 20             	add    $0x20,%esp
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106357:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010635a:	c1 e0 0a             	shl    $0xa,%eax
c010635d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106360:	eb 4f                	jmp    c01063b1 <print_pgdir+0xce>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106362:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106365:	83 ec 0c             	sub    $0xc,%esp
c0106368:	50                   	push   %eax
c0106369:	e8 73 fe ff ff       	call   c01061e1 <perm2str>
c010636e:	83 c4 10             	add    $0x10,%esp
c0106371:	89 c7                	mov    %eax,%edi
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106373:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106376:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106379:	29 c2                	sub    %eax,%edx
c010637b:	89 d0                	mov    %edx,%eax
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c010637d:	c1 e0 0c             	shl    $0xc,%eax
c0106380:	89 c3                	mov    %eax,%ebx
c0106382:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106385:	c1 e0 0c             	shl    $0xc,%eax
c0106388:	89 c1                	mov    %eax,%ecx
c010638a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010638d:	c1 e0 0c             	shl    $0xc,%eax
c0106390:	89 c2                	mov    %eax,%edx
c0106392:	8b 75 d4             	mov    -0x2c(%ebp),%esi
c0106395:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106398:	29 c6                	sub    %eax,%esi
c010639a:	89 f0                	mov    %esi,%eax
c010639c:	83 ec 08             	sub    $0x8,%esp
c010639f:	57                   	push   %edi
c01063a0:	53                   	push   %ebx
c01063a1:	51                   	push   %ecx
c01063a2:	52                   	push   %edx
c01063a3:	50                   	push   %eax
c01063a4:	68 b8 df 10 c0       	push   $0xc010dfb8
c01063a9:	e8 d5 9e ff ff       	call   c0100283 <cprintf>
c01063ae:	83 c4 20             	add    $0x20,%esp
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c01063b1:	be 00 00 c0 fa       	mov    $0xfac00000,%esi
c01063b6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01063b9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01063bc:	89 d3                	mov    %edx,%ebx
c01063be:	c1 e3 0a             	shl    $0xa,%ebx
c01063c1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01063c4:	89 d1                	mov    %edx,%ecx
c01063c6:	c1 e1 0a             	shl    $0xa,%ecx
c01063c9:	83 ec 08             	sub    $0x8,%esp
c01063cc:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c01063cf:	52                   	push   %edx
c01063d0:	8d 55 d8             	lea    -0x28(%ebp),%edx
c01063d3:	52                   	push   %edx
c01063d4:	56                   	push   %esi
c01063d5:	50                   	push   %eax
c01063d6:	53                   	push   %ebx
c01063d7:	51                   	push   %ecx
c01063d8:	e8 52 fe ff ff       	call   c010622f <get_pgtable_items>
c01063dd:	83 c4 20             	add    $0x20,%esp
c01063e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01063e3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01063e7:	0f 85 75 ff ff ff    	jne    c0106362 <print_pgdir+0x7f>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c01063ed:	b9 00 b0 fe fa       	mov    $0xfafeb000,%ecx
c01063f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01063f5:	83 ec 08             	sub    $0x8,%esp
c01063f8:	8d 55 dc             	lea    -0x24(%ebp),%edx
c01063fb:	52                   	push   %edx
c01063fc:	8d 55 e0             	lea    -0x20(%ebp),%edx
c01063ff:	52                   	push   %edx
c0106400:	51                   	push   %ecx
c0106401:	50                   	push   %eax
c0106402:	68 00 04 00 00       	push   $0x400
c0106407:	6a 00                	push   $0x0
c0106409:	e8 21 fe ff ff       	call   c010622f <get_pgtable_items>
c010640e:	83 c4 20             	add    $0x20,%esp
c0106411:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106414:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106418:	0f 85 ea fe ff ff    	jne    c0106308 <print_pgdir+0x25>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c010641e:	83 ec 0c             	sub    $0xc,%esp
c0106421:	68 dc df 10 c0       	push   $0xc010dfdc
c0106426:	e8 58 9e ff ff       	call   c0100283 <cprintf>
c010642b:	83 c4 10             	add    $0x10,%esp
}
c010642e:	90                   	nop
c010642f:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0106432:	5b                   	pop    %ebx
c0106433:	5e                   	pop    %esi
c0106434:	5f                   	pop    %edi
c0106435:	5d                   	pop    %ebp
c0106436:	c3                   	ret    

c0106437 <lock_init>:
#define local_intr_restore(x)   __intr_restore(x);

typedef volatile bool lock_t;

static inline void
lock_init(lock_t *lock) {
c0106437:	55                   	push   %ebp
c0106438:	89 e5                	mov    %esp,%ebp
    *lock = 0;
c010643a:	8b 45 08             	mov    0x8(%ebp),%eax
c010643d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c0106443:	90                   	nop
c0106444:	5d                   	pop    %ebp
c0106445:	c3                   	ret    

c0106446 <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c0106446:	55                   	push   %ebp
c0106447:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0106449:	8b 45 08             	mov    0x8(%ebp),%eax
c010644c:	8b 40 18             	mov    0x18(%eax),%eax
}
c010644f:	5d                   	pop    %ebp
c0106450:	c3                   	ret    

c0106451 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0106451:	55                   	push   %ebp
c0106452:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0106454:	8b 45 08             	mov    0x8(%ebp),%eax
c0106457:	8b 55 0c             	mov    0xc(%ebp),%edx
c010645a:	89 50 18             	mov    %edx,0x18(%eax)
}
c010645d:	90                   	nop
c010645e:	5d                   	pop    %ebp
c010645f:	c3                   	ret    

c0106460 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106460:	55                   	push   %ebp
c0106461:	89 e5                	mov    %esp,%ebp
c0106463:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0106466:	8b 45 08             	mov    0x8(%ebp),%eax
c0106469:	c1 e8 0c             	shr    $0xc,%eax
c010646c:	89 c2                	mov    %eax,%edx
c010646e:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c0106473:	39 c2                	cmp    %eax,%edx
c0106475:	72 14                	jb     c010648b <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0106477:	83 ec 04             	sub    $0x4,%esp
c010647a:	68 10 e0 10 c0       	push   $0xc010e010
c010647f:	6a 5e                	push   $0x5e
c0106481:	68 2f e0 10 c0       	push   $0xc010e02f
c0106486:	e8 d6 b2 ff ff       	call   c0101761 <__panic>
    }
    return &pages[PPN(pa)];
c010648b:	8b 0d 64 3d 1b c0    	mov    0xc01b3d64,%ecx
c0106491:	8b 45 08             	mov    0x8(%ebp),%eax
c0106494:	c1 e8 0c             	shr    $0xc,%eax
c0106497:	89 c2                	mov    %eax,%edx
c0106499:	89 d0                	mov    %edx,%eax
c010649b:	c1 e0 03             	shl    $0x3,%eax
c010649e:	01 d0                	add    %edx,%eax
c01064a0:	c1 e0 02             	shl    $0x2,%eax
c01064a3:	01 c8                	add    %ecx,%eax
}
c01064a5:	c9                   	leave  
c01064a6:	c3                   	ret    

c01064a7 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c01064a7:	55                   	push   %ebp
c01064a8:	89 e5                	mov    %esp,%ebp
c01064aa:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c01064ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01064b0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01064b5:	83 ec 0c             	sub    $0xc,%esp
c01064b8:	50                   	push   %eax
c01064b9:	e8 a2 ff ff ff       	call   c0106460 <pa2page>
c01064be:	83 c4 10             	add    $0x10,%esp
}
c01064c1:	c9                   	leave  
c01064c2:	c3                   	ret    

c01064c3 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c01064c3:	55                   	push   %ebp
c01064c4:	89 e5                	mov    %esp,%ebp
c01064c6:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c01064c9:	83 ec 0c             	sub    $0xc,%esp
c01064cc:	6a 20                	push   $0x20
c01064ce:	e8 a2 21 00 00       	call   c0108675 <kmalloc>
c01064d3:	83 c4 10             	add    $0x10,%esp
c01064d6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c01064d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01064dd:	74 7d                	je     c010655c <mm_create+0x99>
        list_init(&(mm->mmap_list));
c01064df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01064e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01064e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01064e8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01064eb:	89 50 04             	mov    %edx,0x4(%eax)
c01064ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01064f1:	8b 50 04             	mov    0x4(%eax),%edx
c01064f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01064f7:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c01064f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01064fc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0106503:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106506:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c010650d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106510:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0106517:	a1 f0 1c 1b c0       	mov    0xc01b1cf0,%eax
c010651c:	85 c0                	test   %eax,%eax
c010651e:	74 10                	je     c0106530 <mm_create+0x6d>
c0106520:	83 ec 0c             	sub    $0xc,%esp
c0106523:	ff 75 f4             	pushl  -0xc(%ebp)
c0106526:	e8 52 11 00 00       	call   c010767d <swap_init_mm>
c010652b:	83 c4 10             	add    $0x10,%esp
c010652e:	eb 0a                	jmp    c010653a <mm_create+0x77>
        else mm->sm_priv = NULL;
c0106530:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106533:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c010653a:	83 ec 08             	sub    $0x8,%esp
c010653d:	6a 00                	push   $0x0
c010653f:	ff 75 f4             	pushl  -0xc(%ebp)
c0106542:	e8 0a ff ff ff       	call   c0106451 <set_mm_count>
c0106547:	83 c4 10             	add    $0x10,%esp
        lock_init(&(mm->mm_lock));
c010654a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010654d:	83 c0 1c             	add    $0x1c,%eax
c0106550:	83 ec 0c             	sub    $0xc,%esp
c0106553:	50                   	push   %eax
c0106554:	e8 de fe ff ff       	call   c0106437 <lock_init>
c0106559:	83 c4 10             	add    $0x10,%esp
    }    
    return mm;
c010655c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010655f:	c9                   	leave  
c0106560:	c3                   	ret    

c0106561 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0106561:	55                   	push   %ebp
c0106562:	89 e5                	mov    %esp,%ebp
c0106564:	83 ec 18             	sub    $0x18,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0106567:	83 ec 0c             	sub    $0xc,%esp
c010656a:	6a 18                	push   $0x18
c010656c:	e8 04 21 00 00       	call   c0108675 <kmalloc>
c0106571:	83 c4 10             	add    $0x10,%esp
c0106574:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0106577:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010657b:	74 1b                	je     c0106598 <vma_create+0x37>
        vma->vm_start = vm_start;
c010657d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106580:	8b 55 08             	mov    0x8(%ebp),%edx
c0106583:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0106586:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106589:	8b 55 0c             	mov    0xc(%ebp),%edx
c010658c:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c010658f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106592:	8b 55 10             	mov    0x10(%ebp),%edx
c0106595:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0106598:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010659b:	c9                   	leave  
c010659c:	c3                   	ret    

c010659d <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c010659d:	55                   	push   %ebp
c010659e:	89 e5                	mov    %esp,%ebp
c01065a0:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c01065a3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c01065aa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01065ae:	0f 84 95 00 00 00    	je     c0106649 <find_vma+0xac>
        vma = mm->mmap_cache;
c01065b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01065b7:	8b 40 08             	mov    0x8(%eax),%eax
c01065ba:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c01065bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01065c1:	74 16                	je     c01065d9 <find_vma+0x3c>
c01065c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01065c6:	8b 40 04             	mov    0x4(%eax),%eax
c01065c9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01065cc:	77 0b                	ja     c01065d9 <find_vma+0x3c>
c01065ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01065d1:	8b 40 08             	mov    0x8(%eax),%eax
c01065d4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01065d7:	77 61                	ja     c010663a <find_vma+0x9d>
                bool found = 0;
c01065d9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c01065e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01065e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01065e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01065e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c01065ec:	eb 28                	jmp    c0106616 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c01065ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01065f1:	83 e8 10             	sub    $0x10,%eax
c01065f4:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c01065f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01065fa:	8b 40 04             	mov    0x4(%eax),%eax
c01065fd:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106600:	77 14                	ja     c0106616 <find_vma+0x79>
c0106602:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106605:	8b 40 08             	mov    0x8(%eax),%eax
c0106608:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010660b:	76 09                	jbe    c0106616 <find_vma+0x79>
                        found = 1;
c010660d:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0106614:	eb 17                	jmp    c010662d <find_vma+0x90>
c0106616:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106619:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010661c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010661f:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0106622:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106625:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106628:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010662b:	75 c1                	jne    c01065ee <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c010662d:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0106631:	75 07                	jne    c010663a <find_vma+0x9d>
                    vma = NULL;
c0106633:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c010663a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010663e:	74 09                	je     c0106649 <find_vma+0xac>
            mm->mmap_cache = vma;
c0106640:	8b 45 08             	mov    0x8(%ebp),%eax
c0106643:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106646:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0106649:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010664c:	c9                   	leave  
c010664d:	c3                   	ret    

c010664e <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c010664e:	55                   	push   %ebp
c010664f:	89 e5                	mov    %esp,%ebp
c0106651:	83 ec 08             	sub    $0x8,%esp
    assert(prev->vm_start < prev->vm_end);
c0106654:	8b 45 08             	mov    0x8(%ebp),%eax
c0106657:	8b 50 04             	mov    0x4(%eax),%edx
c010665a:	8b 45 08             	mov    0x8(%ebp),%eax
c010665d:	8b 40 08             	mov    0x8(%eax),%eax
c0106660:	39 c2                	cmp    %eax,%edx
c0106662:	72 16                	jb     c010667a <check_vma_overlap+0x2c>
c0106664:	68 3d e0 10 c0       	push   $0xc010e03d
c0106669:	68 5b e0 10 c0       	push   $0xc010e05b
c010666e:	6a 6b                	push   $0x6b
c0106670:	68 70 e0 10 c0       	push   $0xc010e070
c0106675:	e8 e7 b0 ff ff       	call   c0101761 <__panic>
    assert(prev->vm_end <= next->vm_start);
c010667a:	8b 45 08             	mov    0x8(%ebp),%eax
c010667d:	8b 50 08             	mov    0x8(%eax),%edx
c0106680:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106683:	8b 40 04             	mov    0x4(%eax),%eax
c0106686:	39 c2                	cmp    %eax,%edx
c0106688:	76 16                	jbe    c01066a0 <check_vma_overlap+0x52>
c010668a:	68 80 e0 10 c0       	push   $0xc010e080
c010668f:	68 5b e0 10 c0       	push   $0xc010e05b
c0106694:	6a 6c                	push   $0x6c
c0106696:	68 70 e0 10 c0       	push   $0xc010e070
c010669b:	e8 c1 b0 ff ff       	call   c0101761 <__panic>
    assert(next->vm_start < next->vm_end);
c01066a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01066a3:	8b 50 04             	mov    0x4(%eax),%edx
c01066a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01066a9:	8b 40 08             	mov    0x8(%eax),%eax
c01066ac:	39 c2                	cmp    %eax,%edx
c01066ae:	72 16                	jb     c01066c6 <check_vma_overlap+0x78>
c01066b0:	68 9f e0 10 c0       	push   $0xc010e09f
c01066b5:	68 5b e0 10 c0       	push   $0xc010e05b
c01066ba:	6a 6d                	push   $0x6d
c01066bc:	68 70 e0 10 c0       	push   $0xc010e070
c01066c1:	e8 9b b0 ff ff       	call   c0101761 <__panic>
}
c01066c6:	90                   	nop
c01066c7:	c9                   	leave  
c01066c8:	c3                   	ret    

c01066c9 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c01066c9:	55                   	push   %ebp
c01066ca:	89 e5                	mov    %esp,%ebp
c01066cc:	83 ec 38             	sub    $0x38,%esp
    assert(vma->vm_start < vma->vm_end);
c01066cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01066d2:	8b 50 04             	mov    0x4(%eax),%edx
c01066d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01066d8:	8b 40 08             	mov    0x8(%eax),%eax
c01066db:	39 c2                	cmp    %eax,%edx
c01066dd:	72 16                	jb     c01066f5 <insert_vma_struct+0x2c>
c01066df:	68 bd e0 10 c0       	push   $0xc010e0bd
c01066e4:	68 5b e0 10 c0       	push   $0xc010e05b
c01066e9:	6a 74                	push   $0x74
c01066eb:	68 70 e0 10 c0       	push   $0xc010e070
c01066f0:	e8 6c b0 ff ff       	call   c0101761 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c01066f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01066f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c01066fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01066fe:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0106701:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106704:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0106707:	eb 1f                	jmp    c0106728 <insert_vma_struct+0x5f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0106709:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010670c:	83 e8 10             	sub    $0x10,%eax
c010670f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c0106712:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106715:	8b 50 04             	mov    0x4(%eax),%edx
c0106718:	8b 45 0c             	mov    0xc(%ebp),%eax
c010671b:	8b 40 04             	mov    0x4(%eax),%eax
c010671e:	39 c2                	cmp    %eax,%edx
c0106720:	77 1f                	ja     c0106741 <insert_vma_struct+0x78>
                break;
            }
            le_prev = le;
c0106722:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106725:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106728:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010672b:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010672e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106731:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c0106734:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106737:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010673a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010673d:	75 ca                	jne    c0106709 <insert_vma_struct+0x40>
c010673f:	eb 01                	jmp    c0106742 <insert_vma_struct+0x79>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
            if (mmap_prev->vm_start > vma->vm_start) {
                break;
c0106741:	90                   	nop
c0106742:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106745:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106748:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010674b:	8b 40 04             	mov    0x4(%eax),%eax
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c010674e:	89 45 dc             	mov    %eax,-0x24(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0106751:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106754:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106757:	74 15                	je     c010676e <insert_vma_struct+0xa5>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c0106759:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010675c:	83 e8 10             	sub    $0x10,%eax
c010675f:	83 ec 08             	sub    $0x8,%esp
c0106762:	ff 75 0c             	pushl  0xc(%ebp)
c0106765:	50                   	push   %eax
c0106766:	e8 e3 fe ff ff       	call   c010664e <check_vma_overlap>
c010676b:	83 c4 10             	add    $0x10,%esp
    }
    if (le_next != list) {
c010676e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106771:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106774:	74 15                	je     c010678b <insert_vma_struct+0xc2>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c0106776:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106779:	83 e8 10             	sub    $0x10,%eax
c010677c:	83 ec 08             	sub    $0x8,%esp
c010677f:	50                   	push   %eax
c0106780:	ff 75 0c             	pushl  0xc(%ebp)
c0106783:	e8 c6 fe ff ff       	call   c010664e <check_vma_overlap>
c0106788:	83 c4 10             	add    $0x10,%esp
    }

    vma->vm_mm = mm;
c010678b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010678e:	8b 55 08             	mov    0x8(%ebp),%edx
c0106791:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c0106793:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106796:	8d 50 10             	lea    0x10(%eax),%edx
c0106799:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010679c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010679f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01067a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01067a5:	8b 40 04             	mov    0x4(%eax),%eax
c01067a8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01067ab:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01067ae:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01067b1:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01067b4:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01067b7:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01067ba:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01067bd:	89 10                	mov    %edx,(%eax)
c01067bf:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01067c2:	8b 10                	mov    (%eax),%edx
c01067c4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01067c7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01067ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01067cd:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01067d0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01067d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01067d6:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01067d9:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c01067db:	8b 45 08             	mov    0x8(%ebp),%eax
c01067de:	8b 40 10             	mov    0x10(%eax),%eax
c01067e1:	8d 50 01             	lea    0x1(%eax),%edx
c01067e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01067e7:	89 50 10             	mov    %edx,0x10(%eax)
}
c01067ea:	90                   	nop
c01067eb:	c9                   	leave  
c01067ec:	c3                   	ret    

c01067ed <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c01067ed:	55                   	push   %ebp
c01067ee:	89 e5                	mov    %esp,%ebp
c01067f0:	83 ec 28             	sub    $0x28,%esp
    assert(mm_count(mm) == 0);
c01067f3:	ff 75 08             	pushl  0x8(%ebp)
c01067f6:	e8 4b fc ff ff       	call   c0106446 <mm_count>
c01067fb:	83 c4 04             	add    $0x4,%esp
c01067fe:	85 c0                	test   %eax,%eax
c0106800:	74 19                	je     c010681b <mm_destroy+0x2e>
c0106802:	68 d9 e0 10 c0       	push   $0xc010e0d9
c0106807:	68 5b e0 10 c0       	push   $0xc010e05b
c010680c:	68 94 00 00 00       	push   $0x94
c0106811:	68 70 e0 10 c0       	push   $0xc010e070
c0106816:	e8 46 af ff ff       	call   c0101761 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c010681b:	8b 45 08             	mov    0x8(%ebp),%eax
c010681e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0106821:	eb 3a                	jmp    c010685d <mm_destroy+0x70>
c0106823:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106826:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0106829:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010682c:	8b 40 04             	mov    0x4(%eax),%eax
c010682f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106832:	8b 12                	mov    (%edx),%edx
c0106834:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0106837:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010683a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010683d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106840:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0106843:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106846:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106849:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c010684b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010684e:	83 e8 10             	sub    $0x10,%eax
c0106851:	83 ec 0c             	sub    $0xc,%esp
c0106854:	50                   	push   %eax
c0106855:	e8 33 1e 00 00       	call   c010868d <kfree>
c010685a:	83 c4 10             	add    $0x10,%esp
c010685d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106860:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106863:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106866:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c0106869:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010686c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010686f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106872:	75 af                	jne    c0106823 <mm_destroy+0x36>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c0106874:	83 ec 0c             	sub    $0xc,%esp
c0106877:	ff 75 08             	pushl  0x8(%ebp)
c010687a:	e8 0e 1e 00 00       	call   c010868d <kfree>
c010687f:	83 c4 10             	add    $0x10,%esp
    mm=NULL;
c0106882:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0106889:	90                   	nop
c010688a:	c9                   	leave  
c010688b:	c3                   	ret    

c010688c <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c010688c:	55                   	push   %ebp
c010688d:	89 e5                	mov    %esp,%ebp
c010688f:	83 ec 28             	sub    $0x28,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0106892:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106895:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106898:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010689b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01068a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01068a3:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c01068aa:	8b 55 0c             	mov    0xc(%ebp),%edx
c01068ad:	8b 45 10             	mov    0x10(%ebp),%eax
c01068b0:	01 c2                	add    %eax,%edx
c01068b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01068b5:	01 d0                	add    %edx,%eax
c01068b7:	83 e8 01             	sub    $0x1,%eax
c01068ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01068bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01068c0:	ba 00 00 00 00       	mov    $0x0,%edx
c01068c5:	f7 75 e8             	divl   -0x18(%ebp)
c01068c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01068cb:	29 d0                	sub    %edx,%eax
c01068cd:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c01068d0:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c01068d7:	76 11                	jbe    c01068ea <mm_map+0x5e>
c01068d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01068dc:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01068df:	73 09                	jae    c01068ea <mm_map+0x5e>
c01068e1:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c01068e8:	76 0a                	jbe    c01068f4 <mm_map+0x68>
        return -E_INVAL;
c01068ea:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01068ef:	e9 9e 00 00 00       	jmp    c0106992 <mm_map+0x106>
    }

    assert(mm != NULL);
c01068f4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01068f8:	75 19                	jne    c0106913 <mm_map+0x87>
c01068fa:	68 eb e0 10 c0       	push   $0xc010e0eb
c01068ff:	68 5b e0 10 c0       	push   $0xc010e05b
c0106904:	68 a7 00 00 00       	push   $0xa7
c0106909:	68 70 e0 10 c0       	push   $0xc010e070
c010690e:	e8 4e ae ff ff       	call   c0101761 <__panic>

    int ret = -E_INVAL;
c0106913:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c010691a:	83 ec 08             	sub    $0x8,%esp
c010691d:	ff 75 ec             	pushl  -0x14(%ebp)
c0106920:	ff 75 08             	pushl  0x8(%ebp)
c0106923:	e8 75 fc ff ff       	call   c010659d <find_vma>
c0106928:	83 c4 10             	add    $0x10,%esp
c010692b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010692e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106932:	74 0b                	je     c010693f <mm_map+0xb3>
c0106934:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106937:	8b 40 04             	mov    0x4(%eax),%eax
c010693a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010693d:	72 4c                	jb     c010698b <mm_map+0xff>
        goto out;
    }
    ret = -E_NO_MEM;
c010693f:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0106946:	83 ec 04             	sub    $0x4,%esp
c0106949:	ff 75 14             	pushl  0x14(%ebp)
c010694c:	ff 75 e0             	pushl  -0x20(%ebp)
c010694f:	ff 75 ec             	pushl  -0x14(%ebp)
c0106952:	e8 0a fc ff ff       	call   c0106561 <vma_create>
c0106957:	83 c4 10             	add    $0x10,%esp
c010695a:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010695d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106961:	74 2b                	je     c010698e <mm_map+0x102>
        goto out;
    }
    insert_vma_struct(mm, vma);
c0106963:	83 ec 08             	sub    $0x8,%esp
c0106966:	ff 75 dc             	pushl  -0x24(%ebp)
c0106969:	ff 75 08             	pushl  0x8(%ebp)
c010696c:	e8 58 fd ff ff       	call   c01066c9 <insert_vma_struct>
c0106971:	83 c4 10             	add    $0x10,%esp
    if (vma_store != NULL) {
c0106974:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106978:	74 08                	je     c0106982 <mm_map+0xf6>
        *vma_store = vma;
c010697a:	8b 45 18             	mov    0x18(%ebp),%eax
c010697d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106980:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0106982:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106989:	eb 04                	jmp    c010698f <mm_map+0x103>

    int ret = -E_INVAL;

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
        goto out;
c010698b:	90                   	nop
c010698c:	eb 01                	jmp    c010698f <mm_map+0x103>
    }
    ret = -E_NO_MEM;

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
        goto out;
c010698e:	90                   	nop
        *vma_store = vma;
    }
    ret = 0;

out:
    return ret;
c010698f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106992:	c9                   	leave  
c0106993:	c3                   	ret    

c0106994 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0106994:	55                   	push   %ebp
c0106995:	89 e5                	mov    %esp,%ebp
c0106997:	53                   	push   %ebx
c0106998:	83 ec 24             	sub    $0x24,%esp
    assert(to != NULL && from != NULL);
c010699b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010699f:	74 06                	je     c01069a7 <dup_mmap+0x13>
c01069a1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01069a5:	75 19                	jne    c01069c0 <dup_mmap+0x2c>
c01069a7:	68 f6 e0 10 c0       	push   $0xc010e0f6
c01069ac:	68 5b e0 10 c0       	push   $0xc010e05b
c01069b1:	68 c0 00 00 00       	push   $0xc0
c01069b6:	68 70 e0 10 c0       	push   $0xc010e070
c01069bb:	e8 a1 ad ff ff       	call   c0101761 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c01069c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01069c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01069c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01069c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c01069cc:	e9 86 00 00 00       	jmp    c0106a57 <dup_mmap+0xc3>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c01069d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01069d4:	83 e8 10             	sub    $0x10,%eax
c01069d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c01069da:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01069dd:	8b 48 0c             	mov    0xc(%eax),%ecx
c01069e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01069e3:	8b 50 08             	mov    0x8(%eax),%edx
c01069e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01069e9:	8b 40 04             	mov    0x4(%eax),%eax
c01069ec:	83 ec 04             	sub    $0x4,%esp
c01069ef:	51                   	push   %ecx
c01069f0:	52                   	push   %edx
c01069f1:	50                   	push   %eax
c01069f2:	e8 6a fb ff ff       	call   c0106561 <vma_create>
c01069f7:	83 c4 10             	add    $0x10,%esp
c01069fa:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c01069fd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106a01:	75 07                	jne    c0106a0a <dup_mmap+0x76>
            return -E_NO_MEM;
c0106a03:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0106a08:	eb 6c                	jmp    c0106a76 <dup_mmap+0xe2>
        }

        insert_vma_struct(to, nvma);
c0106a0a:	83 ec 08             	sub    $0x8,%esp
c0106a0d:	ff 75 e8             	pushl  -0x18(%ebp)
c0106a10:	ff 75 08             	pushl  0x8(%ebp)
c0106a13:	e8 b1 fc ff ff       	call   c01066c9 <insert_vma_struct>
c0106a18:	83 c4 10             	add    $0x10,%esp

        bool share = 0;
c0106a1b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0106a22:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106a25:	8b 58 08             	mov    0x8(%eax),%ebx
c0106a28:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106a2b:	8b 48 04             	mov    0x4(%eax),%ecx
c0106a2e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106a31:	8b 50 0c             	mov    0xc(%eax),%edx
c0106a34:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a37:	8b 40 0c             	mov    0xc(%eax),%eax
c0106a3a:	83 ec 0c             	sub    $0xc,%esp
c0106a3d:	ff 75 e4             	pushl  -0x1c(%ebp)
c0106a40:	53                   	push   %ebx
c0106a41:	51                   	push   %ecx
c0106a42:	52                   	push   %edx
c0106a43:	50                   	push   %eax
c0106a44:	e8 4a eb ff ff       	call   c0105593 <copy_range>
c0106a49:	83 c4 20             	add    $0x20,%esp
c0106a4c:	85 c0                	test   %eax,%eax
c0106a4e:	74 07                	je     c0106a57 <dup_mmap+0xc3>
            return -E_NO_MEM;
c0106a50:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0106a55:	eb 1f                	jmp    c0106a76 <dup_mmap+0xe2>
c0106a57:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0106a5d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a60:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0106a62:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106a65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a68:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106a6b:	0f 85 60 ff ff ff    	jne    c01069d1 <dup_mmap+0x3d>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c0106a71:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106a76:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0106a79:	c9                   	leave  
c0106a7a:	c3                   	ret    

c0106a7b <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0106a7b:	55                   	push   %ebp
c0106a7c:	89 e5                	mov    %esp,%ebp
c0106a7e:	83 ec 28             	sub    $0x28,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0106a81:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106a85:	74 0f                	je     c0106a96 <exit_mmap+0x1b>
c0106a87:	ff 75 08             	pushl  0x8(%ebp)
c0106a8a:	e8 b7 f9 ff ff       	call   c0106446 <mm_count>
c0106a8f:	83 c4 04             	add    $0x4,%esp
c0106a92:	85 c0                	test   %eax,%eax
c0106a94:	74 19                	je     c0106aaf <exit_mmap+0x34>
c0106a96:	68 14 e1 10 c0       	push   $0xc010e114
c0106a9b:	68 5b e0 10 c0       	push   $0xc010e05b
c0106aa0:	68 d6 00 00 00       	push   $0xd6
c0106aa5:	68 70 e0 10 c0       	push   $0xc010e070
c0106aaa:	e8 b2 ac ff ff       	call   c0101761 <__panic>
    pde_t *pgdir = mm->pgdir;
c0106aaf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ab2:	8b 40 0c             	mov    0xc(%eax),%eax
c0106ab5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c0106ab8:	8b 45 08             	mov    0x8(%ebp),%eax
c0106abb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106abe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106ac1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0106ac4:	eb 25                	jmp    c0106aeb <exit_mmap+0x70>
        struct vma_struct *vma = le2vma(le, list_link);
c0106ac6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ac9:	83 e8 10             	sub    $0x10,%eax
c0106acc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0106acf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106ad2:	8b 50 08             	mov    0x8(%eax),%edx
c0106ad5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106ad8:	8b 40 04             	mov    0x4(%eax),%eax
c0106adb:	83 ec 04             	sub    $0x4,%esp
c0106ade:	52                   	push   %edx
c0106adf:	50                   	push   %eax
c0106ae0:	ff 75 f0             	pushl  -0x10(%ebp)
c0106ae3:	e8 e4 e8 ff ff       	call   c01053cc <unmap_range>
c0106ae8:	83 c4 10             	add    $0x10,%esp
c0106aeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106aee:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106af1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106af4:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0106af7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106afd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106b00:	75 c4                	jne    c0106ac6 <exit_mmap+0x4b>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0106b02:	eb 25                	jmp    c0106b29 <exit_mmap+0xae>
        struct vma_struct *vma = le2vma(le, list_link);
c0106b04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b07:	83 e8 10             	sub    $0x10,%eax
c0106b0a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0106b0d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106b10:	8b 50 08             	mov    0x8(%eax),%edx
c0106b13:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106b16:	8b 40 04             	mov    0x4(%eax),%eax
c0106b19:	83 ec 04             	sub    $0x4,%esp
c0106b1c:	52                   	push   %edx
c0106b1d:	50                   	push   %eax
c0106b1e:	ff 75 f0             	pushl  -0x10(%ebp)
c0106b21:	e8 79 e9 ff ff       	call   c010549f <exit_range>
c0106b26:	83 c4 10             	add    $0x10,%esp
c0106b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b2c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106b2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106b32:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0106b35:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106b38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b3b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106b3e:	75 c4                	jne    c0106b04 <exit_mmap+0x89>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0106b40:	90                   	nop
c0106b41:	c9                   	leave  
c0106b42:	c3                   	ret    

c0106b43 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0106b43:	55                   	push   %ebp
c0106b44:	89 e5                	mov    %esp,%ebp
c0106b46:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0106b49:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b4c:	ff 75 18             	pushl  0x18(%ebp)
c0106b4f:	ff 75 14             	pushl  0x14(%ebp)
c0106b52:	50                   	push   %eax
c0106b53:	ff 75 08             	pushl  0x8(%ebp)
c0106b56:	e8 e2 08 00 00       	call   c010743d <user_mem_check>
c0106b5b:	83 c4 10             	add    $0x10,%esp
c0106b5e:	85 c0                	test   %eax,%eax
c0106b60:	75 07                	jne    c0106b69 <copy_from_user+0x26>
        return 0;
c0106b62:	b8 00 00 00 00       	mov    $0x0,%eax
c0106b67:	eb 19                	jmp    c0106b82 <copy_from_user+0x3f>
    }
    memcpy(dst, src, len);
c0106b69:	83 ec 04             	sub    $0x4,%esp
c0106b6c:	ff 75 14             	pushl  0x14(%ebp)
c0106b6f:	ff 75 10             	pushl  0x10(%ebp)
c0106b72:	ff 75 0c             	pushl  0xc(%ebp)
c0106b75:	e8 59 5a 00 00       	call   c010c5d3 <memcpy>
c0106b7a:	83 c4 10             	add    $0x10,%esp
    return 1;
c0106b7d:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0106b82:	c9                   	leave  
c0106b83:	c3                   	ret    

c0106b84 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0106b84:	55                   	push   %ebp
c0106b85:	89 e5                	mov    %esp,%ebp
c0106b87:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0106b8a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106b8d:	6a 01                	push   $0x1
c0106b8f:	ff 75 14             	pushl  0x14(%ebp)
c0106b92:	50                   	push   %eax
c0106b93:	ff 75 08             	pushl  0x8(%ebp)
c0106b96:	e8 a2 08 00 00       	call   c010743d <user_mem_check>
c0106b9b:	83 c4 10             	add    $0x10,%esp
c0106b9e:	85 c0                	test   %eax,%eax
c0106ba0:	75 07                	jne    c0106ba9 <copy_to_user+0x25>
        return 0;
c0106ba2:	b8 00 00 00 00       	mov    $0x0,%eax
c0106ba7:	eb 19                	jmp    c0106bc2 <copy_to_user+0x3e>
    }
    memcpy(dst, src, len);
c0106ba9:	83 ec 04             	sub    $0x4,%esp
c0106bac:	ff 75 14             	pushl  0x14(%ebp)
c0106baf:	ff 75 10             	pushl  0x10(%ebp)
c0106bb2:	ff 75 0c             	pushl  0xc(%ebp)
c0106bb5:	e8 19 5a 00 00       	call   c010c5d3 <memcpy>
c0106bba:	83 c4 10             	add    $0x10,%esp
    return 1;
c0106bbd:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0106bc2:	c9                   	leave  
c0106bc3:	c3                   	ret    

c0106bc4 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0106bc4:	55                   	push   %ebp
c0106bc5:	89 e5                	mov    %esp,%ebp
c0106bc7:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0106bca:	e8 03 00 00 00       	call   c0106bd2 <check_vmm>
}
c0106bcf:	90                   	nop
c0106bd0:	c9                   	leave  
c0106bd1:	c3                   	ret    

c0106bd2 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0106bd2:	55                   	push   %ebp
c0106bd3:	89 e5                	mov    %esp,%ebp
c0106bd5:	83 ec 18             	sub    $0x18,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0106bd8:	e8 bd df ff ff       	call   c0104b9a <nr_free_pages>
c0106bdd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0106be0:	e8 18 00 00 00       	call   c0106bfd <check_vma_struct>
    check_pgfault();
c0106be5:	e8 10 04 00 00       	call   c0106ffa <check_pgfault>

 //   assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vmm() succeeded.\n");
c0106bea:	83 ec 0c             	sub    $0xc,%esp
c0106bed:	68 34 e1 10 c0       	push   $0xc010e134
c0106bf2:	e8 8c 96 ff ff       	call   c0100283 <cprintf>
c0106bf7:	83 c4 10             	add    $0x10,%esp
}
c0106bfa:	90                   	nop
c0106bfb:	c9                   	leave  
c0106bfc:	c3                   	ret    

c0106bfd <check_vma_struct>:

static void
check_vma_struct(void) {
c0106bfd:	55                   	push   %ebp
c0106bfe:	89 e5                	mov    %esp,%ebp
c0106c00:	83 ec 58             	sub    $0x58,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0106c03:	e8 92 df ff ff       	call   c0104b9a <nr_free_pages>
c0106c08:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0106c0b:	e8 b3 f8 ff ff       	call   c01064c3 <mm_create>
c0106c10:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0106c13:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106c17:	75 19                	jne    c0106c32 <check_vma_struct+0x35>
c0106c19:	68 eb e0 10 c0       	push   $0xc010e0eb
c0106c1e:	68 5b e0 10 c0       	push   $0xc010e05b
c0106c23:	68 0e 01 00 00       	push   $0x10e
c0106c28:	68 70 e0 10 c0       	push   $0xc010e070
c0106c2d:	e8 2f ab ff ff       	call   c0101761 <__panic>

    int step1 = 10, step2 = step1 * 10;
c0106c32:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0106c39:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106c3c:	89 d0                	mov    %edx,%eax
c0106c3e:	c1 e0 02             	shl    $0x2,%eax
c0106c41:	01 d0                	add    %edx,%eax
c0106c43:	01 c0                	add    %eax,%eax
c0106c45:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0106c48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106c4e:	eb 5f                	jmp    c0106caf <check_vma_struct+0xb2>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0106c50:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106c53:	89 d0                	mov    %edx,%eax
c0106c55:	c1 e0 02             	shl    $0x2,%eax
c0106c58:	01 d0                	add    %edx,%eax
c0106c5a:	83 c0 02             	add    $0x2,%eax
c0106c5d:	89 c1                	mov    %eax,%ecx
c0106c5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106c62:	89 d0                	mov    %edx,%eax
c0106c64:	c1 e0 02             	shl    $0x2,%eax
c0106c67:	01 d0                	add    %edx,%eax
c0106c69:	83 ec 04             	sub    $0x4,%esp
c0106c6c:	6a 00                	push   $0x0
c0106c6e:	51                   	push   %ecx
c0106c6f:	50                   	push   %eax
c0106c70:	e8 ec f8 ff ff       	call   c0106561 <vma_create>
c0106c75:	83 c4 10             	add    $0x10,%esp
c0106c78:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0106c7b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106c7f:	75 19                	jne    c0106c9a <check_vma_struct+0x9d>
c0106c81:	68 4c e1 10 c0       	push   $0xc010e14c
c0106c86:	68 5b e0 10 c0       	push   $0xc010e05b
c0106c8b:	68 15 01 00 00       	push   $0x115
c0106c90:	68 70 e0 10 c0       	push   $0xc010e070
c0106c95:	e8 c7 aa ff ff       	call   c0101761 <__panic>
        insert_vma_struct(mm, vma);
c0106c9a:	83 ec 08             	sub    $0x8,%esp
c0106c9d:	ff 75 dc             	pushl  -0x24(%ebp)
c0106ca0:	ff 75 e8             	pushl  -0x18(%ebp)
c0106ca3:	e8 21 fa ff ff       	call   c01066c9 <insert_vma_struct>
c0106ca8:	83 c4 10             	add    $0x10,%esp
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0106cab:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0106caf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106cb3:	7f 9b                	jg     c0106c50 <check_vma_struct+0x53>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0106cb5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106cb8:	83 c0 01             	add    $0x1,%eax
c0106cbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106cbe:	eb 5f                	jmp    c0106d1f <check_vma_struct+0x122>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0106cc0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106cc3:	89 d0                	mov    %edx,%eax
c0106cc5:	c1 e0 02             	shl    $0x2,%eax
c0106cc8:	01 d0                	add    %edx,%eax
c0106cca:	83 c0 02             	add    $0x2,%eax
c0106ccd:	89 c1                	mov    %eax,%ecx
c0106ccf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106cd2:	89 d0                	mov    %edx,%eax
c0106cd4:	c1 e0 02             	shl    $0x2,%eax
c0106cd7:	01 d0                	add    %edx,%eax
c0106cd9:	83 ec 04             	sub    $0x4,%esp
c0106cdc:	6a 00                	push   $0x0
c0106cde:	51                   	push   %ecx
c0106cdf:	50                   	push   %eax
c0106ce0:	e8 7c f8 ff ff       	call   c0106561 <vma_create>
c0106ce5:	83 c4 10             	add    $0x10,%esp
c0106ce8:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0106ceb:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0106cef:	75 19                	jne    c0106d0a <check_vma_struct+0x10d>
c0106cf1:	68 4c e1 10 c0       	push   $0xc010e14c
c0106cf6:	68 5b e0 10 c0       	push   $0xc010e05b
c0106cfb:	68 1b 01 00 00       	push   $0x11b
c0106d00:	68 70 e0 10 c0       	push   $0xc010e070
c0106d05:	e8 57 aa ff ff       	call   c0101761 <__panic>
        insert_vma_struct(mm, vma);
c0106d0a:	83 ec 08             	sub    $0x8,%esp
c0106d0d:	ff 75 d8             	pushl  -0x28(%ebp)
c0106d10:	ff 75 e8             	pushl  -0x18(%ebp)
c0106d13:	e8 b1 f9 ff ff       	call   c01066c9 <insert_vma_struct>
c0106d18:	83 c4 10             	add    $0x10,%esp
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0106d1b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106d1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106d22:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0106d25:	7e 99                	jle    c0106cc0 <check_vma_struct+0xc3>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0106d27:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106d2a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0106d2d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106d30:	8b 40 04             	mov    0x4(%eax),%eax
c0106d33:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0106d36:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0106d3d:	e9 81 00 00 00       	jmp    c0106dc3 <check_vma_struct+0x1c6>
        assert(le != &(mm->mmap_list));
c0106d42:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106d45:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106d48:	75 19                	jne    c0106d63 <check_vma_struct+0x166>
c0106d4a:	68 58 e1 10 c0       	push   $0xc010e158
c0106d4f:	68 5b e0 10 c0       	push   $0xc010e05b
c0106d54:	68 22 01 00 00       	push   $0x122
c0106d59:	68 70 e0 10 c0       	push   $0xc010e070
c0106d5e:	e8 fe a9 ff ff       	call   c0101761 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0106d63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106d66:	83 e8 10             	sub    $0x10,%eax
c0106d69:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0106d6c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106d6f:	8b 48 04             	mov    0x4(%eax),%ecx
c0106d72:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106d75:	89 d0                	mov    %edx,%eax
c0106d77:	c1 e0 02             	shl    $0x2,%eax
c0106d7a:	01 d0                	add    %edx,%eax
c0106d7c:	39 c1                	cmp    %eax,%ecx
c0106d7e:	75 17                	jne    c0106d97 <check_vma_struct+0x19a>
c0106d80:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106d83:	8b 48 08             	mov    0x8(%eax),%ecx
c0106d86:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106d89:	89 d0                	mov    %edx,%eax
c0106d8b:	c1 e0 02             	shl    $0x2,%eax
c0106d8e:	01 d0                	add    %edx,%eax
c0106d90:	83 c0 02             	add    $0x2,%eax
c0106d93:	39 c1                	cmp    %eax,%ecx
c0106d95:	74 19                	je     c0106db0 <check_vma_struct+0x1b3>
c0106d97:	68 70 e1 10 c0       	push   $0xc010e170
c0106d9c:	68 5b e0 10 c0       	push   $0xc010e05b
c0106da1:	68 24 01 00 00       	push   $0x124
c0106da6:	68 70 e0 10 c0       	push   $0xc010e070
c0106dab:	e8 b1 a9 ff ff       	call   c0101761 <__panic>
c0106db0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106db3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0106db6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106db9:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0106dbc:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0106dbf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106dc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106dc6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0106dc9:	0f 8e 73 ff ff ff    	jle    c0106d42 <check_vma_struct+0x145>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0106dcf:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0106dd6:	e9 80 01 00 00       	jmp    c0106f5b <check_vma_struct+0x35e>
        struct vma_struct *vma1 = find_vma(mm, i);
c0106ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106dde:	83 ec 08             	sub    $0x8,%esp
c0106de1:	50                   	push   %eax
c0106de2:	ff 75 e8             	pushl  -0x18(%ebp)
c0106de5:	e8 b3 f7 ff ff       	call   c010659d <find_vma>
c0106dea:	83 c4 10             	add    $0x10,%esp
c0106ded:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma1 != NULL);
c0106df0:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0106df4:	75 19                	jne    c0106e0f <check_vma_struct+0x212>
c0106df6:	68 a5 e1 10 c0       	push   $0xc010e1a5
c0106dfb:	68 5b e0 10 c0       	push   $0xc010e05b
c0106e00:	68 2a 01 00 00       	push   $0x12a
c0106e05:	68 70 e0 10 c0       	push   $0xc010e070
c0106e0a:	e8 52 a9 ff ff       	call   c0101761 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0106e0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e12:	83 c0 01             	add    $0x1,%eax
c0106e15:	83 ec 08             	sub    $0x8,%esp
c0106e18:	50                   	push   %eax
c0106e19:	ff 75 e8             	pushl  -0x18(%ebp)
c0106e1c:	e8 7c f7 ff ff       	call   c010659d <find_vma>
c0106e21:	83 c4 10             	add    $0x10,%esp
c0106e24:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma2 != NULL);
c0106e27:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0106e2b:	75 19                	jne    c0106e46 <check_vma_struct+0x249>
c0106e2d:	68 b2 e1 10 c0       	push   $0xc010e1b2
c0106e32:	68 5b e0 10 c0       	push   $0xc010e05b
c0106e37:	68 2c 01 00 00       	push   $0x12c
c0106e3c:	68 70 e0 10 c0       	push   $0xc010e070
c0106e41:	e8 1b a9 ff ff       	call   c0101761 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0106e46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e49:	83 c0 02             	add    $0x2,%eax
c0106e4c:	83 ec 08             	sub    $0x8,%esp
c0106e4f:	50                   	push   %eax
c0106e50:	ff 75 e8             	pushl  -0x18(%ebp)
c0106e53:	e8 45 f7 ff ff       	call   c010659d <find_vma>
c0106e58:	83 c4 10             	add    $0x10,%esp
c0106e5b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma3 == NULL);
c0106e5e:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0106e62:	74 19                	je     c0106e7d <check_vma_struct+0x280>
c0106e64:	68 bf e1 10 c0       	push   $0xc010e1bf
c0106e69:	68 5b e0 10 c0       	push   $0xc010e05b
c0106e6e:	68 2e 01 00 00       	push   $0x12e
c0106e73:	68 70 e0 10 c0       	push   $0xc010e070
c0106e78:	e8 e4 a8 ff ff       	call   c0101761 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0106e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e80:	83 c0 03             	add    $0x3,%eax
c0106e83:	83 ec 08             	sub    $0x8,%esp
c0106e86:	50                   	push   %eax
c0106e87:	ff 75 e8             	pushl  -0x18(%ebp)
c0106e8a:	e8 0e f7 ff ff       	call   c010659d <find_vma>
c0106e8f:	83 c4 10             	add    $0x10,%esp
c0106e92:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma4 == NULL);
c0106e95:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0106e99:	74 19                	je     c0106eb4 <check_vma_struct+0x2b7>
c0106e9b:	68 cc e1 10 c0       	push   $0xc010e1cc
c0106ea0:	68 5b e0 10 c0       	push   $0xc010e05b
c0106ea5:	68 30 01 00 00       	push   $0x130
c0106eaa:	68 70 e0 10 c0       	push   $0xc010e070
c0106eaf:	e8 ad a8 ff ff       	call   c0101761 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0106eb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106eb7:	83 c0 04             	add    $0x4,%eax
c0106eba:	83 ec 08             	sub    $0x8,%esp
c0106ebd:	50                   	push   %eax
c0106ebe:	ff 75 e8             	pushl  -0x18(%ebp)
c0106ec1:	e8 d7 f6 ff ff       	call   c010659d <find_vma>
c0106ec6:	83 c4 10             	add    $0x10,%esp
c0106ec9:	89 45 bc             	mov    %eax,-0x44(%ebp)
        assert(vma5 == NULL);
c0106ecc:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0106ed0:	74 19                	je     c0106eeb <check_vma_struct+0x2ee>
c0106ed2:	68 d9 e1 10 c0       	push   $0xc010e1d9
c0106ed7:	68 5b e0 10 c0       	push   $0xc010e05b
c0106edc:	68 32 01 00 00       	push   $0x132
c0106ee1:	68 70 e0 10 c0       	push   $0xc010e070
c0106ee6:	e8 76 a8 ff ff       	call   c0101761 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0106eeb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106eee:	8b 50 04             	mov    0x4(%eax),%edx
c0106ef1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ef4:	39 c2                	cmp    %eax,%edx
c0106ef6:	75 10                	jne    c0106f08 <check_vma_struct+0x30b>
c0106ef8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106efb:	8b 40 08             	mov    0x8(%eax),%eax
c0106efe:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106f01:	83 c2 02             	add    $0x2,%edx
c0106f04:	39 d0                	cmp    %edx,%eax
c0106f06:	74 19                	je     c0106f21 <check_vma_struct+0x324>
c0106f08:	68 e8 e1 10 c0       	push   $0xc010e1e8
c0106f0d:	68 5b e0 10 c0       	push   $0xc010e05b
c0106f12:	68 34 01 00 00       	push   $0x134
c0106f17:	68 70 e0 10 c0       	push   $0xc010e070
c0106f1c:	e8 40 a8 ff ff       	call   c0101761 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0106f21:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106f24:	8b 50 04             	mov    0x4(%eax),%edx
c0106f27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f2a:	39 c2                	cmp    %eax,%edx
c0106f2c:	75 10                	jne    c0106f3e <check_vma_struct+0x341>
c0106f2e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106f31:	8b 40 08             	mov    0x8(%eax),%eax
c0106f34:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106f37:	83 c2 02             	add    $0x2,%edx
c0106f3a:	39 d0                	cmp    %edx,%eax
c0106f3c:	74 19                	je     c0106f57 <check_vma_struct+0x35a>
c0106f3e:	68 18 e2 10 c0       	push   $0xc010e218
c0106f43:	68 5b e0 10 c0       	push   $0xc010e05b
c0106f48:	68 35 01 00 00       	push   $0x135
c0106f4d:	68 70 e0 10 c0       	push   $0xc010e070
c0106f52:	e8 0a a8 ff ff       	call   c0101761 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0106f57:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0106f5b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106f5e:	89 d0                	mov    %edx,%eax
c0106f60:	c1 e0 02             	shl    $0x2,%eax
c0106f63:	01 d0                	add    %edx,%eax
c0106f65:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106f68:	0f 8d 6d fe ff ff    	jge    c0106ddb <check_vma_struct+0x1de>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0106f6e:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0106f75:	eb 5c                	jmp    c0106fd3 <check_vma_struct+0x3d6>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0106f77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f7a:	83 ec 08             	sub    $0x8,%esp
c0106f7d:	50                   	push   %eax
c0106f7e:	ff 75 e8             	pushl  -0x18(%ebp)
c0106f81:	e8 17 f6 ff ff       	call   c010659d <find_vma>
c0106f86:	83 c4 10             	add    $0x10,%esp
c0106f89:	89 45 b8             	mov    %eax,-0x48(%ebp)
        if (vma_below_5 != NULL ) {
c0106f8c:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0106f90:	74 1e                	je     c0106fb0 <check_vma_struct+0x3b3>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0106f92:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106f95:	8b 50 08             	mov    0x8(%eax),%edx
c0106f98:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106f9b:	8b 40 04             	mov    0x4(%eax),%eax
c0106f9e:	52                   	push   %edx
c0106f9f:	50                   	push   %eax
c0106fa0:	ff 75 f4             	pushl  -0xc(%ebp)
c0106fa3:	68 48 e2 10 c0       	push   $0xc010e248
c0106fa8:	e8 d6 92 ff ff       	call   c0100283 <cprintf>
c0106fad:	83 c4 10             	add    $0x10,%esp
        }
        assert(vma_below_5 == NULL);
c0106fb0:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0106fb4:	74 19                	je     c0106fcf <check_vma_struct+0x3d2>
c0106fb6:	68 6d e2 10 c0       	push   $0xc010e26d
c0106fbb:	68 5b e0 10 c0       	push   $0xc010e05b
c0106fc0:	68 3d 01 00 00       	push   $0x13d
c0106fc5:	68 70 e0 10 c0       	push   $0xc010e070
c0106fca:	e8 92 a7 ff ff       	call   c0101761 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0106fcf:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0106fd3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106fd7:	79 9e                	jns    c0106f77 <check_vma_struct+0x37a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0106fd9:	83 ec 0c             	sub    $0xc,%esp
c0106fdc:	ff 75 e8             	pushl  -0x18(%ebp)
c0106fdf:	e8 09 f8 ff ff       	call   c01067ed <mm_destroy>
c0106fe4:	83 c4 10             	add    $0x10,%esp

//    assert(nr_free_pages_store == nr_free_pages());

    cprintf("check_vma_struct() succeeded!\n");
c0106fe7:	83 ec 0c             	sub    $0xc,%esp
c0106fea:	68 84 e2 10 c0       	push   $0xc010e284
c0106fef:	e8 8f 92 ff ff       	call   c0100283 <cprintf>
c0106ff4:	83 c4 10             	add    $0x10,%esp
}
c0106ff7:	90                   	nop
c0106ff8:	c9                   	leave  
c0106ff9:	c3                   	ret    

c0106ffa <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0106ffa:	55                   	push   %ebp
c0106ffb:	89 e5                	mov    %esp,%ebp
c0106ffd:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0107000:	e8 95 db ff ff       	call   c0104b9a <nr_free_pages>
c0107005:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0107008:	e8 b6 f4 ff ff       	call   c01064c3 <mm_create>
c010700d:	a3 68 3d 1b c0       	mov    %eax,0xc01b3d68
    assert(check_mm_struct != NULL);
c0107012:	a1 68 3d 1b c0       	mov    0xc01b3d68,%eax
c0107017:	85 c0                	test   %eax,%eax
c0107019:	75 19                	jne    c0107034 <check_pgfault+0x3a>
c010701b:	68 a3 e2 10 c0       	push   $0xc010e2a3
c0107020:	68 5b e0 10 c0       	push   $0xc010e05b
c0107025:	68 4f 01 00 00       	push   $0x14f
c010702a:	68 70 e0 10 c0       	push   $0xc010e070
c010702f:	e8 2d a7 ff ff       	call   c0101761 <__panic>

    struct mm_struct *mm = check_mm_struct;
c0107034:	a1 68 3d 1b c0       	mov    0xc01b3d68,%eax
c0107039:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c010703c:	8b 15 64 1c 1b c0    	mov    0xc01b1c64,%edx
c0107042:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107045:	89 50 0c             	mov    %edx,0xc(%eax)
c0107048:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010704b:	8b 40 0c             	mov    0xc(%eax),%eax
c010704e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0107051:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107054:	8b 00                	mov    (%eax),%eax
c0107056:	85 c0                	test   %eax,%eax
c0107058:	74 19                	je     c0107073 <check_pgfault+0x79>
c010705a:	68 bb e2 10 c0       	push   $0xc010e2bb
c010705f:	68 5b e0 10 c0       	push   $0xc010e05b
c0107064:	68 53 01 00 00       	push   $0x153
c0107069:	68 70 e0 10 c0       	push   $0xc010e070
c010706e:	e8 ee a6 ff ff       	call   c0101761 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0107073:	83 ec 04             	sub    $0x4,%esp
c0107076:	6a 02                	push   $0x2
c0107078:	68 00 00 40 00       	push   $0x400000
c010707d:	6a 00                	push   $0x0
c010707f:	e8 dd f4 ff ff       	call   c0106561 <vma_create>
c0107084:	83 c4 10             	add    $0x10,%esp
c0107087:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c010708a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010708e:	75 19                	jne    c01070a9 <check_pgfault+0xaf>
c0107090:	68 4c e1 10 c0       	push   $0xc010e14c
c0107095:	68 5b e0 10 c0       	push   $0xc010e05b
c010709a:	68 56 01 00 00       	push   $0x156
c010709f:	68 70 e0 10 c0       	push   $0xc010e070
c01070a4:	e8 b8 a6 ff ff       	call   c0101761 <__panic>

    insert_vma_struct(mm, vma);
c01070a9:	83 ec 08             	sub    $0x8,%esp
c01070ac:	ff 75 e0             	pushl  -0x20(%ebp)
c01070af:	ff 75 e8             	pushl  -0x18(%ebp)
c01070b2:	e8 12 f6 ff ff       	call   c01066c9 <insert_vma_struct>
c01070b7:	83 c4 10             	add    $0x10,%esp

    uintptr_t addr = 0x100;
c01070ba:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c01070c1:	83 ec 08             	sub    $0x8,%esp
c01070c4:	ff 75 dc             	pushl  -0x24(%ebp)
c01070c7:	ff 75 e8             	pushl  -0x18(%ebp)
c01070ca:	e8 ce f4 ff ff       	call   c010659d <find_vma>
c01070cf:	83 c4 10             	add    $0x10,%esp
c01070d2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01070d5:	74 19                	je     c01070f0 <check_pgfault+0xf6>
c01070d7:	68 c9 e2 10 c0       	push   $0xc010e2c9
c01070dc:	68 5b e0 10 c0       	push   $0xc010e05b
c01070e1:	68 5b 01 00 00       	push   $0x15b
c01070e6:	68 70 e0 10 c0       	push   $0xc010e070
c01070eb:	e8 71 a6 ff ff       	call   c0101761 <__panic>

    int i, sum = 0;
c01070f0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c01070f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01070fe:	eb 19                	jmp    c0107119 <check_pgfault+0x11f>
        *(char *)(addr + i) = i;
c0107100:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107103:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107106:	01 d0                	add    %edx,%eax
c0107108:	89 c2                	mov    %eax,%edx
c010710a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010710d:	88 02                	mov    %al,(%edx)
        sum += i;
c010710f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107112:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0107115:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107119:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010711d:	7e e1                	jle    c0107100 <check_pgfault+0x106>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c010711f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107126:	eb 15                	jmp    c010713d <check_pgfault+0x143>
        sum -= *(char *)(addr + i);
c0107128:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010712b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010712e:	01 d0                	add    %edx,%eax
c0107130:	0f b6 00             	movzbl (%eax),%eax
c0107133:	0f be c0             	movsbl %al,%eax
c0107136:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0107139:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010713d:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0107141:	7e e5                	jle    c0107128 <check_pgfault+0x12e>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0107143:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107147:	74 19                	je     c0107162 <check_pgfault+0x168>
c0107149:	68 e3 e2 10 c0       	push   $0xc010e2e3
c010714e:	68 5b e0 10 c0       	push   $0xc010e05b
c0107153:	68 65 01 00 00       	push   $0x165
c0107158:	68 70 e0 10 c0       	push   $0xc010e070
c010715d:	e8 ff a5 ff ff       	call   c0101761 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0107162:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107165:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0107168:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010716b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107170:	83 ec 08             	sub    $0x8,%esp
c0107173:	50                   	push   %eax
c0107174:	ff 75 e4             	pushl  -0x1c(%ebp)
c0107177:	e8 f0 e5 ff ff       	call   c010576c <page_remove>
c010717c:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(pgdir[0]));
c010717f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107182:	8b 00                	mov    (%eax),%eax
c0107184:	83 ec 0c             	sub    $0xc,%esp
c0107187:	50                   	push   %eax
c0107188:	e8 1a f3 ff ff       	call   c01064a7 <pde2page>
c010718d:	83 c4 10             	add    $0x10,%esp
c0107190:	83 ec 08             	sub    $0x8,%esp
c0107193:	6a 01                	push   $0x1
c0107195:	50                   	push   %eax
c0107196:	e8 ca d9 ff ff       	call   c0104b65 <free_pages>
c010719b:	83 c4 10             	add    $0x10,%esp
    pgdir[0] = 0;
c010719e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01071a1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c01071a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01071aa:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c01071b1:	83 ec 0c             	sub    $0xc,%esp
c01071b4:	ff 75 e8             	pushl  -0x18(%ebp)
c01071b7:	e8 31 f6 ff ff       	call   c01067ed <mm_destroy>
c01071bc:	83 c4 10             	add    $0x10,%esp
    check_mm_struct = NULL;
c01071bf:	c7 05 68 3d 1b c0 00 	movl   $0x0,0xc01b3d68
c01071c6:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c01071c9:	e8 cc d9 ff ff       	call   c0104b9a <nr_free_pages>
c01071ce:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01071d1:	74 19                	je     c01071ec <check_pgfault+0x1f2>
c01071d3:	68 ec e2 10 c0       	push   $0xc010e2ec
c01071d8:	68 5b e0 10 c0       	push   $0xc010e05b
c01071dd:	68 6f 01 00 00       	push   $0x16f
c01071e2:	68 70 e0 10 c0       	push   $0xc010e070
c01071e7:	e8 75 a5 ff ff       	call   c0101761 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c01071ec:	83 ec 0c             	sub    $0xc,%esp
c01071ef:	68 13 e3 10 c0       	push   $0xc010e313
c01071f4:	e8 8a 90 ff ff       	call   c0100283 <cprintf>
c01071f9:	83 c4 10             	add    $0x10,%esp
}
c01071fc:	90                   	nop
c01071fd:	c9                   	leave  
c01071fe:	c3                   	ret    

c01071ff <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c01071ff:	55                   	push   %ebp
c0107200:	89 e5                	mov    %esp,%ebp
c0107202:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_INVAL;
c0107205:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c010720c:	ff 75 10             	pushl  0x10(%ebp)
c010720f:	ff 75 08             	pushl  0x8(%ebp)
c0107212:	e8 86 f3 ff ff       	call   c010659d <find_vma>
c0107217:	83 c4 08             	add    $0x8,%esp
c010721a:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c010721d:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c0107222:	83 c0 01             	add    $0x1,%eax
c0107225:	a3 ec 1c 1b c0       	mov    %eax,0xc01b1cec
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c010722a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010722e:	74 0b                	je     c010723b <do_pgfault+0x3c>
c0107230:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107233:	8b 40 04             	mov    0x4(%eax),%eax
c0107236:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107239:	76 18                	jbe    c0107253 <do_pgfault+0x54>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c010723b:	83 ec 08             	sub    $0x8,%esp
c010723e:	ff 75 10             	pushl  0x10(%ebp)
c0107241:	68 30 e3 10 c0       	push   $0xc010e330
c0107246:	e8 38 90 ff ff       	call   c0100283 <cprintf>
c010724b:	83 c4 10             	add    $0x10,%esp
        goto failed;
c010724e:	e9 e5 01 00 00       	jmp    c0107438 <do_pgfault+0x239>
    }
    //check the error_code
    switch (error_code & 3) {
c0107253:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107256:	83 e0 03             	and    $0x3,%eax
c0107259:	85 c0                	test   %eax,%eax
c010725b:	74 3c                	je     c0107299 <do_pgfault+0x9a>
c010725d:	83 f8 01             	cmp    $0x1,%eax
c0107260:	74 22                	je     c0107284 <do_pgfault+0x85>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0107262:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107265:	8b 40 0c             	mov    0xc(%eax),%eax
c0107268:	83 e0 02             	and    $0x2,%eax
c010726b:	85 c0                	test   %eax,%eax
c010726d:	75 4c                	jne    c01072bb <do_pgfault+0xbc>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c010726f:	83 ec 0c             	sub    $0xc,%esp
c0107272:	68 60 e3 10 c0       	push   $0xc010e360
c0107277:	e8 07 90 ff ff       	call   c0100283 <cprintf>
c010727c:	83 c4 10             	add    $0x10,%esp
            goto failed;
c010727f:	e9 b4 01 00 00       	jmp    c0107438 <do_pgfault+0x239>
        }
        break;
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0107284:	83 ec 0c             	sub    $0xc,%esp
c0107287:	68 c0 e3 10 c0       	push   $0xc010e3c0
c010728c:	e8 f2 8f ff ff       	call   c0100283 <cprintf>
c0107291:	83 c4 10             	add    $0x10,%esp
        goto failed;
c0107294:	e9 9f 01 00 00       	jmp    c0107438 <do_pgfault+0x239>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0107299:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010729c:	8b 40 0c             	mov    0xc(%eax),%eax
c010729f:	83 e0 05             	and    $0x5,%eax
c01072a2:	85 c0                	test   %eax,%eax
c01072a4:	75 16                	jne    c01072bc <do_pgfault+0xbd>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c01072a6:	83 ec 0c             	sub    $0xc,%esp
c01072a9:	68 f8 e3 10 c0       	push   $0xc010e3f8
c01072ae:	e8 d0 8f ff ff       	call   c0100283 <cprintf>
c01072b3:	83 c4 10             	add    $0x10,%esp
            goto failed;
c01072b6:	e9 7d 01 00 00       	jmp    c0107438 <do_pgfault+0x239>
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
            goto failed;
        }
        break;
c01072bb:	90                   	nop
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c01072bc:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c01072c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01072c6:	8b 40 0c             	mov    0xc(%eax),%eax
c01072c9:	83 e0 02             	and    $0x2,%eax
c01072cc:	85 c0                	test   %eax,%eax
c01072ce:	74 04                	je     c01072d4 <do_pgfault+0xd5>
        perm |= PTE_W;
c01072d0:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c01072d4:	8b 45 10             	mov    0x10(%ebp),%eax
c01072d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01072da:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01072dd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01072e2:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c01072e5:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c01072ec:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        }
   }
#endif
    // try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    // (notice the 3th parameter '1')
    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
c01072f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01072f6:	8b 40 0c             	mov    0xc(%eax),%eax
c01072f9:	83 ec 04             	sub    $0x4,%esp
c01072fc:	6a 01                	push   $0x1
c01072fe:	ff 75 10             	pushl  0x10(%ebp)
c0107301:	50                   	push   %eax
c0107302:	e8 ed de ff ff       	call   c01051f4 <get_pte>
c0107307:	83 c4 10             	add    $0x10,%esp
c010730a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010730d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107311:	75 15                	jne    c0107328 <do_pgfault+0x129>
        cprintf("get_pte in do_pgfault failed\n");
c0107313:	83 ec 0c             	sub    $0xc,%esp
c0107316:	68 5b e4 10 c0       	push   $0xc010e45b
c010731b:	e8 63 8f ff ff       	call   c0100283 <cprintf>
c0107320:	83 c4 10             	add    $0x10,%esp
        goto failed;
c0107323:	e9 10 01 00 00       	jmp    c0107438 <do_pgfault+0x239>
    }
    
    if (*ptep == 0) { // if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
c0107328:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010732b:	8b 00                	mov    (%eax),%eax
c010732d:	85 c0                	test   %eax,%eax
c010732f:	75 35                	jne    c0107366 <do_pgfault+0x167>
        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c0107331:	8b 45 08             	mov    0x8(%ebp),%eax
c0107334:	8b 40 0c             	mov    0xc(%eax),%eax
c0107337:	83 ec 04             	sub    $0x4,%esp
c010733a:	ff 75 f0             	pushl  -0x10(%ebp)
c010733d:	ff 75 10             	pushl  0x10(%ebp)
c0107340:	50                   	push   %eax
c0107341:	e8 68 e5 ff ff       	call   c01058ae <pgdir_alloc_page>
c0107346:	83 c4 10             	add    $0x10,%esp
c0107349:	85 c0                	test   %eax,%eax
c010734b:	0f 85 e0 00 00 00    	jne    c0107431 <do_pgfault+0x232>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c0107351:	83 ec 0c             	sub    $0xc,%esp
c0107354:	68 7c e4 10 c0       	push   $0xc010e47c
c0107359:	e8 25 8f ff ff       	call   c0100283 <cprintf>
c010735e:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0107361:	e9 d2 00 00 00       	jmp    c0107438 <do_pgfault+0x239>
        }
    }
    else {
        struct Page *page=NULL;
c0107366:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        cprintf("do pgfault: ptep %x, pte %x\n",ptep, *ptep);
c010736d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107370:	8b 00                	mov    (%eax),%eax
c0107372:	83 ec 04             	sub    $0x4,%esp
c0107375:	50                   	push   %eax
c0107376:	ff 75 e4             	pushl  -0x1c(%ebp)
c0107379:	68 a3 e4 10 c0       	push   $0xc010e4a3
c010737e:	e8 00 8f ff ff       	call   c0100283 <cprintf>
c0107383:	83 c4 10             	add    $0x10,%esp
        if (*ptep & PTE_P) {
c0107386:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107389:	8b 00                	mov    (%eax),%eax
c010738b:	83 e0 01             	and    $0x1,%eax
c010738e:	85 c0                	test   %eax,%eax
c0107390:	74 17                	je     c01073a9 <do_pgfault+0x1aa>
            //if process write to this existed readonly page (PTE_P means existed), then should be here now.
            //we can implement the delayed memory space copy for fork child process (AKA copy on write, COW).
            //we didn't implement now, we will do it in future.
            panic("error write a non-writable pte");
c0107392:	83 ec 04             	sub    $0x4,%esp
c0107395:	68 c0 e4 10 c0       	push   $0xc010e4c0
c010739a:	68 ff 01 00 00       	push   $0x1ff
c010739f:	68 70 e0 10 c0       	push   $0xc010e070
c01073a4:	e8 b8 a3 ff ff       	call   c0101761 <__panic>
            //page = pte2page(*ptep);
        } else{
           // if this pte is a swap entry, then load data from disk to a page with phy addr
           // and call page_insert to map the phy addr with logical addr
           if(swap_init_ok) {               
c01073a9:	a1 f0 1c 1b c0       	mov    0xc01b1cf0,%eax
c01073ae:	85 c0                	test   %eax,%eax
c01073b0:	74 30                	je     c01073e2 <do_pgfault+0x1e3>
               if ((ret = swap_in(mm, addr, &page)) != 0) {
c01073b2:	83 ec 04             	sub    $0x4,%esp
c01073b5:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01073b8:	50                   	push   %eax
c01073b9:	ff 75 10             	pushl  0x10(%ebp)
c01073bc:	ff 75 08             	pushl  0x8(%ebp)
c01073bf:	e8 7f 04 00 00       	call   c0107843 <swap_in>
c01073c4:	83 c4 10             	add    $0x10,%esp
c01073c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01073ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01073ce:	74 2b                	je     c01073fb <do_pgfault+0x1fc>
                   cprintf("swap_in in do_pgfault failed\n");
c01073d0:	83 ec 0c             	sub    $0xc,%esp
c01073d3:	68 df e4 10 c0       	push   $0xc010e4df
c01073d8:	e8 a6 8e ff ff       	call   c0100283 <cprintf>
c01073dd:	83 c4 10             	add    $0x10,%esp
                   goto failed;
c01073e0:	eb 56                	jmp    c0107438 <do_pgfault+0x239>
               }    

           }  
           else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c01073e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01073e5:	8b 00                	mov    (%eax),%eax
c01073e7:	83 ec 08             	sub    $0x8,%esp
c01073ea:	50                   	push   %eax
c01073eb:	68 00 e5 10 c0       	push   $0xc010e500
c01073f0:	e8 8e 8e ff ff       	call   c0100283 <cprintf>
c01073f5:	83 c4 10             	add    $0x10,%esp
            goto failed;
c01073f8:	90                   	nop
c01073f9:	eb 3d                	jmp    c0107438 <do_pgfault+0x239>
           }
       } 
       page_insert(mm->pgdir, page, addr, perm);
c01073fb:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01073fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0107401:	8b 40 0c             	mov    0xc(%eax),%eax
c0107404:	ff 75 f0             	pushl  -0x10(%ebp)
c0107407:	ff 75 10             	pushl  0x10(%ebp)
c010740a:	52                   	push   %edx
c010740b:	50                   	push   %eax
c010740c:	e8 94 e3 ff ff       	call   c01057a5 <page_insert>
c0107411:	83 c4 10             	add    $0x10,%esp
       swap_map_swappable(mm, addr, page, 1);
c0107414:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107417:	6a 01                	push   $0x1
c0107419:	50                   	push   %eax
c010741a:	ff 75 10             	pushl  0x10(%ebp)
c010741d:	ff 75 08             	pushl  0x8(%ebp)
c0107420:	e8 8e 02 00 00       	call   c01076b3 <swap_map_swappable>
c0107425:	83 c4 10             	add    $0x10,%esp
       page->pra_vaddr = addr;
c0107428:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010742b:	8b 55 10             	mov    0x10(%ebp),%edx
c010742e:	89 50 20             	mov    %edx,0x20(%eax)
   }
   ret = 0;
c0107431:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0107438:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010743b:	c9                   	leave  
c010743c:	c3                   	ret    

c010743d <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c010743d:	55                   	push   %ebp
c010743e:	89 e5                	mov    %esp,%ebp
c0107440:	83 ec 10             	sub    $0x10,%esp
    if (mm != NULL) {
c0107443:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107447:	0f 84 dc 00 00 00    	je     c0107529 <user_mem_check+0xec>
        if (!USER_ACCESS(addr, addr + len)) {
c010744d:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0107454:	76 1c                	jbe    c0107472 <user_mem_check+0x35>
c0107456:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107459:	8b 45 10             	mov    0x10(%ebp),%eax
c010745c:	01 d0                	add    %edx,%eax
c010745e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107461:	76 0f                	jbe    c0107472 <user_mem_check+0x35>
c0107463:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107466:	8b 45 10             	mov    0x10(%ebp),%eax
c0107469:	01 d0                	add    %edx,%eax
c010746b:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0107470:	76 0a                	jbe    c010747c <user_mem_check+0x3f>
            return 0;
c0107472:	b8 00 00 00 00       	mov    $0x0,%eax
c0107477:	e9 df 00 00 00       	jmp    c010755b <user_mem_check+0x11e>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c010747c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010747f:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0107482:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107485:	8b 45 10             	mov    0x10(%ebp),%eax
c0107488:	01 d0                	add    %edx,%eax
c010748a:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c010748d:	e9 84 00 00 00       	jmp    c0107516 <user_mem_check+0xd9>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0107492:	ff 75 fc             	pushl  -0x4(%ebp)
c0107495:	ff 75 08             	pushl  0x8(%ebp)
c0107498:	e8 00 f1 ff ff       	call   c010659d <find_vma>
c010749d:	83 c4 08             	add    $0x8,%esp
c01074a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01074a3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01074a7:	74 0b                	je     c01074b4 <user_mem_check+0x77>
c01074a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074ac:	8b 40 04             	mov    0x4(%eax),%eax
c01074af:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01074b2:	76 0a                	jbe    c01074be <user_mem_check+0x81>
                return 0;
c01074b4:	b8 00 00 00 00       	mov    $0x0,%eax
c01074b9:	e9 9d 00 00 00       	jmp    c010755b <user_mem_check+0x11e>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c01074be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074c1:	8b 40 0c             	mov    0xc(%eax),%eax
c01074c4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01074c8:	74 07                	je     c01074d1 <user_mem_check+0x94>
c01074ca:	ba 02 00 00 00       	mov    $0x2,%edx
c01074cf:	eb 05                	jmp    c01074d6 <user_mem_check+0x99>
c01074d1:	ba 01 00 00 00       	mov    $0x1,%edx
c01074d6:	21 d0                	and    %edx,%eax
c01074d8:	85 c0                	test   %eax,%eax
c01074da:	75 07                	jne    c01074e3 <user_mem_check+0xa6>
                return 0;
c01074dc:	b8 00 00 00 00       	mov    $0x0,%eax
c01074e1:	eb 78                	jmp    c010755b <user_mem_check+0x11e>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c01074e3:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01074e7:	74 24                	je     c010750d <user_mem_check+0xd0>
c01074e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074ec:	8b 40 0c             	mov    0xc(%eax),%eax
c01074ef:	83 e0 08             	and    $0x8,%eax
c01074f2:	85 c0                	test   %eax,%eax
c01074f4:	74 17                	je     c010750d <user_mem_check+0xd0>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c01074f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074f9:	8b 40 04             	mov    0x4(%eax),%eax
c01074fc:	05 00 10 00 00       	add    $0x1000,%eax
c0107501:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0107504:	76 07                	jbe    c010750d <user_mem_check+0xd0>
                    return 0;
c0107506:	b8 00 00 00 00       	mov    $0x0,%eax
c010750b:	eb 4e                	jmp    c010755b <user_mem_check+0x11e>
                }
            }
            start = vma->vm_end;
c010750d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107510:	8b 40 08             	mov    0x8(%eax),%eax
c0107513:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0107516:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107519:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010751c:	0f 82 70 ff ff ff    	jb     c0107492 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0107522:	b8 01 00 00 00       	mov    $0x1,%eax
c0107527:	eb 32                	jmp    c010755b <user_mem_check+0x11e>
    }
    return KERN_ACCESS(addr, addr + len);
c0107529:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0107530:	76 23                	jbe    c0107555 <user_mem_check+0x118>
c0107532:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107535:	8b 45 10             	mov    0x10(%ebp),%eax
c0107538:	01 d0                	add    %edx,%eax
c010753a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010753d:	76 16                	jbe    c0107555 <user_mem_check+0x118>
c010753f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107542:	8b 45 10             	mov    0x10(%ebp),%eax
c0107545:	01 d0                	add    %edx,%eax
c0107547:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c010754c:	77 07                	ja     c0107555 <user_mem_check+0x118>
c010754e:	b8 01 00 00 00       	mov    $0x1,%eax
c0107553:	eb 05                	jmp    c010755a <user_mem_check+0x11d>
c0107555:	b8 00 00 00 00       	mov    $0x0,%eax
c010755a:	90                   	nop
}
c010755b:	c9                   	leave  
c010755c:	c3                   	ret    

c010755d <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c010755d:	55                   	push   %ebp
c010755e:	89 e5                	mov    %esp,%ebp
c0107560:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0107563:	8b 45 08             	mov    0x8(%ebp),%eax
c0107566:	c1 e8 0c             	shr    $0xc,%eax
c0107569:	89 c2                	mov    %eax,%edx
c010756b:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c0107570:	39 c2                	cmp    %eax,%edx
c0107572:	72 14                	jb     c0107588 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0107574:	83 ec 04             	sub    $0x4,%esp
c0107577:	68 28 e5 10 c0       	push   $0xc010e528
c010757c:	6a 5e                	push   $0x5e
c010757e:	68 47 e5 10 c0       	push   $0xc010e547
c0107583:	e8 d9 a1 ff ff       	call   c0101761 <__panic>
    }
    return &pages[PPN(pa)];
c0107588:	8b 0d 64 3d 1b c0    	mov    0xc01b3d64,%ecx
c010758e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107591:	c1 e8 0c             	shr    $0xc,%eax
c0107594:	89 c2                	mov    %eax,%edx
c0107596:	89 d0                	mov    %edx,%eax
c0107598:	c1 e0 03             	shl    $0x3,%eax
c010759b:	01 d0                	add    %edx,%eax
c010759d:	c1 e0 02             	shl    $0x2,%eax
c01075a0:	01 c8                	add    %ecx,%eax
}
c01075a2:	c9                   	leave  
c01075a3:	c3                   	ret    

c01075a4 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c01075a4:	55                   	push   %ebp
c01075a5:	89 e5                	mov    %esp,%ebp
c01075a7:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c01075aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01075ad:	83 e0 01             	and    $0x1,%eax
c01075b0:	85 c0                	test   %eax,%eax
c01075b2:	75 14                	jne    c01075c8 <pte2page+0x24>
        panic("pte2page called with invalid pte");
c01075b4:	83 ec 04             	sub    $0x4,%esp
c01075b7:	68 58 e5 10 c0       	push   $0xc010e558
c01075bc:	6a 70                	push   $0x70
c01075be:	68 47 e5 10 c0       	push   $0xc010e547
c01075c3:	e8 99 a1 ff ff       	call   c0101761 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c01075c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01075cb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01075d0:	83 ec 0c             	sub    $0xc,%esp
c01075d3:	50                   	push   %eax
c01075d4:	e8 84 ff ff ff       	call   c010755d <pa2page>
c01075d9:	83 c4 10             	add    $0x10,%esp
}
c01075dc:	c9                   	leave  
c01075dd:	c3                   	ret    

c01075de <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c01075de:	55                   	push   %ebp
c01075df:	89 e5                	mov    %esp,%ebp
c01075e1:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c01075e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01075e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01075ec:	83 ec 0c             	sub    $0xc,%esp
c01075ef:	50                   	push   %eax
c01075f0:	e8 68 ff ff ff       	call   c010755d <pa2page>
c01075f5:	83 c4 10             	add    $0x10,%esp
}
c01075f8:	c9                   	leave  
c01075f9:	c3                   	ret    

c01075fa <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c01075fa:	55                   	push   %ebp
c01075fb:	89 e5                	mov    %esp,%ebp
c01075fd:	83 ec 18             	sub    $0x18,%esp
     swapfs_init();
c0107600:	e8 e2 25 00 00       	call   c0109be7 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0107605:	a1 1c 3e 1b c0       	mov    0xc01b3e1c,%eax
c010760a:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c010760f:	76 0c                	jbe    c010761d <swap_init+0x23>
c0107611:	a1 1c 3e 1b c0       	mov    0xc01b3e1c,%eax
c0107616:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c010761b:	76 17                	jbe    c0107634 <swap_init+0x3a>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c010761d:	a1 1c 3e 1b c0       	mov    0xc01b3e1c,%eax
c0107622:	50                   	push   %eax
c0107623:	68 79 e5 10 c0       	push   $0xc010e579
c0107628:	6a 27                	push   $0x27
c010762a:	68 94 e5 10 c0       	push   $0xc010e594
c010762f:	e8 2d a1 ff ff       	call   c0101761 <__panic>
     }
     

     sm = &swap_manager_fifo;
c0107634:	c7 05 f8 1c 1b c0 60 	movl   $0xc012fa60,0xc01b1cf8
c010763b:	fa 12 c0 
     int r = sm->init();
c010763e:	a1 f8 1c 1b c0       	mov    0xc01b1cf8,%eax
c0107643:	8b 40 04             	mov    0x4(%eax),%eax
c0107646:	ff d0                	call   *%eax
c0107648:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c010764b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010764f:	75 27                	jne    c0107678 <swap_init+0x7e>
     {
          swap_init_ok = 1;
c0107651:	c7 05 f0 1c 1b c0 01 	movl   $0x1,0xc01b1cf0
c0107658:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c010765b:	a1 f8 1c 1b c0       	mov    0xc01b1cf8,%eax
c0107660:	8b 00                	mov    (%eax),%eax
c0107662:	83 ec 08             	sub    $0x8,%esp
c0107665:	50                   	push   %eax
c0107666:	68 a3 e5 10 c0       	push   $0xc010e5a3
c010766b:	e8 13 8c ff ff       	call   c0100283 <cprintf>
c0107670:	83 c4 10             	add    $0x10,%esp
          check_swap();
c0107673:	e8 f7 03 00 00       	call   c0107a6f <check_swap>
     }

     return r;
c0107678:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010767b:	c9                   	leave  
c010767c:	c3                   	ret    

c010767d <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c010767d:	55                   	push   %ebp
c010767e:	89 e5                	mov    %esp,%ebp
c0107680:	83 ec 08             	sub    $0x8,%esp
     return sm->init_mm(mm);
c0107683:	a1 f8 1c 1b c0       	mov    0xc01b1cf8,%eax
c0107688:	8b 40 08             	mov    0x8(%eax),%eax
c010768b:	83 ec 0c             	sub    $0xc,%esp
c010768e:	ff 75 08             	pushl  0x8(%ebp)
c0107691:	ff d0                	call   *%eax
c0107693:	83 c4 10             	add    $0x10,%esp
}
c0107696:	c9                   	leave  
c0107697:	c3                   	ret    

c0107698 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0107698:	55                   	push   %ebp
c0107699:	89 e5                	mov    %esp,%ebp
c010769b:	83 ec 08             	sub    $0x8,%esp
     return sm->tick_event(mm);
c010769e:	a1 f8 1c 1b c0       	mov    0xc01b1cf8,%eax
c01076a3:	8b 40 0c             	mov    0xc(%eax),%eax
c01076a6:	83 ec 0c             	sub    $0xc,%esp
c01076a9:	ff 75 08             	pushl  0x8(%ebp)
c01076ac:	ff d0                	call   *%eax
c01076ae:	83 c4 10             	add    $0x10,%esp
}
c01076b1:	c9                   	leave  
c01076b2:	c3                   	ret    

c01076b3 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01076b3:	55                   	push   %ebp
c01076b4:	89 e5                	mov    %esp,%ebp
c01076b6:	83 ec 08             	sub    $0x8,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c01076b9:	a1 f8 1c 1b c0       	mov    0xc01b1cf8,%eax
c01076be:	8b 40 10             	mov    0x10(%eax),%eax
c01076c1:	ff 75 14             	pushl  0x14(%ebp)
c01076c4:	ff 75 10             	pushl  0x10(%ebp)
c01076c7:	ff 75 0c             	pushl  0xc(%ebp)
c01076ca:	ff 75 08             	pushl  0x8(%ebp)
c01076cd:	ff d0                	call   *%eax
c01076cf:	83 c4 10             	add    $0x10,%esp
}
c01076d2:	c9                   	leave  
c01076d3:	c3                   	ret    

c01076d4 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c01076d4:	55                   	push   %ebp
c01076d5:	89 e5                	mov    %esp,%ebp
c01076d7:	83 ec 08             	sub    $0x8,%esp
     return sm->set_unswappable(mm, addr);
c01076da:	a1 f8 1c 1b c0       	mov    0xc01b1cf8,%eax
c01076df:	8b 40 14             	mov    0x14(%eax),%eax
c01076e2:	83 ec 08             	sub    $0x8,%esp
c01076e5:	ff 75 0c             	pushl  0xc(%ebp)
c01076e8:	ff 75 08             	pushl  0x8(%ebp)
c01076eb:	ff d0                	call   *%eax
c01076ed:	83 c4 10             	add    $0x10,%esp
}
c01076f0:	c9                   	leave  
c01076f1:	c3                   	ret    

c01076f2 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c01076f2:	55                   	push   %ebp
c01076f3:	89 e5                	mov    %esp,%ebp
c01076f5:	83 ec 28             	sub    $0x28,%esp
     int i;
     for (i = 0; i != n; ++ i)
c01076f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01076ff:	e9 2e 01 00 00       	jmp    c0107832 <swap_out+0x140>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0107704:	a1 f8 1c 1b c0       	mov    0xc01b1cf8,%eax
c0107709:	8b 40 18             	mov    0x18(%eax),%eax
c010770c:	83 ec 04             	sub    $0x4,%esp
c010770f:	ff 75 10             	pushl  0x10(%ebp)
c0107712:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0107715:	52                   	push   %edx
c0107716:	ff 75 08             	pushl  0x8(%ebp)
c0107719:	ff d0                	call   *%eax
c010771b:	83 c4 10             	add    $0x10,%esp
c010771e:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0107721:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107725:	74 18                	je     c010773f <swap_out+0x4d>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0107727:	83 ec 08             	sub    $0x8,%esp
c010772a:	ff 75 f4             	pushl  -0xc(%ebp)
c010772d:	68 b8 e5 10 c0       	push   $0xc010e5b8
c0107732:	e8 4c 8b ff ff       	call   c0100283 <cprintf>
c0107737:	83 c4 10             	add    $0x10,%esp
c010773a:	e9 ff 00 00 00       	jmp    c010783e <swap_out+0x14c>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c010773f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107742:	8b 40 20             	mov    0x20(%eax),%eax
c0107745:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0107748:	8b 45 08             	mov    0x8(%ebp),%eax
c010774b:	8b 40 0c             	mov    0xc(%eax),%eax
c010774e:	83 ec 04             	sub    $0x4,%esp
c0107751:	6a 00                	push   $0x0
c0107753:	ff 75 ec             	pushl  -0x14(%ebp)
c0107756:	50                   	push   %eax
c0107757:	e8 98 da ff ff       	call   c01051f4 <get_pte>
c010775c:	83 c4 10             	add    $0x10,%esp
c010775f:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0107762:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107765:	8b 00                	mov    (%eax),%eax
c0107767:	83 e0 01             	and    $0x1,%eax
c010776a:	85 c0                	test   %eax,%eax
c010776c:	75 16                	jne    c0107784 <swap_out+0x92>
c010776e:	68 e5 e5 10 c0       	push   $0xc010e5e5
c0107773:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107778:	6a 67                	push   $0x67
c010777a:	68 94 e5 10 c0       	push   $0xc010e594
c010777f:	e8 dd 9f ff ff       	call   c0101761 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0107784:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107787:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010778a:	8b 52 20             	mov    0x20(%edx),%edx
c010778d:	c1 ea 0c             	shr    $0xc,%edx
c0107790:	83 c2 01             	add    $0x1,%edx
c0107793:	c1 e2 08             	shl    $0x8,%edx
c0107796:	83 ec 08             	sub    $0x8,%esp
c0107799:	50                   	push   %eax
c010779a:	52                   	push   %edx
c010779b:	e8 e3 24 00 00       	call   c0109c83 <swapfs_write>
c01077a0:	83 c4 10             	add    $0x10,%esp
c01077a3:	85 c0                	test   %eax,%eax
c01077a5:	74 2b                	je     c01077d2 <swap_out+0xe0>
                    cprintf("SWAP: failed to save\n");
c01077a7:	83 ec 0c             	sub    $0xc,%esp
c01077aa:	68 0f e6 10 c0       	push   $0xc010e60f
c01077af:	e8 cf 8a ff ff       	call   c0100283 <cprintf>
c01077b4:	83 c4 10             	add    $0x10,%esp
                    sm->map_swappable(mm, v, page, 0);
c01077b7:	a1 f8 1c 1b c0       	mov    0xc01b1cf8,%eax
c01077bc:	8b 40 10             	mov    0x10(%eax),%eax
c01077bf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01077c2:	6a 00                	push   $0x0
c01077c4:	52                   	push   %edx
c01077c5:	ff 75 ec             	pushl  -0x14(%ebp)
c01077c8:	ff 75 08             	pushl  0x8(%ebp)
c01077cb:	ff d0                	call   *%eax
c01077cd:	83 c4 10             	add    $0x10,%esp
c01077d0:	eb 5c                	jmp    c010782e <swap_out+0x13c>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c01077d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01077d5:	8b 40 20             	mov    0x20(%eax),%eax
c01077d8:	c1 e8 0c             	shr    $0xc,%eax
c01077db:	83 c0 01             	add    $0x1,%eax
c01077de:	50                   	push   %eax
c01077df:	ff 75 ec             	pushl  -0x14(%ebp)
c01077e2:	ff 75 f4             	pushl  -0xc(%ebp)
c01077e5:	68 28 e6 10 c0       	push   $0xc010e628
c01077ea:	e8 94 8a ff ff       	call   c0100283 <cprintf>
c01077ef:	83 c4 10             	add    $0x10,%esp
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c01077f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01077f5:	8b 40 20             	mov    0x20(%eax),%eax
c01077f8:	c1 e8 0c             	shr    $0xc,%eax
c01077fb:	83 c0 01             	add    $0x1,%eax
c01077fe:	c1 e0 08             	shl    $0x8,%eax
c0107801:	89 c2                	mov    %eax,%edx
c0107803:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107806:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0107808:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010780b:	83 ec 08             	sub    $0x8,%esp
c010780e:	6a 01                	push   $0x1
c0107810:	50                   	push   %eax
c0107811:	e8 4f d3 ff ff       	call   c0104b65 <free_pages>
c0107816:	83 c4 10             	add    $0x10,%esp
          }
          
          tlb_invalidate(mm->pgdir, v);
c0107819:	8b 45 08             	mov    0x8(%ebp),%eax
c010781c:	8b 40 0c             	mov    0xc(%eax),%eax
c010781f:	83 ec 08             	sub    $0x8,%esp
c0107822:	ff 75 ec             	pushl  -0x14(%ebp)
c0107825:	50                   	push   %eax
c0107826:	e8 33 e0 ff ff       	call   c010585e <tlb_invalidate>
c010782b:	83 c4 10             	add    $0x10,%esp

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c010782e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107832:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107835:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107838:	0f 85 c6 fe ff ff    	jne    c0107704 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c010783e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107841:	c9                   	leave  
c0107842:	c3                   	ret    

c0107843 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0107843:	55                   	push   %ebp
c0107844:	89 e5                	mov    %esp,%ebp
c0107846:	83 ec 18             	sub    $0x18,%esp
     struct Page *result = alloc_page();
c0107849:	83 ec 0c             	sub    $0xc,%esp
c010784c:	6a 01                	push   $0x1
c010784e:	e8 a6 d2 ff ff       	call   c0104af9 <alloc_pages>
c0107853:	83 c4 10             	add    $0x10,%esp
c0107856:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0107859:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010785d:	75 16                	jne    c0107875 <swap_in+0x32>
c010785f:	68 68 e6 10 c0       	push   $0xc010e668
c0107864:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107869:	6a 7d                	push   $0x7d
c010786b:	68 94 e5 10 c0       	push   $0xc010e594
c0107870:	e8 ec 9e ff ff       	call   c0101761 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0107875:	8b 45 08             	mov    0x8(%ebp),%eax
c0107878:	8b 40 0c             	mov    0xc(%eax),%eax
c010787b:	83 ec 04             	sub    $0x4,%esp
c010787e:	6a 00                	push   $0x0
c0107880:	ff 75 0c             	pushl  0xc(%ebp)
c0107883:	50                   	push   %eax
c0107884:	e8 6b d9 ff ff       	call   c01051f4 <get_pte>
c0107889:	83 c4 10             	add    $0x10,%esp
c010788c:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c010788f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107892:	8b 00                	mov    (%eax),%eax
c0107894:	83 ec 08             	sub    $0x8,%esp
c0107897:	ff 75 f4             	pushl  -0xc(%ebp)
c010789a:	50                   	push   %eax
c010789b:	e8 8a 23 00 00       	call   c0109c2a <swapfs_read>
c01078a0:	83 c4 10             	add    $0x10,%esp
c01078a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01078a6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01078aa:	74 1f                	je     c01078cb <swap_in+0x88>
     {
        assert(r!=0);
c01078ac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01078b0:	75 19                	jne    c01078cb <swap_in+0x88>
c01078b2:	68 75 e6 10 c0       	push   $0xc010e675
c01078b7:	68 fa e5 10 c0       	push   $0xc010e5fa
c01078bc:	68 85 00 00 00       	push   $0x85
c01078c1:	68 94 e5 10 c0       	push   $0xc010e594
c01078c6:	e8 96 9e ff ff       	call   c0101761 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c01078cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01078ce:	8b 00                	mov    (%eax),%eax
c01078d0:	c1 e8 08             	shr    $0x8,%eax
c01078d3:	83 ec 04             	sub    $0x4,%esp
c01078d6:	ff 75 0c             	pushl  0xc(%ebp)
c01078d9:	50                   	push   %eax
c01078da:	68 7c e6 10 c0       	push   $0xc010e67c
c01078df:	e8 9f 89 ff ff       	call   c0100283 <cprintf>
c01078e4:	83 c4 10             	add    $0x10,%esp
     *ptr_result=result;
c01078e7:	8b 45 10             	mov    0x10(%ebp),%eax
c01078ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01078ed:	89 10                	mov    %edx,(%eax)
     return 0;
c01078ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01078f4:	c9                   	leave  
c01078f5:	c3                   	ret    

c01078f6 <check_content_set>:



static inline void
check_content_set(void)
{
c01078f6:	55                   	push   %ebp
c01078f7:	89 e5                	mov    %esp,%ebp
c01078f9:	83 ec 08             	sub    $0x8,%esp
     *(unsigned char *)0x1000 = 0x0a;
c01078fc:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107901:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0107904:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c0107909:	83 f8 01             	cmp    $0x1,%eax
c010790c:	74 19                	je     c0107927 <check_content_set+0x31>
c010790e:	68 ba e6 10 c0       	push   $0xc010e6ba
c0107913:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107918:	68 92 00 00 00       	push   $0x92
c010791d:	68 94 e5 10 c0       	push   $0xc010e594
c0107922:	e8 3a 9e ff ff       	call   c0101761 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0107927:	b8 10 10 00 00       	mov    $0x1010,%eax
c010792c:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010792f:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c0107934:	83 f8 01             	cmp    $0x1,%eax
c0107937:	74 19                	je     c0107952 <check_content_set+0x5c>
c0107939:	68 ba e6 10 c0       	push   $0xc010e6ba
c010793e:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107943:	68 94 00 00 00       	push   $0x94
c0107948:	68 94 e5 10 c0       	push   $0xc010e594
c010794d:	e8 0f 9e ff ff       	call   c0101761 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0107952:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107957:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c010795a:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c010795f:	83 f8 02             	cmp    $0x2,%eax
c0107962:	74 19                	je     c010797d <check_content_set+0x87>
c0107964:	68 c9 e6 10 c0       	push   $0xc010e6c9
c0107969:	68 fa e5 10 c0       	push   $0xc010e5fa
c010796e:	68 96 00 00 00       	push   $0x96
c0107973:	68 94 e5 10 c0       	push   $0xc010e594
c0107978:	e8 e4 9d ff ff       	call   c0101761 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c010797d:	b8 10 20 00 00       	mov    $0x2010,%eax
c0107982:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107985:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c010798a:	83 f8 02             	cmp    $0x2,%eax
c010798d:	74 19                	je     c01079a8 <check_content_set+0xb2>
c010798f:	68 c9 e6 10 c0       	push   $0xc010e6c9
c0107994:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107999:	68 98 00 00 00       	push   $0x98
c010799e:	68 94 e5 10 c0       	push   $0xc010e594
c01079a3:	e8 b9 9d ff ff       	call   c0101761 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c01079a8:	b8 00 30 00 00       	mov    $0x3000,%eax
c01079ad:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01079b0:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c01079b5:	83 f8 03             	cmp    $0x3,%eax
c01079b8:	74 19                	je     c01079d3 <check_content_set+0xdd>
c01079ba:	68 d8 e6 10 c0       	push   $0xc010e6d8
c01079bf:	68 fa e5 10 c0       	push   $0xc010e5fa
c01079c4:	68 9a 00 00 00       	push   $0x9a
c01079c9:	68 94 e5 10 c0       	push   $0xc010e594
c01079ce:	e8 8e 9d ff ff       	call   c0101761 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c01079d3:	b8 10 30 00 00       	mov    $0x3010,%eax
c01079d8:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01079db:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c01079e0:	83 f8 03             	cmp    $0x3,%eax
c01079e3:	74 19                	je     c01079fe <check_content_set+0x108>
c01079e5:	68 d8 e6 10 c0       	push   $0xc010e6d8
c01079ea:	68 fa e5 10 c0       	push   $0xc010e5fa
c01079ef:	68 9c 00 00 00       	push   $0x9c
c01079f4:	68 94 e5 10 c0       	push   $0xc010e594
c01079f9:	e8 63 9d ff ff       	call   c0101761 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c01079fe:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107a03:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0107a06:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c0107a0b:	83 f8 04             	cmp    $0x4,%eax
c0107a0e:	74 19                	je     c0107a29 <check_content_set+0x133>
c0107a10:	68 e7 e6 10 c0       	push   $0xc010e6e7
c0107a15:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107a1a:	68 9e 00 00 00       	push   $0x9e
c0107a1f:	68 94 e5 10 c0       	push   $0xc010e594
c0107a24:	e8 38 9d ff ff       	call   c0101761 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0107a29:	b8 10 40 00 00       	mov    $0x4010,%eax
c0107a2e:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0107a31:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c0107a36:	83 f8 04             	cmp    $0x4,%eax
c0107a39:	74 19                	je     c0107a54 <check_content_set+0x15e>
c0107a3b:	68 e7 e6 10 c0       	push   $0xc010e6e7
c0107a40:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107a45:	68 a0 00 00 00       	push   $0xa0
c0107a4a:	68 94 e5 10 c0       	push   $0xc010e594
c0107a4f:	e8 0d 9d ff ff       	call   c0101761 <__panic>
}
c0107a54:	90                   	nop
c0107a55:	c9                   	leave  
c0107a56:	c3                   	ret    

c0107a57 <check_content_access>:

static inline int
check_content_access(void)
{
c0107a57:	55                   	push   %ebp
c0107a58:	89 e5                	mov    %esp,%ebp
c0107a5a:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c0107a5d:	a1 f8 1c 1b c0       	mov    0xc01b1cf8,%eax
c0107a62:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107a65:	ff d0                	call   *%eax
c0107a67:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0107a6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107a6d:	c9                   	leave  
c0107a6e:	c3                   	ret    

c0107a6f <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0107a6f:	55                   	push   %ebp
c0107a70:	89 e5                	mov    %esp,%ebp
c0107a72:	83 ec 68             	sub    $0x68,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c0107a75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107a7c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0107a83:	c7 45 e8 4c 3e 1b c0 	movl   $0xc01b3e4c,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107a8a:	eb 60                	jmp    c0107aec <check_swap+0x7d>
        struct Page *p = le2page(le, page_link);
c0107a8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a8f:	83 e8 10             	sub    $0x10,%eax
c0107a92:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(PageProperty(p));
c0107a95:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107a98:	83 c0 04             	add    $0x4,%eax
c0107a9b:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0107aa2:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107aa5:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0107aa8:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0107aab:	0f a3 10             	bt     %edx,(%eax)
c0107aae:	19 c0                	sbb    %eax,%eax
c0107ab0:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c0107ab3:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c0107ab7:	0f 95 c0             	setne  %al
c0107aba:	0f b6 c0             	movzbl %al,%eax
c0107abd:	85 c0                	test   %eax,%eax
c0107abf:	75 19                	jne    c0107ada <check_swap+0x6b>
c0107ac1:	68 f6 e6 10 c0       	push   $0xc010e6f6
c0107ac6:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107acb:	68 bb 00 00 00       	push   $0xbb
c0107ad0:	68 94 e5 10 c0       	push   $0xc010e594
c0107ad5:	e8 87 9c ff ff       	call   c0101761 <__panic>
        count ++, total += p->property;
c0107ada:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107ade:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107ae1:	8b 50 08             	mov    0x8(%eax),%edx
c0107ae4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ae7:	01 d0                	add    %edx,%eax
c0107ae9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107aec:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107aef:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0107af2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107af5:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0107af8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107afb:	81 7d e8 4c 3e 1b c0 	cmpl   $0xc01b3e4c,-0x18(%ebp)
c0107b02:	75 88                	jne    c0107a8c <check_swap+0x1d>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c0107b04:	e8 91 d0 ff ff       	call   c0104b9a <nr_free_pages>
c0107b09:	89 c2                	mov    %eax,%edx
c0107b0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b0e:	39 c2                	cmp    %eax,%edx
c0107b10:	74 19                	je     c0107b2b <check_swap+0xbc>
c0107b12:	68 06 e7 10 c0       	push   $0xc010e706
c0107b17:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107b1c:	68 be 00 00 00       	push   $0xbe
c0107b21:	68 94 e5 10 c0       	push   $0xc010e594
c0107b26:	e8 36 9c ff ff       	call   c0101761 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0107b2b:	83 ec 04             	sub    $0x4,%esp
c0107b2e:	ff 75 f0             	pushl  -0x10(%ebp)
c0107b31:	ff 75 f4             	pushl  -0xc(%ebp)
c0107b34:	68 20 e7 10 c0       	push   $0xc010e720
c0107b39:	e8 45 87 ff ff       	call   c0100283 <cprintf>
c0107b3e:	83 c4 10             	add    $0x10,%esp
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0107b41:	e8 7d e9 ff ff       	call   c01064c3 <mm_create>
c0107b46:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(mm != NULL);
c0107b49:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0107b4d:	75 19                	jne    c0107b68 <check_swap+0xf9>
c0107b4f:	68 46 e7 10 c0       	push   $0xc010e746
c0107b54:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107b59:	68 c3 00 00 00       	push   $0xc3
c0107b5e:	68 94 e5 10 c0       	push   $0xc010e594
c0107b63:	e8 f9 9b ff ff       	call   c0101761 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0107b68:	a1 68 3d 1b c0       	mov    0xc01b3d68,%eax
c0107b6d:	85 c0                	test   %eax,%eax
c0107b6f:	74 19                	je     c0107b8a <check_swap+0x11b>
c0107b71:	68 51 e7 10 c0       	push   $0xc010e751
c0107b76:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107b7b:	68 c6 00 00 00       	push   $0xc6
c0107b80:	68 94 e5 10 c0       	push   $0xc010e594
c0107b85:	e8 d7 9b ff ff       	call   c0101761 <__panic>

     check_mm_struct = mm;
c0107b8a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107b8d:	a3 68 3d 1b c0       	mov    %eax,0xc01b3d68

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0107b92:	8b 15 64 1c 1b c0    	mov    0xc01b1c64,%edx
c0107b98:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107b9b:	89 50 0c             	mov    %edx,0xc(%eax)
c0107b9e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107ba1:	8b 40 0c             	mov    0xc(%eax),%eax
c0107ba4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(pgdir[0] == 0);
c0107ba7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107baa:	8b 00                	mov    (%eax),%eax
c0107bac:	85 c0                	test   %eax,%eax
c0107bae:	74 19                	je     c0107bc9 <check_swap+0x15a>
c0107bb0:	68 69 e7 10 c0       	push   $0xc010e769
c0107bb5:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107bba:	68 cb 00 00 00       	push   $0xcb
c0107bbf:	68 94 e5 10 c0       	push   $0xc010e594
c0107bc4:	e8 98 9b ff ff       	call   c0101761 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0107bc9:	83 ec 04             	sub    $0x4,%esp
c0107bcc:	6a 03                	push   $0x3
c0107bce:	68 00 60 00 00       	push   $0x6000
c0107bd3:	68 00 10 00 00       	push   $0x1000
c0107bd8:	e8 84 e9 ff ff       	call   c0106561 <vma_create>
c0107bdd:	83 c4 10             	add    $0x10,%esp
c0107be0:	89 45 d0             	mov    %eax,-0x30(%ebp)
     assert(vma != NULL);
c0107be3:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0107be7:	75 19                	jne    c0107c02 <check_swap+0x193>
c0107be9:	68 77 e7 10 c0       	push   $0xc010e777
c0107bee:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107bf3:	68 ce 00 00 00       	push   $0xce
c0107bf8:	68 94 e5 10 c0       	push   $0xc010e594
c0107bfd:	e8 5f 9b ff ff       	call   c0101761 <__panic>

     insert_vma_struct(mm, vma);
c0107c02:	83 ec 08             	sub    $0x8,%esp
c0107c05:	ff 75 d0             	pushl  -0x30(%ebp)
c0107c08:	ff 75 d8             	pushl  -0x28(%ebp)
c0107c0b:	e8 b9 ea ff ff       	call   c01066c9 <insert_vma_struct>
c0107c10:	83 c4 10             	add    $0x10,%esp

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0107c13:	83 ec 0c             	sub    $0xc,%esp
c0107c16:	68 84 e7 10 c0       	push   $0xc010e784
c0107c1b:	e8 63 86 ff ff       	call   c0100283 <cprintf>
c0107c20:	83 c4 10             	add    $0x10,%esp
     pte_t *temp_ptep=NULL;
c0107c23:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0107c2a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107c2d:	8b 40 0c             	mov    0xc(%eax),%eax
c0107c30:	83 ec 04             	sub    $0x4,%esp
c0107c33:	6a 01                	push   $0x1
c0107c35:	68 00 10 00 00       	push   $0x1000
c0107c3a:	50                   	push   %eax
c0107c3b:	e8 b4 d5 ff ff       	call   c01051f4 <get_pte>
c0107c40:	83 c4 10             	add    $0x10,%esp
c0107c43:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(temp_ptep!= NULL);
c0107c46:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107c4a:	75 19                	jne    c0107c65 <check_swap+0x1f6>
c0107c4c:	68 b8 e7 10 c0       	push   $0xc010e7b8
c0107c51:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107c56:	68 d6 00 00 00       	push   $0xd6
c0107c5b:	68 94 e5 10 c0       	push   $0xc010e594
c0107c60:	e8 fc 9a ff ff       	call   c0101761 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0107c65:	83 ec 0c             	sub    $0xc,%esp
c0107c68:	68 cc e7 10 c0       	push   $0xc010e7cc
c0107c6d:	e8 11 86 ff ff       	call   c0100283 <cprintf>
c0107c72:	83 c4 10             	add    $0x10,%esp
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107c75:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107c7c:	e9 90 00 00 00       	jmp    c0107d11 <check_swap+0x2a2>
          check_rp[i] = alloc_page();
c0107c81:	83 ec 0c             	sub    $0xc,%esp
c0107c84:	6a 01                	push   $0x1
c0107c86:	e8 6e ce ff ff       	call   c0104af9 <alloc_pages>
c0107c8b:	83 c4 10             	add    $0x10,%esp
c0107c8e:	89 c2                	mov    %eax,%edx
c0107c90:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107c93:	89 14 85 80 3d 1b c0 	mov    %edx,-0x3fe4c280(,%eax,4)
          assert(check_rp[i] != NULL );
c0107c9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107c9d:	8b 04 85 80 3d 1b c0 	mov    -0x3fe4c280(,%eax,4),%eax
c0107ca4:	85 c0                	test   %eax,%eax
c0107ca6:	75 19                	jne    c0107cc1 <check_swap+0x252>
c0107ca8:	68 f0 e7 10 c0       	push   $0xc010e7f0
c0107cad:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107cb2:	68 db 00 00 00       	push   $0xdb
c0107cb7:	68 94 e5 10 c0       	push   $0xc010e594
c0107cbc:	e8 a0 9a ff ff       	call   c0101761 <__panic>
          assert(!PageProperty(check_rp[i]));
c0107cc1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107cc4:	8b 04 85 80 3d 1b c0 	mov    -0x3fe4c280(,%eax,4),%eax
c0107ccb:	83 c0 04             	add    $0x4,%eax
c0107cce:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0107cd5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107cd8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107cdb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107cde:	0f a3 10             	bt     %edx,(%eax)
c0107ce1:	19 c0                	sbb    %eax,%eax
c0107ce3:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c0107ce6:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c0107cea:	0f 95 c0             	setne  %al
c0107ced:	0f b6 c0             	movzbl %al,%eax
c0107cf0:	85 c0                	test   %eax,%eax
c0107cf2:	74 19                	je     c0107d0d <check_swap+0x29e>
c0107cf4:	68 04 e8 10 c0       	push   $0xc010e804
c0107cf9:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107cfe:	68 dc 00 00 00       	push   $0xdc
c0107d03:	68 94 e5 10 c0       	push   $0xc010e594
c0107d08:	e8 54 9a ff ff       	call   c0101761 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107d0d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107d11:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107d15:	0f 8e 66 ff ff ff    	jle    c0107c81 <check_swap+0x212>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0107d1b:	a1 4c 3e 1b c0       	mov    0xc01b3e4c,%eax
c0107d20:	8b 15 50 3e 1b c0    	mov    0xc01b3e50,%edx
c0107d26:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107d29:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0107d2c:	c7 45 c0 4c 3e 1b c0 	movl   $0xc01b3e4c,-0x40(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107d33:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0107d36:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0107d39:	89 50 04             	mov    %edx,0x4(%eax)
c0107d3c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0107d3f:	8b 50 04             	mov    0x4(%eax),%edx
c0107d42:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0107d45:	89 10                	mov    %edx,(%eax)
c0107d47:	c7 45 c8 4c 3e 1b c0 	movl   $0xc01b3e4c,-0x38(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0107d4e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107d51:	8b 40 04             	mov    0x4(%eax),%eax
c0107d54:	39 45 c8             	cmp    %eax,-0x38(%ebp)
c0107d57:	0f 94 c0             	sete   %al
c0107d5a:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0107d5d:	85 c0                	test   %eax,%eax
c0107d5f:	75 19                	jne    c0107d7a <check_swap+0x30b>
c0107d61:	68 1f e8 10 c0       	push   $0xc010e81f
c0107d66:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107d6b:	68 e0 00 00 00       	push   $0xe0
c0107d70:	68 94 e5 10 c0       	push   $0xc010e594
c0107d75:	e8 e7 99 ff ff       	call   c0101761 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0107d7a:	a1 54 3e 1b c0       	mov    0xc01b3e54,%eax
c0107d7f:	89 45 bc             	mov    %eax,-0x44(%ebp)
     nr_free = 0;
c0107d82:	c7 05 54 3e 1b c0 00 	movl   $0x0,0xc01b3e54
c0107d89:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107d8c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107d93:	eb 1c                	jmp    c0107db1 <check_swap+0x342>
        free_pages(check_rp[i],1);
c0107d95:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107d98:	8b 04 85 80 3d 1b c0 	mov    -0x3fe4c280(,%eax,4),%eax
c0107d9f:	83 ec 08             	sub    $0x8,%esp
c0107da2:	6a 01                	push   $0x1
c0107da4:	50                   	push   %eax
c0107da5:	e8 bb cd ff ff       	call   c0104b65 <free_pages>
c0107daa:	83 c4 10             	add    $0x10,%esp
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107dad:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107db1:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107db5:	7e de                	jle    c0107d95 <check_swap+0x326>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0107db7:	a1 54 3e 1b c0       	mov    0xc01b3e54,%eax
c0107dbc:	83 f8 04             	cmp    $0x4,%eax
c0107dbf:	74 19                	je     c0107dda <check_swap+0x36b>
c0107dc1:	68 38 e8 10 c0       	push   $0xc010e838
c0107dc6:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107dcb:	68 e9 00 00 00       	push   $0xe9
c0107dd0:	68 94 e5 10 c0       	push   $0xc010e594
c0107dd5:	e8 87 99 ff ff       	call   c0101761 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0107dda:	83 ec 0c             	sub    $0xc,%esp
c0107ddd:	68 5c e8 10 c0       	push   $0xc010e85c
c0107de2:	e8 9c 84 ff ff       	call   c0100283 <cprintf>
c0107de7:	83 c4 10             	add    $0x10,%esp
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0107dea:	c7 05 ec 1c 1b c0 00 	movl   $0x0,0xc01b1cec
c0107df1:	00 00 00 
     
     check_content_set();
c0107df4:	e8 fd fa ff ff       	call   c01078f6 <check_content_set>
     assert( nr_free == 0);         
c0107df9:	a1 54 3e 1b c0       	mov    0xc01b3e54,%eax
c0107dfe:	85 c0                	test   %eax,%eax
c0107e00:	74 19                	je     c0107e1b <check_swap+0x3ac>
c0107e02:	68 83 e8 10 c0       	push   $0xc010e883
c0107e07:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107e0c:	68 f2 00 00 00       	push   $0xf2
c0107e11:	68 94 e5 10 c0       	push   $0xc010e594
c0107e16:	e8 46 99 ff ff       	call   c0101761 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107e1b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107e22:	eb 26                	jmp    c0107e4a <check_swap+0x3db>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0107e24:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107e27:	c7 04 85 a0 3d 1b c0 	movl   $0xffffffff,-0x3fe4c260(,%eax,4)
c0107e2e:	ff ff ff ff 
c0107e32:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107e35:	8b 14 85 a0 3d 1b c0 	mov    -0x3fe4c260(,%eax,4),%edx
c0107e3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107e3f:	89 14 85 e0 3d 1b c0 	mov    %edx,-0x3fe4c220(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107e46:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107e4a:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0107e4e:	7e d4                	jle    c0107e24 <check_swap+0x3b5>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107e50:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107e57:	e9 cc 00 00 00       	jmp    c0107f28 <check_swap+0x4b9>
         check_ptep[i]=0;
c0107e5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107e5f:	c7 04 85 34 3e 1b c0 	movl   $0x0,-0x3fe4c1cc(,%eax,4)
c0107e66:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0107e6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107e6d:	83 c0 01             	add    $0x1,%eax
c0107e70:	c1 e0 0c             	shl    $0xc,%eax
c0107e73:	83 ec 04             	sub    $0x4,%esp
c0107e76:	6a 00                	push   $0x0
c0107e78:	50                   	push   %eax
c0107e79:	ff 75 d4             	pushl  -0x2c(%ebp)
c0107e7c:	e8 73 d3 ff ff       	call   c01051f4 <get_pte>
c0107e81:	83 c4 10             	add    $0x10,%esp
c0107e84:	89 c2                	mov    %eax,%edx
c0107e86:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107e89:	89 14 85 34 3e 1b c0 	mov    %edx,-0x3fe4c1cc(,%eax,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0107e90:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107e93:	8b 04 85 34 3e 1b c0 	mov    -0x3fe4c1cc(,%eax,4),%eax
c0107e9a:	85 c0                	test   %eax,%eax
c0107e9c:	75 19                	jne    c0107eb7 <check_swap+0x448>
c0107e9e:	68 90 e8 10 c0       	push   $0xc010e890
c0107ea3:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107ea8:	68 fa 00 00 00       	push   $0xfa
c0107ead:	68 94 e5 10 c0       	push   $0xc010e594
c0107eb2:	e8 aa 98 ff ff       	call   c0101761 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0107eb7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107eba:	8b 04 85 34 3e 1b c0 	mov    -0x3fe4c1cc(,%eax,4),%eax
c0107ec1:	8b 00                	mov    (%eax),%eax
c0107ec3:	83 ec 0c             	sub    $0xc,%esp
c0107ec6:	50                   	push   %eax
c0107ec7:	e8 d8 f6 ff ff       	call   c01075a4 <pte2page>
c0107ecc:	83 c4 10             	add    $0x10,%esp
c0107ecf:	89 c2                	mov    %eax,%edx
c0107ed1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107ed4:	8b 04 85 80 3d 1b c0 	mov    -0x3fe4c280(,%eax,4),%eax
c0107edb:	39 c2                	cmp    %eax,%edx
c0107edd:	74 19                	je     c0107ef8 <check_swap+0x489>
c0107edf:	68 a8 e8 10 c0       	push   $0xc010e8a8
c0107ee4:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107ee9:	68 fb 00 00 00       	push   $0xfb
c0107eee:	68 94 e5 10 c0       	push   $0xc010e594
c0107ef3:	e8 69 98 ff ff       	call   c0101761 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0107ef8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107efb:	8b 04 85 34 3e 1b c0 	mov    -0x3fe4c1cc(,%eax,4),%eax
c0107f02:	8b 00                	mov    (%eax),%eax
c0107f04:	83 e0 01             	and    $0x1,%eax
c0107f07:	85 c0                	test   %eax,%eax
c0107f09:	75 19                	jne    c0107f24 <check_swap+0x4b5>
c0107f0b:	68 d0 e8 10 c0       	push   $0xc010e8d0
c0107f10:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107f15:	68 fc 00 00 00       	push   $0xfc
c0107f1a:	68 94 e5 10 c0       	push   $0xc010e594
c0107f1f:	e8 3d 98 ff ff       	call   c0101761 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107f24:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107f28:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107f2c:	0f 8e 2a ff ff ff    	jle    c0107e5c <check_swap+0x3ed>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c0107f32:	83 ec 0c             	sub    $0xc,%esp
c0107f35:	68 ec e8 10 c0       	push   $0xc010e8ec
c0107f3a:	e8 44 83 ff ff       	call   c0100283 <cprintf>
c0107f3f:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0107f42:	e8 10 fb ff ff       	call   c0107a57 <check_content_access>
c0107f47:	89 45 b8             	mov    %eax,-0x48(%ebp)
     assert(ret==0);
c0107f4a:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0107f4e:	74 19                	je     c0107f69 <check_swap+0x4fa>
c0107f50:	68 12 e9 10 c0       	push   $0xc010e912
c0107f55:	68 fa e5 10 c0       	push   $0xc010e5fa
c0107f5a:	68 01 01 00 00       	push   $0x101
c0107f5f:	68 94 e5 10 c0       	push   $0xc010e594
c0107f64:	e8 f8 97 ff ff       	call   c0101761 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107f69:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107f70:	eb 1c                	jmp    c0107f8e <check_swap+0x51f>
         free_pages(check_rp[i],1);
c0107f72:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107f75:	8b 04 85 80 3d 1b c0 	mov    -0x3fe4c280(,%eax,4),%eax
c0107f7c:	83 ec 08             	sub    $0x8,%esp
c0107f7f:	6a 01                	push   $0x1
c0107f81:	50                   	push   %eax
c0107f82:	e8 de cb ff ff       	call   c0104b65 <free_pages>
c0107f87:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107f8a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107f8e:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107f92:	7e de                	jle    c0107f72 <check_swap+0x503>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0107f94:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107f97:	8b 00                	mov    (%eax),%eax
c0107f99:	83 ec 0c             	sub    $0xc,%esp
c0107f9c:	50                   	push   %eax
c0107f9d:	e8 3c f6 ff ff       	call   c01075de <pde2page>
c0107fa2:	83 c4 10             	add    $0x10,%esp
c0107fa5:	83 ec 08             	sub    $0x8,%esp
c0107fa8:	6a 01                	push   $0x1
c0107faa:	50                   	push   %eax
c0107fab:	e8 b5 cb ff ff       	call   c0104b65 <free_pages>
c0107fb0:	83 c4 10             	add    $0x10,%esp
     pgdir[0] = 0;
c0107fb3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107fb6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0107fbc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107fbf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0107fc6:	83 ec 0c             	sub    $0xc,%esp
c0107fc9:	ff 75 d8             	pushl  -0x28(%ebp)
c0107fcc:	e8 1c e8 ff ff       	call   c01067ed <mm_destroy>
c0107fd1:	83 c4 10             	add    $0x10,%esp
     check_mm_struct = NULL;
c0107fd4:	c7 05 68 3d 1b c0 00 	movl   $0x0,0xc01b3d68
c0107fdb:	00 00 00 
     
     nr_free = nr_free_store;
c0107fde:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0107fe1:	a3 54 3e 1b c0       	mov    %eax,0xc01b3e54
     free_list = free_list_store;
c0107fe6:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107fe9:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0107fec:	a3 4c 3e 1b c0       	mov    %eax,0xc01b3e4c
c0107ff1:	89 15 50 3e 1b c0    	mov    %edx,0xc01b3e50

     
     le = &free_list;
c0107ff7:	c7 45 e8 4c 3e 1b c0 	movl   $0xc01b3e4c,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107ffe:	eb 1d                	jmp    c010801d <check_swap+0x5ae>
         struct Page *p = le2page(le, page_link);
c0108000:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108003:	83 e8 10             	sub    $0x10,%eax
c0108006:	89 45 b4             	mov    %eax,-0x4c(%ebp)
         count --, total -= p->property;
c0108009:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010800d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108010:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0108013:	8b 40 08             	mov    0x8(%eax),%eax
c0108016:	29 c2                	sub    %eax,%edx
c0108018:	89 d0                	mov    %edx,%eax
c010801a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010801d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108020:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108023:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0108026:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0108029:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010802c:	81 7d e8 4c 3e 1b c0 	cmpl   $0xc01b3e4c,-0x18(%ebp)
c0108033:	75 cb                	jne    c0108000 <check_swap+0x591>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0108035:	83 ec 04             	sub    $0x4,%esp
c0108038:	ff 75 f0             	pushl  -0x10(%ebp)
c010803b:	ff 75 f4             	pushl  -0xc(%ebp)
c010803e:	68 19 e9 10 c0       	push   $0xc010e919
c0108043:	e8 3b 82 ff ff       	call   c0100283 <cprintf>
c0108048:	83 c4 10             	add    $0x10,%esp
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c010804b:	83 ec 0c             	sub    $0xc,%esp
c010804e:	68 33 e9 10 c0       	push   $0xc010e933
c0108053:	e8 2b 82 ff ff       	call   c0100283 <cprintf>
c0108058:	83 c4 10             	add    $0x10,%esp
}
c010805b:	90                   	nop
c010805c:	c9                   	leave  
c010805d:	c3                   	ret    

c010805e <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010805e:	55                   	push   %ebp
c010805f:	89 e5                	mov    %esp,%ebp
c0108061:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0108064:	9c                   	pushf  
c0108065:	58                   	pop    %eax
c0108066:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0108069:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010806c:	25 00 02 00 00       	and    $0x200,%eax
c0108071:	85 c0                	test   %eax,%eax
c0108073:	74 0c                	je     c0108081 <__intr_save+0x23>
        intr_disable();
c0108075:	e8 8a b4 ff ff       	call   c0103504 <intr_disable>
        return 1;
c010807a:	b8 01 00 00 00       	mov    $0x1,%eax
c010807f:	eb 05                	jmp    c0108086 <__intr_save+0x28>
    }
    return 0;
c0108081:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108086:	c9                   	leave  
c0108087:	c3                   	ret    

c0108088 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0108088:	55                   	push   %ebp
c0108089:	89 e5                	mov    %esp,%ebp
c010808b:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010808e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108092:	74 05                	je     c0108099 <__intr_restore+0x11>
        intr_enable();
c0108094:	e8 64 b4 ff ff       	call   c01034fd <intr_enable>
    }
}
c0108099:	90                   	nop
c010809a:	c9                   	leave  
c010809b:	c3                   	ret    

c010809c <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010809c:	55                   	push   %ebp
c010809d:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010809f:	8b 45 08             	mov    0x8(%ebp),%eax
c01080a2:	8b 15 64 3d 1b c0    	mov    0xc01b3d64,%edx
c01080a8:	29 d0                	sub    %edx,%eax
c01080aa:	c1 f8 02             	sar    $0x2,%eax
c01080ad:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c01080b3:	5d                   	pop    %ebp
c01080b4:	c3                   	ret    

c01080b5 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01080b5:	55                   	push   %ebp
c01080b6:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c01080b8:	ff 75 08             	pushl  0x8(%ebp)
c01080bb:	e8 dc ff ff ff       	call   c010809c <page2ppn>
c01080c0:	83 c4 04             	add    $0x4,%esp
c01080c3:	c1 e0 0c             	shl    $0xc,%eax
}
c01080c6:	c9                   	leave  
c01080c7:	c3                   	ret    

c01080c8 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c01080c8:	55                   	push   %ebp
c01080c9:	89 e5                	mov    %esp,%ebp
c01080cb:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c01080ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01080d1:	c1 e8 0c             	shr    $0xc,%eax
c01080d4:	89 c2                	mov    %eax,%edx
c01080d6:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c01080db:	39 c2                	cmp    %eax,%edx
c01080dd:	72 14                	jb     c01080f3 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c01080df:	83 ec 04             	sub    $0x4,%esp
c01080e2:	68 4c e9 10 c0       	push   $0xc010e94c
c01080e7:	6a 5e                	push   $0x5e
c01080e9:	68 6b e9 10 c0       	push   $0xc010e96b
c01080ee:	e8 6e 96 ff ff       	call   c0101761 <__panic>
    }
    return &pages[PPN(pa)];
c01080f3:	8b 0d 64 3d 1b c0    	mov    0xc01b3d64,%ecx
c01080f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01080fc:	c1 e8 0c             	shr    $0xc,%eax
c01080ff:	89 c2                	mov    %eax,%edx
c0108101:	89 d0                	mov    %edx,%eax
c0108103:	c1 e0 03             	shl    $0x3,%eax
c0108106:	01 d0                	add    %edx,%eax
c0108108:	c1 e0 02             	shl    $0x2,%eax
c010810b:	01 c8                	add    %ecx,%eax
}
c010810d:	c9                   	leave  
c010810e:	c3                   	ret    

c010810f <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010810f:	55                   	push   %ebp
c0108110:	89 e5                	mov    %esp,%ebp
c0108112:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0108115:	ff 75 08             	pushl  0x8(%ebp)
c0108118:	e8 98 ff ff ff       	call   c01080b5 <page2pa>
c010811d:	83 c4 04             	add    $0x4,%esp
c0108120:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108123:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108126:	c1 e8 0c             	shr    $0xc,%eax
c0108129:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010812c:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c0108131:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0108134:	72 14                	jb     c010814a <page2kva+0x3b>
c0108136:	ff 75 f4             	pushl  -0xc(%ebp)
c0108139:	68 7c e9 10 c0       	push   $0xc010e97c
c010813e:	6a 65                	push   $0x65
c0108140:	68 6b e9 10 c0       	push   $0xc010e96b
c0108145:	e8 17 96 ff ff       	call   c0101761 <__panic>
c010814a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010814d:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0108152:	c9                   	leave  
c0108153:	c3                   	ret    

c0108154 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0108154:	55                   	push   %ebp
c0108155:	89 e5                	mov    %esp,%ebp
c0108157:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c010815a:	8b 45 08             	mov    0x8(%ebp),%eax
c010815d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108160:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0108167:	77 14                	ja     c010817d <kva2page+0x29>
c0108169:	ff 75 f4             	pushl  -0xc(%ebp)
c010816c:	68 a0 e9 10 c0       	push   $0xc010e9a0
c0108171:	6a 6a                	push   $0x6a
c0108173:	68 6b e9 10 c0       	push   $0xc010e96b
c0108178:	e8 e4 95 ff ff       	call   c0101761 <__panic>
c010817d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108180:	05 00 00 00 40       	add    $0x40000000,%eax
c0108185:	83 ec 0c             	sub    $0xc,%esp
c0108188:	50                   	push   %eax
c0108189:	e8 3a ff ff ff       	call   c01080c8 <pa2page>
c010818e:	83 c4 10             	add    $0x10,%esp
}
c0108191:	c9                   	leave  
c0108192:	c3                   	ret    

c0108193 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0108193:	55                   	push   %ebp
c0108194:	89 e5                	mov    %esp,%ebp
c0108196:	83 ec 18             	sub    $0x18,%esp
  struct Page * page = alloc_pages(1 << order);
c0108199:	8b 45 0c             	mov    0xc(%ebp),%eax
c010819c:	ba 01 00 00 00       	mov    $0x1,%edx
c01081a1:	89 c1                	mov    %eax,%ecx
c01081a3:	d3 e2                	shl    %cl,%edx
c01081a5:	89 d0                	mov    %edx,%eax
c01081a7:	83 ec 0c             	sub    $0xc,%esp
c01081aa:	50                   	push   %eax
c01081ab:	e8 49 c9 ff ff       	call   c0104af9 <alloc_pages>
c01081b0:	83 c4 10             	add    $0x10,%esp
c01081b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c01081b6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01081ba:	75 07                	jne    c01081c3 <__slob_get_free_pages+0x30>
    return NULL;
c01081bc:	b8 00 00 00 00       	mov    $0x0,%eax
c01081c1:	eb 0e                	jmp    c01081d1 <__slob_get_free_pages+0x3e>
  return page2kva(page);
c01081c3:	83 ec 0c             	sub    $0xc,%esp
c01081c6:	ff 75 f4             	pushl  -0xc(%ebp)
c01081c9:	e8 41 ff ff ff       	call   c010810f <page2kva>
c01081ce:	83 c4 10             	add    $0x10,%esp
}
c01081d1:	c9                   	leave  
c01081d2:	c3                   	ret    

c01081d3 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c01081d3:	55                   	push   %ebp
c01081d4:	89 e5                	mov    %esp,%ebp
c01081d6:	53                   	push   %ebx
c01081d7:	83 ec 04             	sub    $0x4,%esp
  free_pages(kva2page(kva), 1 << order);
c01081da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081dd:	ba 01 00 00 00       	mov    $0x1,%edx
c01081e2:	89 c1                	mov    %eax,%ecx
c01081e4:	d3 e2                	shl    %cl,%edx
c01081e6:	89 d0                	mov    %edx,%eax
c01081e8:	89 c3                	mov    %eax,%ebx
c01081ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01081ed:	83 ec 0c             	sub    $0xc,%esp
c01081f0:	50                   	push   %eax
c01081f1:	e8 5e ff ff ff       	call   c0108154 <kva2page>
c01081f6:	83 c4 10             	add    $0x10,%esp
c01081f9:	83 ec 08             	sub    $0x8,%esp
c01081fc:	53                   	push   %ebx
c01081fd:	50                   	push   %eax
c01081fe:	e8 62 c9 ff ff       	call   c0104b65 <free_pages>
c0108203:	83 c4 10             	add    $0x10,%esp
}
c0108206:	90                   	nop
c0108207:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010820a:	c9                   	leave  
c010820b:	c3                   	ret    

c010820c <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c010820c:	55                   	push   %ebp
c010820d:	89 e5                	mov    %esp,%ebp
c010820f:	83 ec 28             	sub    $0x28,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0108212:	8b 45 08             	mov    0x8(%ebp),%eax
c0108215:	83 c0 08             	add    $0x8,%eax
c0108218:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010821d:	76 16                	jbe    c0108235 <slob_alloc+0x29>
c010821f:	68 c4 e9 10 c0       	push   $0xc010e9c4
c0108224:	68 e3 e9 10 c0       	push   $0xc010e9e3
c0108229:	6a 64                	push   $0x64
c010822b:	68 f8 e9 10 c0       	push   $0xc010e9f8
c0108230:	e8 2c 95 ff ff       	call   c0101761 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0108235:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c010823c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0108243:	8b 45 08             	mov    0x8(%ebp),%eax
c0108246:	83 c0 07             	add    $0x7,%eax
c0108249:	c1 e8 03             	shr    $0x3,%eax
c010824c:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c010824f:	e8 0a fe ff ff       	call   c010805e <__intr_save>
c0108254:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0108257:	a1 40 fa 12 c0       	mov    0xc012fa40,%eax
c010825c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c010825f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108262:	8b 40 04             	mov    0x4(%eax),%eax
c0108265:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0108268:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010826c:	74 25                	je     c0108293 <slob_alloc+0x87>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c010826e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108271:	8b 45 10             	mov    0x10(%ebp),%eax
c0108274:	01 d0                	add    %edx,%eax
c0108276:	8d 50 ff             	lea    -0x1(%eax),%edx
c0108279:	8b 45 10             	mov    0x10(%ebp),%eax
c010827c:	f7 d8                	neg    %eax
c010827e:	21 d0                	and    %edx,%eax
c0108280:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0108283:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108286:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108289:	29 c2                	sub    %eax,%edx
c010828b:	89 d0                	mov    %edx,%eax
c010828d:	c1 f8 03             	sar    $0x3,%eax
c0108290:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0108293:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108296:	8b 00                	mov    (%eax),%eax
c0108298:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010829b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010829e:	01 ca                	add    %ecx,%edx
c01082a0:	39 d0                	cmp    %edx,%eax
c01082a2:	0f 8c b1 00 00 00    	jl     c0108359 <slob_alloc+0x14d>
			if (delta) { /* need to fragment head to align? */
c01082a8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01082ac:	74 38                	je     c01082e6 <slob_alloc+0xda>
				aligned->units = cur->units - delta;
c01082ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082b1:	8b 00                	mov    (%eax),%eax
c01082b3:	2b 45 e8             	sub    -0x18(%ebp),%eax
c01082b6:	89 c2                	mov    %eax,%edx
c01082b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01082bb:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c01082bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082c0:	8b 50 04             	mov    0x4(%eax),%edx
c01082c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01082c6:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c01082c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082cc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01082cf:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c01082d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082d5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01082d8:	89 10                	mov    %edx,(%eax)
				prev = cur;
c01082da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c01082e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01082e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c01082e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082e9:	8b 00                	mov    (%eax),%eax
c01082eb:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01082ee:	75 0e                	jne    c01082fe <slob_alloc+0xf2>
				prev->next = cur->next; /* unlink */
c01082f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082f3:	8b 50 04             	mov    0x4(%eax),%edx
c01082f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082f9:	89 50 04             	mov    %edx,0x4(%eax)
c01082fc:	eb 3c                	jmp    c010833a <slob_alloc+0x12e>
			else { /* fragment */
				prev->next = cur + units;
c01082fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108301:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0108308:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010830b:	01 c2                	add    %eax,%edx
c010830d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108310:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0108313:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108316:	8b 40 04             	mov    0x4(%eax),%eax
c0108319:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010831c:	8b 12                	mov    (%edx),%edx
c010831e:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0108321:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0108323:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108326:	8b 40 04             	mov    0x4(%eax),%eax
c0108329:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010832c:	8b 52 04             	mov    0x4(%edx),%edx
c010832f:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0108332:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108335:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108338:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c010833a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010833d:	a3 40 fa 12 c0       	mov    %eax,0xc012fa40
			spin_unlock_irqrestore(&slob_lock, flags);
c0108342:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108345:	83 ec 0c             	sub    $0xc,%esp
c0108348:	50                   	push   %eax
c0108349:	e8 3a fd ff ff       	call   c0108088 <__intr_restore>
c010834e:	83 c4 10             	add    $0x10,%esp
			return cur;
c0108351:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108354:	e9 80 00 00 00       	jmp    c01083d9 <slob_alloc+0x1cd>
		}
		if (cur == slobfree) {
c0108359:	a1 40 fa 12 c0       	mov    0xc012fa40,%eax
c010835e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0108361:	75 62                	jne    c01083c5 <slob_alloc+0x1b9>
			spin_unlock_irqrestore(&slob_lock, flags);
c0108363:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108366:	83 ec 0c             	sub    $0xc,%esp
c0108369:	50                   	push   %eax
c010836a:	e8 19 fd ff ff       	call   c0108088 <__intr_restore>
c010836f:	83 c4 10             	add    $0x10,%esp

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0108372:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0108379:	75 07                	jne    c0108382 <slob_alloc+0x176>
				return 0;
c010837b:	b8 00 00 00 00       	mov    $0x0,%eax
c0108380:	eb 57                	jmp    c01083d9 <slob_alloc+0x1cd>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0108382:	83 ec 08             	sub    $0x8,%esp
c0108385:	6a 00                	push   $0x0
c0108387:	ff 75 0c             	pushl  0xc(%ebp)
c010838a:	e8 04 fe ff ff       	call   c0108193 <__slob_get_free_pages>
c010838f:	83 c4 10             	add    $0x10,%esp
c0108392:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0108395:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108399:	75 07                	jne    c01083a2 <slob_alloc+0x196>
				return 0;
c010839b:	b8 00 00 00 00       	mov    $0x0,%eax
c01083a0:	eb 37                	jmp    c01083d9 <slob_alloc+0x1cd>

			slob_free(cur, PAGE_SIZE);
c01083a2:	83 ec 08             	sub    $0x8,%esp
c01083a5:	68 00 10 00 00       	push   $0x1000
c01083aa:	ff 75 f0             	pushl  -0x10(%ebp)
c01083ad:	e8 29 00 00 00       	call   c01083db <slob_free>
c01083b2:	83 c4 10             	add    $0x10,%esp
			spin_lock_irqsave(&slob_lock, flags);
c01083b5:	e8 a4 fc ff ff       	call   c010805e <__intr_save>
c01083ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c01083bd:	a1 40 fa 12 c0       	mov    0xc012fa40,%eax
c01083c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01083c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01083c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01083cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01083ce:	8b 40 04             	mov    0x4(%eax),%eax
c01083d1:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c01083d4:	e9 8f fe ff ff       	jmp    c0108268 <slob_alloc+0x5c>
}
c01083d9:	c9                   	leave  
c01083da:	c3                   	ret    

c01083db <slob_free>:

static void slob_free(void *block, int size)
{
c01083db:	55                   	push   %ebp
c01083dc:	89 e5                	mov    %esp,%ebp
c01083de:	83 ec 18             	sub    $0x18,%esp
	slob_t *cur, *b = (slob_t *)block;
c01083e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01083e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c01083e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01083eb:	0f 84 05 01 00 00    	je     c01084f6 <slob_free+0x11b>
		return;

	if (size)
c01083f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01083f5:	74 10                	je     c0108407 <slob_free+0x2c>
		b->units = SLOB_UNITS(size);
c01083f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01083fa:	83 c0 07             	add    $0x7,%eax
c01083fd:	c1 e8 03             	shr    $0x3,%eax
c0108400:	89 c2                	mov    %eax,%edx
c0108402:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108405:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0108407:	e8 52 fc ff ff       	call   c010805e <__intr_save>
c010840c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c010840f:	a1 40 fa 12 c0       	mov    0xc012fa40,%eax
c0108414:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108417:	eb 27                	jmp    c0108440 <slob_free+0x65>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0108419:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010841c:	8b 40 04             	mov    0x4(%eax),%eax
c010841f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108422:	77 13                	ja     c0108437 <slob_free+0x5c>
c0108424:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108427:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010842a:	77 27                	ja     c0108453 <slob_free+0x78>
c010842c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010842f:	8b 40 04             	mov    0x4(%eax),%eax
c0108432:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108435:	77 1c                	ja     c0108453 <slob_free+0x78>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0108437:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010843a:	8b 40 04             	mov    0x4(%eax),%eax
c010843d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108440:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108443:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108446:	76 d1                	jbe    c0108419 <slob_free+0x3e>
c0108448:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010844b:	8b 40 04             	mov    0x4(%eax),%eax
c010844e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108451:	76 c6                	jbe    c0108419 <slob_free+0x3e>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0108453:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108456:	8b 00                	mov    (%eax),%eax
c0108458:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010845f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108462:	01 c2                	add    %eax,%edx
c0108464:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108467:	8b 40 04             	mov    0x4(%eax),%eax
c010846a:	39 c2                	cmp    %eax,%edx
c010846c:	75 25                	jne    c0108493 <slob_free+0xb8>
		b->units += cur->next->units;
c010846e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108471:	8b 10                	mov    (%eax),%edx
c0108473:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108476:	8b 40 04             	mov    0x4(%eax),%eax
c0108479:	8b 00                	mov    (%eax),%eax
c010847b:	01 c2                	add    %eax,%edx
c010847d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108480:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0108482:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108485:	8b 40 04             	mov    0x4(%eax),%eax
c0108488:	8b 50 04             	mov    0x4(%eax),%edx
c010848b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010848e:	89 50 04             	mov    %edx,0x4(%eax)
c0108491:	eb 0c                	jmp    c010849f <slob_free+0xc4>
	} else
		b->next = cur->next;
c0108493:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108496:	8b 50 04             	mov    0x4(%eax),%edx
c0108499:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010849c:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c010849f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084a2:	8b 00                	mov    (%eax),%eax
c01084a4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01084ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084ae:	01 d0                	add    %edx,%eax
c01084b0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01084b3:	75 1f                	jne    c01084d4 <slob_free+0xf9>
		cur->units += b->units;
c01084b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084b8:	8b 10                	mov    (%eax),%edx
c01084ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084bd:	8b 00                	mov    (%eax),%eax
c01084bf:	01 c2                	add    %eax,%edx
c01084c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084c4:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c01084c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084c9:	8b 50 04             	mov    0x4(%eax),%edx
c01084cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084cf:	89 50 04             	mov    %edx,0x4(%eax)
c01084d2:	eb 09                	jmp    c01084dd <slob_free+0x102>
	} else
		cur->next = b;
c01084d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084d7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01084da:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c01084dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084e0:	a3 40 fa 12 c0       	mov    %eax,0xc012fa40

	spin_unlock_irqrestore(&slob_lock, flags);
c01084e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084e8:	83 ec 0c             	sub    $0xc,%esp
c01084eb:	50                   	push   %eax
c01084ec:	e8 97 fb ff ff       	call   c0108088 <__intr_restore>
c01084f1:	83 c4 10             	add    $0x10,%esp
c01084f4:	eb 01                	jmp    c01084f7 <slob_free+0x11c>
{
	slob_t *cur, *b = (slob_t *)block;
	unsigned long flags;

	if (!block)
		return;
c01084f6:	90                   	nop
		cur->next = b;

	slobfree = cur;

	spin_unlock_irqrestore(&slob_lock, flags);
}
c01084f7:	c9                   	leave  
c01084f8:	c3                   	ret    

c01084f9 <check_slab>:



void check_slab(void) {
c01084f9:	55                   	push   %ebp
c01084fa:	89 e5                	mov    %esp,%ebp
c01084fc:	83 ec 08             	sub    $0x8,%esp
  cprintf("check_slab() success\n");
c01084ff:	83 ec 0c             	sub    $0xc,%esp
c0108502:	68 0a ea 10 c0       	push   $0xc010ea0a
c0108507:	e8 77 7d ff ff       	call   c0100283 <cprintf>
c010850c:	83 c4 10             	add    $0x10,%esp
}
c010850f:	90                   	nop
c0108510:	c9                   	leave  
c0108511:	c3                   	ret    

c0108512 <slab_init>:

void
slab_init(void) {
c0108512:	55                   	push   %ebp
c0108513:	89 e5                	mov    %esp,%ebp
c0108515:	83 ec 08             	sub    $0x8,%esp
  cprintf("use SLOB allocator\n");
c0108518:	83 ec 0c             	sub    $0xc,%esp
c010851b:	68 20 ea 10 c0       	push   $0xc010ea20
c0108520:	e8 5e 7d ff ff       	call   c0100283 <cprintf>
c0108525:	83 c4 10             	add    $0x10,%esp
  check_slab();
c0108528:	e8 cc ff ff ff       	call   c01084f9 <check_slab>
}
c010852d:	90                   	nop
c010852e:	c9                   	leave  
c010852f:	c3                   	ret    

c0108530 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0108530:	55                   	push   %ebp
c0108531:	89 e5                	mov    %esp,%ebp
c0108533:	83 ec 08             	sub    $0x8,%esp
    slab_init();
c0108536:	e8 d7 ff ff ff       	call   c0108512 <slab_init>
    cprintf("kmalloc_init() succeeded!\n");
c010853b:	83 ec 0c             	sub    $0xc,%esp
c010853e:	68 34 ea 10 c0       	push   $0xc010ea34
c0108543:	e8 3b 7d ff ff       	call   c0100283 <cprintf>
c0108548:	83 c4 10             	add    $0x10,%esp
}
c010854b:	90                   	nop
c010854c:	c9                   	leave  
c010854d:	c3                   	ret    

c010854e <slab_allocated>:

size_t
slab_allocated(void) {
c010854e:	55                   	push   %ebp
c010854f:	89 e5                	mov    %esp,%ebp
  return 0;
c0108551:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108556:	5d                   	pop    %ebp
c0108557:	c3                   	ret    

c0108558 <kallocated>:

size_t
kallocated(void) {
c0108558:	55                   	push   %ebp
c0108559:	89 e5                	mov    %esp,%ebp
   return slab_allocated();
c010855b:	e8 ee ff ff ff       	call   c010854e <slab_allocated>
}
c0108560:	5d                   	pop    %ebp
c0108561:	c3                   	ret    

c0108562 <find_order>:

static int find_order(int size)
{
c0108562:	55                   	push   %ebp
c0108563:	89 e5                	mov    %esp,%ebp
c0108565:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0108568:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c010856f:	eb 07                	jmp    c0108578 <find_order+0x16>
		order++;
c0108571:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0108575:	d1 7d 08             	sarl   0x8(%ebp)
c0108578:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c010857f:	7f f0                	jg     c0108571 <find_order+0xf>
		order++;
	return order;
c0108581:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0108584:	c9                   	leave  
c0108585:	c3                   	ret    

c0108586 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0108586:	55                   	push   %ebp
c0108587:	89 e5                	mov    %esp,%ebp
c0108589:	83 ec 18             	sub    $0x18,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c010858c:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0108593:	77 35                	ja     c01085ca <__kmalloc+0x44>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0108595:	8b 45 08             	mov    0x8(%ebp),%eax
c0108598:	83 c0 08             	add    $0x8,%eax
c010859b:	83 ec 04             	sub    $0x4,%esp
c010859e:	6a 00                	push   $0x0
c01085a0:	ff 75 0c             	pushl  0xc(%ebp)
c01085a3:	50                   	push   %eax
c01085a4:	e8 63 fc ff ff       	call   c010820c <slob_alloc>
c01085a9:	83 c4 10             	add    $0x10,%esp
c01085ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c01085af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01085b3:	74 0b                	je     c01085c0 <__kmalloc+0x3a>
c01085b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085b8:	83 c0 08             	add    $0x8,%eax
c01085bb:	e9 b3 00 00 00       	jmp    c0108673 <__kmalloc+0xed>
c01085c0:	b8 00 00 00 00       	mov    $0x0,%eax
c01085c5:	e9 a9 00 00 00       	jmp    c0108673 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c01085ca:	83 ec 04             	sub    $0x4,%esp
c01085cd:	6a 00                	push   $0x0
c01085cf:	ff 75 0c             	pushl  0xc(%ebp)
c01085d2:	6a 0c                	push   $0xc
c01085d4:	e8 33 fc ff ff       	call   c010820c <slob_alloc>
c01085d9:	83 c4 10             	add    $0x10,%esp
c01085dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c01085df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01085e3:	75 0a                	jne    c01085ef <__kmalloc+0x69>
		return 0;
c01085e5:	b8 00 00 00 00       	mov    $0x0,%eax
c01085ea:	e9 84 00 00 00       	jmp    c0108673 <__kmalloc+0xed>

	bb->order = find_order(size);
c01085ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01085f2:	83 ec 0c             	sub    $0xc,%esp
c01085f5:	50                   	push   %eax
c01085f6:	e8 67 ff ff ff       	call   c0108562 <find_order>
c01085fb:	83 c4 10             	add    $0x10,%esp
c01085fe:	89 c2                	mov    %eax,%edx
c0108600:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108603:	89 10                	mov    %edx,(%eax)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0108605:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108608:	8b 00                	mov    (%eax),%eax
c010860a:	83 ec 08             	sub    $0x8,%esp
c010860d:	50                   	push   %eax
c010860e:	ff 75 0c             	pushl  0xc(%ebp)
c0108611:	e8 7d fb ff ff       	call   c0108193 <__slob_get_free_pages>
c0108616:	83 c4 10             	add    $0x10,%esp
c0108619:	89 c2                	mov    %eax,%edx
c010861b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010861e:	89 50 04             	mov    %edx,0x4(%eax)

	if (bb->pages) {
c0108621:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108624:	8b 40 04             	mov    0x4(%eax),%eax
c0108627:	85 c0                	test   %eax,%eax
c0108629:	74 33                	je     c010865e <__kmalloc+0xd8>
		spin_lock_irqsave(&block_lock, flags);
c010862b:	e8 2e fa ff ff       	call   c010805e <__intr_save>
c0108630:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0108633:	8b 15 fc 1c 1b c0    	mov    0xc01b1cfc,%edx
c0108639:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010863c:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c010863f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108642:	a3 fc 1c 1b c0       	mov    %eax,0xc01b1cfc
		spin_unlock_irqrestore(&block_lock, flags);
c0108647:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010864a:	83 ec 0c             	sub    $0xc,%esp
c010864d:	50                   	push   %eax
c010864e:	e8 35 fa ff ff       	call   c0108088 <__intr_restore>
c0108653:	83 c4 10             	add    $0x10,%esp
		return bb->pages;
c0108656:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108659:	8b 40 04             	mov    0x4(%eax),%eax
c010865c:	eb 15                	jmp    c0108673 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c010865e:	83 ec 08             	sub    $0x8,%esp
c0108661:	6a 0c                	push   $0xc
c0108663:	ff 75 f0             	pushl  -0x10(%ebp)
c0108666:	e8 70 fd ff ff       	call   c01083db <slob_free>
c010866b:	83 c4 10             	add    $0x10,%esp
	return 0;
c010866e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108673:	c9                   	leave  
c0108674:	c3                   	ret    

c0108675 <kmalloc>:

void *
kmalloc(size_t size)
{
c0108675:	55                   	push   %ebp
c0108676:	89 e5                	mov    %esp,%ebp
c0108678:	83 ec 08             	sub    $0x8,%esp
  return __kmalloc(size, 0);
c010867b:	83 ec 08             	sub    $0x8,%esp
c010867e:	6a 00                	push   $0x0
c0108680:	ff 75 08             	pushl  0x8(%ebp)
c0108683:	e8 fe fe ff ff       	call   c0108586 <__kmalloc>
c0108688:	83 c4 10             	add    $0x10,%esp
}
c010868b:	c9                   	leave  
c010868c:	c3                   	ret    

c010868d <kfree>:


void kfree(void *block)
{
c010868d:	55                   	push   %ebp
c010868e:	89 e5                	mov    %esp,%ebp
c0108690:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb, **last = &bigblocks;
c0108693:	c7 45 f0 fc 1c 1b c0 	movl   $0xc01b1cfc,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c010869a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010869e:	0f 84 ac 00 00 00    	je     c0108750 <kfree+0xc3>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c01086a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01086a7:	25 ff 0f 00 00       	and    $0xfff,%eax
c01086ac:	85 c0                	test   %eax,%eax
c01086ae:	0f 85 85 00 00 00    	jne    c0108739 <kfree+0xac>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c01086b4:	e8 a5 f9 ff ff       	call   c010805e <__intr_save>
c01086b9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c01086bc:	a1 fc 1c 1b c0       	mov    0xc01b1cfc,%eax
c01086c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01086c4:	eb 5e                	jmp    c0108724 <kfree+0x97>
			if (bb->pages == block) {
c01086c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086c9:	8b 40 04             	mov    0x4(%eax),%eax
c01086cc:	3b 45 08             	cmp    0x8(%ebp),%eax
c01086cf:	75 41                	jne    c0108712 <kfree+0x85>
				*last = bb->next;
c01086d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086d4:	8b 50 08             	mov    0x8(%eax),%edx
c01086d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01086da:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c01086dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01086df:	83 ec 0c             	sub    $0xc,%esp
c01086e2:	50                   	push   %eax
c01086e3:	e8 a0 f9 ff ff       	call   c0108088 <__intr_restore>
c01086e8:	83 c4 10             	add    $0x10,%esp
				__slob_free_pages((unsigned long)block, bb->order);
c01086eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086ee:	8b 10                	mov    (%eax),%edx
c01086f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01086f3:	83 ec 08             	sub    $0x8,%esp
c01086f6:	52                   	push   %edx
c01086f7:	50                   	push   %eax
c01086f8:	e8 d6 fa ff ff       	call   c01081d3 <__slob_free_pages>
c01086fd:	83 c4 10             	add    $0x10,%esp
				slob_free(bb, sizeof(bigblock_t));
c0108700:	83 ec 08             	sub    $0x8,%esp
c0108703:	6a 0c                	push   $0xc
c0108705:	ff 75 f4             	pushl  -0xc(%ebp)
c0108708:	e8 ce fc ff ff       	call   c01083db <slob_free>
c010870d:	83 c4 10             	add    $0x10,%esp
				return;
c0108710:	eb 3f                	jmp    c0108751 <kfree+0xc4>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0108712:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108715:	83 c0 08             	add    $0x8,%eax
c0108718:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010871b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010871e:	8b 40 08             	mov    0x8(%eax),%eax
c0108721:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108724:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108728:	75 9c                	jne    c01086c6 <kfree+0x39>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c010872a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010872d:	83 ec 0c             	sub    $0xc,%esp
c0108730:	50                   	push   %eax
c0108731:	e8 52 f9 ff ff       	call   c0108088 <__intr_restore>
c0108736:	83 c4 10             	add    $0x10,%esp
	}

	slob_free((slob_t *)block - 1, 0);
c0108739:	8b 45 08             	mov    0x8(%ebp),%eax
c010873c:	83 e8 08             	sub    $0x8,%eax
c010873f:	83 ec 08             	sub    $0x8,%esp
c0108742:	6a 00                	push   $0x0
c0108744:	50                   	push   %eax
c0108745:	e8 91 fc ff ff       	call   c01083db <slob_free>
c010874a:	83 c4 10             	add    $0x10,%esp
	return;
c010874d:	90                   	nop
c010874e:	eb 01                	jmp    c0108751 <kfree+0xc4>
{
	bigblock_t *bb, **last = &bigblocks;
	unsigned long flags;

	if (!block)
		return;
c0108750:	90                   	nop
		spin_unlock_irqrestore(&block_lock, flags);
	}

	slob_free((slob_t *)block - 1, 0);
	return;
}
c0108751:	c9                   	leave  
c0108752:	c3                   	ret    

c0108753 <ksize>:


unsigned int ksize(const void *block)
{
c0108753:	55                   	push   %ebp
c0108754:	89 e5                	mov    %esp,%ebp
c0108756:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0108759:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010875d:	75 07                	jne    c0108766 <ksize+0x13>
		return 0;
c010875f:	b8 00 00 00 00       	mov    $0x0,%eax
c0108764:	eb 73                	jmp    c01087d9 <ksize+0x86>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0108766:	8b 45 08             	mov    0x8(%ebp),%eax
c0108769:	25 ff 0f 00 00       	and    $0xfff,%eax
c010876e:	85 c0                	test   %eax,%eax
c0108770:	75 5c                	jne    c01087ce <ksize+0x7b>
		spin_lock_irqsave(&block_lock, flags);
c0108772:	e8 e7 f8 ff ff       	call   c010805e <__intr_save>
c0108777:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c010877a:	a1 fc 1c 1b c0       	mov    0xc01b1cfc,%eax
c010877f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108782:	eb 35                	jmp    c01087b9 <ksize+0x66>
			if (bb->pages == block) {
c0108784:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108787:	8b 40 04             	mov    0x4(%eax),%eax
c010878a:	3b 45 08             	cmp    0x8(%ebp),%eax
c010878d:	75 21                	jne    c01087b0 <ksize+0x5d>
				spin_unlock_irqrestore(&slob_lock, flags);
c010878f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108792:	83 ec 0c             	sub    $0xc,%esp
c0108795:	50                   	push   %eax
c0108796:	e8 ed f8 ff ff       	call   c0108088 <__intr_restore>
c010879b:	83 c4 10             	add    $0x10,%esp
				return PAGE_SIZE << bb->order;
c010879e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087a1:	8b 00                	mov    (%eax),%eax
c01087a3:	ba 00 10 00 00       	mov    $0x1000,%edx
c01087a8:	89 c1                	mov    %eax,%ecx
c01087aa:	d3 e2                	shl    %cl,%edx
c01087ac:	89 d0                	mov    %edx,%eax
c01087ae:	eb 29                	jmp    c01087d9 <ksize+0x86>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c01087b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087b3:	8b 40 08             	mov    0x8(%eax),%eax
c01087b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01087b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01087bd:	75 c5                	jne    c0108784 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c01087bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01087c2:	83 ec 0c             	sub    $0xc,%esp
c01087c5:	50                   	push   %eax
c01087c6:	e8 bd f8 ff ff       	call   c0108088 <__intr_restore>
c01087cb:	83 c4 10             	add    $0x10,%esp
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c01087ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01087d1:	83 e8 08             	sub    $0x8,%eax
c01087d4:	8b 00                	mov    (%eax),%eax
c01087d6:	c1 e0 03             	shl    $0x3,%eax
}
c01087d9:	c9                   	leave  
c01087da:	c3                   	ret    

c01087db <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c01087db:	55                   	push   %ebp
c01087dc:	89 e5                	mov    %esp,%ebp
c01087de:	83 ec 10             	sub    $0x10,%esp
c01087e1:	c7 45 fc 44 3e 1b c0 	movl   $0xc01b3e44,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01087e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01087eb:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01087ee:	89 50 04             	mov    %edx,0x4(%eax)
c01087f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01087f4:	8b 50 04             	mov    0x4(%eax),%edx
c01087f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01087fa:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c01087fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01087ff:	c7 40 14 44 3e 1b c0 	movl   $0xc01b3e44,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0108806:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010880b:	c9                   	leave  
c010880c:	c3                   	ret    

c010880d <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c010880d:	55                   	push   %ebp
c010880e:	89 e5                	mov    %esp,%ebp
c0108810:	83 ec 38             	sub    $0x38,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0108813:	8b 45 08             	mov    0x8(%ebp),%eax
c0108816:	8b 40 14             	mov    0x14(%eax),%eax
c0108819:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c010881c:	8b 45 10             	mov    0x10(%ebp),%eax
c010881f:	83 c0 18             	add    $0x18,%eax
c0108822:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0108825:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108829:	74 06                	je     c0108831 <_fifo_map_swappable+0x24>
c010882b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010882f:	75 16                	jne    c0108847 <_fifo_map_swappable+0x3a>
c0108831:	68 50 ea 10 c0       	push   $0xc010ea50
c0108836:	68 6e ea 10 c0       	push   $0xc010ea6e
c010883b:	6a 32                	push   $0x32
c010883d:	68 83 ea 10 c0       	push   $0xc010ea83
c0108842:	e8 1a 8f ff ff       	call   c0101761 <__panic>
c0108847:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010884a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010884d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108850:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108853:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108856:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108859:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010885c:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010885f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108862:	8b 40 04             	mov    0x4(%eax),%eax
c0108865:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108868:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010886b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010886e:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0108871:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0108874:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108877:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010887a:	89 10                	mov    %edx,(%eax)
c010887c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010887f:	8b 10                	mov    (%eax),%edx
c0108881:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108884:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108887:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010888a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010888d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0108890:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108893:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108896:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c0108898:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010889d:	c9                   	leave  
c010889e:	c3                   	ret    

c010889f <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c010889f:	55                   	push   %ebp
c01088a0:	89 e5                	mov    %esp,%ebp
c01088a2:	83 ec 28             	sub    $0x28,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01088a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01088a8:	8b 40 14             	mov    0x14(%eax),%eax
c01088ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c01088ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01088b2:	75 16                	jne    c01088ca <_fifo_swap_out_victim+0x2b>
c01088b4:	68 97 ea 10 c0       	push   $0xc010ea97
c01088b9:	68 6e ea 10 c0       	push   $0xc010ea6e
c01088be:	6a 41                	push   $0x41
c01088c0:	68 83 ea 10 c0       	push   $0xc010ea83
c01088c5:	e8 97 8e ff ff       	call   c0101761 <__panic>
     assert(in_tick==0);
c01088ca:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01088ce:	74 16                	je     c01088e6 <_fifo_swap_out_victim+0x47>
c01088d0:	68 a4 ea 10 c0       	push   $0xc010eaa4
c01088d5:	68 6e ea 10 c0       	push   $0xc010ea6e
c01088da:	6a 42                	push   $0x42
c01088dc:	68 83 ea 10 c0       	push   $0xc010ea83
c01088e1:	e8 7b 8e ff ff       	call   c0101761 <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     /* Select the tail */
     list_entry_t *le = head->prev;
c01088e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088e9:	8b 00                	mov    (%eax),%eax
c01088eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c01088ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088f1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01088f4:	75 16                	jne    c010890c <_fifo_swap_out_victim+0x6d>
c01088f6:	68 af ea 10 c0       	push   $0xc010eaaf
c01088fb:	68 6e ea 10 c0       	push   $0xc010ea6e
c0108900:	6a 49                	push   $0x49
c0108902:	68 83 ea 10 c0       	push   $0xc010ea83
c0108907:	e8 55 8e ff ff       	call   c0101761 <__panic>
     struct Page *p = le2page(le, pra_page_link);
c010890c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010890f:	83 e8 18             	sub    $0x18,%eax
c0108912:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108915:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108918:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010891b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010891e:	8b 40 04             	mov    0x4(%eax),%eax
c0108921:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108924:	8b 12                	mov    (%edx),%edx
c0108926:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0108929:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010892c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010892f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108932:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0108935:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108938:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010893b:	89 10                	mov    %edx,(%eax)
     list_del(le);
     assert(p !=NULL);
c010893d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108941:	75 16                	jne    c0108959 <_fifo_swap_out_victim+0xba>
c0108943:	68 b8 ea 10 c0       	push   $0xc010eab8
c0108948:	68 6e ea 10 c0       	push   $0xc010ea6e
c010894d:	6a 4c                	push   $0x4c
c010894f:	68 83 ea 10 c0       	push   $0xc010ea83
c0108954:	e8 08 8e ff ff       	call   c0101761 <__panic>
     *ptr_page = p;
c0108959:	8b 45 0c             	mov    0xc(%ebp),%eax
c010895c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010895f:	89 10                	mov    %edx,(%eax)
     return 0;
c0108961:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108966:	c9                   	leave  
c0108967:	c3                   	ret    

c0108968 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0108968:	55                   	push   %ebp
c0108969:	89 e5                	mov    %esp,%ebp
c010896b:	83 ec 08             	sub    $0x8,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c010896e:	83 ec 0c             	sub    $0xc,%esp
c0108971:	68 c4 ea 10 c0       	push   $0xc010eac4
c0108976:	e8 08 79 ff ff       	call   c0100283 <cprintf>
c010897b:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c010897e:	b8 00 30 00 00       	mov    $0x3000,%eax
c0108983:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0108986:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c010898b:	83 f8 04             	cmp    $0x4,%eax
c010898e:	74 16                	je     c01089a6 <_fifo_check_swap+0x3e>
c0108990:	68 ea ea 10 c0       	push   $0xc010eaea
c0108995:	68 6e ea 10 c0       	push   $0xc010ea6e
c010899a:	6a 55                	push   $0x55
c010899c:	68 83 ea 10 c0       	push   $0xc010ea83
c01089a1:	e8 bb 8d ff ff       	call   c0101761 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01089a6:	83 ec 0c             	sub    $0xc,%esp
c01089a9:	68 fc ea 10 c0       	push   $0xc010eafc
c01089ae:	e8 d0 78 ff ff       	call   c0100283 <cprintf>
c01089b3:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c01089b6:	b8 00 10 00 00       	mov    $0x1000,%eax
c01089bb:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c01089be:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c01089c3:	83 f8 04             	cmp    $0x4,%eax
c01089c6:	74 16                	je     c01089de <_fifo_check_swap+0x76>
c01089c8:	68 ea ea 10 c0       	push   $0xc010eaea
c01089cd:	68 6e ea 10 c0       	push   $0xc010ea6e
c01089d2:	6a 58                	push   $0x58
c01089d4:	68 83 ea 10 c0       	push   $0xc010ea83
c01089d9:	e8 83 8d ff ff       	call   c0101761 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c01089de:	83 ec 0c             	sub    $0xc,%esp
c01089e1:	68 24 eb 10 c0       	push   $0xc010eb24
c01089e6:	e8 98 78 ff ff       	call   c0100283 <cprintf>
c01089eb:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c01089ee:	b8 00 40 00 00       	mov    $0x4000,%eax
c01089f3:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c01089f6:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c01089fb:	83 f8 04             	cmp    $0x4,%eax
c01089fe:	74 16                	je     c0108a16 <_fifo_check_swap+0xae>
c0108a00:	68 ea ea 10 c0       	push   $0xc010eaea
c0108a05:	68 6e ea 10 c0       	push   $0xc010ea6e
c0108a0a:	6a 5b                	push   $0x5b
c0108a0c:	68 83 ea 10 c0       	push   $0xc010ea83
c0108a11:	e8 4b 8d ff ff       	call   c0101761 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0108a16:	83 ec 0c             	sub    $0xc,%esp
c0108a19:	68 4c eb 10 c0       	push   $0xc010eb4c
c0108a1e:	e8 60 78 ff ff       	call   c0100283 <cprintf>
c0108a23:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0108a26:	b8 00 20 00 00       	mov    $0x2000,%eax
c0108a2b:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0108a2e:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c0108a33:	83 f8 04             	cmp    $0x4,%eax
c0108a36:	74 16                	je     c0108a4e <_fifo_check_swap+0xe6>
c0108a38:	68 ea ea 10 c0       	push   $0xc010eaea
c0108a3d:	68 6e ea 10 c0       	push   $0xc010ea6e
c0108a42:	6a 5e                	push   $0x5e
c0108a44:	68 83 ea 10 c0       	push   $0xc010ea83
c0108a49:	e8 13 8d ff ff       	call   c0101761 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0108a4e:	83 ec 0c             	sub    $0xc,%esp
c0108a51:	68 74 eb 10 c0       	push   $0xc010eb74
c0108a56:	e8 28 78 ff ff       	call   c0100283 <cprintf>
c0108a5b:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0108a5e:	b8 00 50 00 00       	mov    $0x5000,%eax
c0108a63:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0108a66:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c0108a6b:	83 f8 05             	cmp    $0x5,%eax
c0108a6e:	74 16                	je     c0108a86 <_fifo_check_swap+0x11e>
c0108a70:	68 9a eb 10 c0       	push   $0xc010eb9a
c0108a75:	68 6e ea 10 c0       	push   $0xc010ea6e
c0108a7a:	6a 61                	push   $0x61
c0108a7c:	68 83 ea 10 c0       	push   $0xc010ea83
c0108a81:	e8 db 8c ff ff       	call   c0101761 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0108a86:	83 ec 0c             	sub    $0xc,%esp
c0108a89:	68 4c eb 10 c0       	push   $0xc010eb4c
c0108a8e:	e8 f0 77 ff ff       	call   c0100283 <cprintf>
c0108a93:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0108a96:	b8 00 20 00 00       	mov    $0x2000,%eax
c0108a9b:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0108a9e:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c0108aa3:	83 f8 05             	cmp    $0x5,%eax
c0108aa6:	74 16                	je     c0108abe <_fifo_check_swap+0x156>
c0108aa8:	68 9a eb 10 c0       	push   $0xc010eb9a
c0108aad:	68 6e ea 10 c0       	push   $0xc010ea6e
c0108ab2:	6a 64                	push   $0x64
c0108ab4:	68 83 ea 10 c0       	push   $0xc010ea83
c0108ab9:	e8 a3 8c ff ff       	call   c0101761 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0108abe:	83 ec 0c             	sub    $0xc,%esp
c0108ac1:	68 fc ea 10 c0       	push   $0xc010eafc
c0108ac6:	e8 b8 77 ff ff       	call   c0100283 <cprintf>
c0108acb:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c0108ace:	b8 00 10 00 00       	mov    $0x1000,%eax
c0108ad3:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0108ad6:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c0108adb:	83 f8 06             	cmp    $0x6,%eax
c0108ade:	74 16                	je     c0108af6 <_fifo_check_swap+0x18e>
c0108ae0:	68 a9 eb 10 c0       	push   $0xc010eba9
c0108ae5:	68 6e ea 10 c0       	push   $0xc010ea6e
c0108aea:	6a 67                	push   $0x67
c0108aec:	68 83 ea 10 c0       	push   $0xc010ea83
c0108af1:	e8 6b 8c ff ff       	call   c0101761 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0108af6:	83 ec 0c             	sub    $0xc,%esp
c0108af9:	68 4c eb 10 c0       	push   $0xc010eb4c
c0108afe:	e8 80 77 ff ff       	call   c0100283 <cprintf>
c0108b03:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0108b06:	b8 00 20 00 00       	mov    $0x2000,%eax
c0108b0b:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0108b0e:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c0108b13:	83 f8 07             	cmp    $0x7,%eax
c0108b16:	74 16                	je     c0108b2e <_fifo_check_swap+0x1c6>
c0108b18:	68 b8 eb 10 c0       	push   $0xc010ebb8
c0108b1d:	68 6e ea 10 c0       	push   $0xc010ea6e
c0108b22:	6a 6a                	push   $0x6a
c0108b24:	68 83 ea 10 c0       	push   $0xc010ea83
c0108b29:	e8 33 8c ff ff       	call   c0101761 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0108b2e:	83 ec 0c             	sub    $0xc,%esp
c0108b31:	68 c4 ea 10 c0       	push   $0xc010eac4
c0108b36:	e8 48 77 ff ff       	call   c0100283 <cprintf>
c0108b3b:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0108b3e:	b8 00 30 00 00       	mov    $0x3000,%eax
c0108b43:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0108b46:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c0108b4b:	83 f8 08             	cmp    $0x8,%eax
c0108b4e:	74 16                	je     c0108b66 <_fifo_check_swap+0x1fe>
c0108b50:	68 c7 eb 10 c0       	push   $0xc010ebc7
c0108b55:	68 6e ea 10 c0       	push   $0xc010ea6e
c0108b5a:	6a 6d                	push   $0x6d
c0108b5c:	68 83 ea 10 c0       	push   $0xc010ea83
c0108b61:	e8 fb 8b ff ff       	call   c0101761 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0108b66:	83 ec 0c             	sub    $0xc,%esp
c0108b69:	68 24 eb 10 c0       	push   $0xc010eb24
c0108b6e:	e8 10 77 ff ff       	call   c0100283 <cprintf>
c0108b73:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c0108b76:	b8 00 40 00 00       	mov    $0x4000,%eax
c0108b7b:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0108b7e:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c0108b83:	83 f8 09             	cmp    $0x9,%eax
c0108b86:	74 16                	je     c0108b9e <_fifo_check_swap+0x236>
c0108b88:	68 d6 eb 10 c0       	push   $0xc010ebd6
c0108b8d:	68 6e ea 10 c0       	push   $0xc010ea6e
c0108b92:	6a 70                	push   $0x70
c0108b94:	68 83 ea 10 c0       	push   $0xc010ea83
c0108b99:	e8 c3 8b ff ff       	call   c0101761 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0108b9e:	83 ec 0c             	sub    $0xc,%esp
c0108ba1:	68 74 eb 10 c0       	push   $0xc010eb74
c0108ba6:	e8 d8 76 ff ff       	call   c0100283 <cprintf>
c0108bab:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0108bae:	b8 00 50 00 00       	mov    $0x5000,%eax
c0108bb3:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0108bb6:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c0108bbb:	83 f8 0a             	cmp    $0xa,%eax
c0108bbe:	74 16                	je     c0108bd6 <_fifo_check_swap+0x26e>
c0108bc0:	68 e5 eb 10 c0       	push   $0xc010ebe5
c0108bc5:	68 6e ea 10 c0       	push   $0xc010ea6e
c0108bca:	6a 73                	push   $0x73
c0108bcc:	68 83 ea 10 c0       	push   $0xc010ea83
c0108bd1:	e8 8b 8b ff ff       	call   c0101761 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0108bd6:	83 ec 0c             	sub    $0xc,%esp
c0108bd9:	68 fc ea 10 c0       	push   $0xc010eafc
c0108bde:	e8 a0 76 ff ff       	call   c0100283 <cprintf>
c0108be3:	83 c4 10             	add    $0x10,%esp
    assert(*(unsigned char *)0x1000 == 0x0a);
c0108be6:	b8 00 10 00 00       	mov    $0x1000,%eax
c0108beb:	0f b6 00             	movzbl (%eax),%eax
c0108bee:	3c 0a                	cmp    $0xa,%al
c0108bf0:	74 16                	je     c0108c08 <_fifo_check_swap+0x2a0>
c0108bf2:	68 f8 eb 10 c0       	push   $0xc010ebf8
c0108bf7:	68 6e ea 10 c0       	push   $0xc010ea6e
c0108bfc:	6a 75                	push   $0x75
c0108bfe:	68 83 ea 10 c0       	push   $0xc010ea83
c0108c03:	e8 59 8b ff ff       	call   c0101761 <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0108c08:	b8 00 10 00 00       	mov    $0x1000,%eax
c0108c0d:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c0108c10:	a1 ec 1c 1b c0       	mov    0xc01b1cec,%eax
c0108c15:	83 f8 0b             	cmp    $0xb,%eax
c0108c18:	74 16                	je     c0108c30 <_fifo_check_swap+0x2c8>
c0108c1a:	68 19 ec 10 c0       	push   $0xc010ec19
c0108c1f:	68 6e ea 10 c0       	push   $0xc010ea6e
c0108c24:	6a 77                	push   $0x77
c0108c26:	68 83 ea 10 c0       	push   $0xc010ea83
c0108c2b:	e8 31 8b ff ff       	call   c0101761 <__panic>
    return 0;
c0108c30:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108c35:	c9                   	leave  
c0108c36:	c3                   	ret    

c0108c37 <_fifo_init>:


static int
_fifo_init(void)
{
c0108c37:	55                   	push   %ebp
c0108c38:	89 e5                	mov    %esp,%ebp
    return 0;
c0108c3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108c3f:	5d                   	pop    %ebp
c0108c40:	c3                   	ret    

c0108c41 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0108c41:	55                   	push   %ebp
c0108c42:	89 e5                	mov    %esp,%ebp
    return 0;
c0108c44:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108c49:	5d                   	pop    %ebp
c0108c4a:	c3                   	ret    

c0108c4b <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0108c4b:	55                   	push   %ebp
c0108c4c:	89 e5                	mov    %esp,%ebp
c0108c4e:	b8 00 00 00 00       	mov    $0x0,%eax
c0108c53:	5d                   	pop    %ebp
c0108c54:	c3                   	ret    

c0108c55 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0108c55:	55                   	push   %ebp
c0108c56:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0108c58:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c5b:	8b 15 64 3d 1b c0    	mov    0xc01b3d64,%edx
c0108c61:	29 d0                	sub    %edx,%eax
c0108c63:	c1 f8 02             	sar    $0x2,%eax
c0108c66:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0108c6c:	5d                   	pop    %ebp
c0108c6d:	c3                   	ret    

c0108c6e <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0108c6e:	55                   	push   %ebp
c0108c6f:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0108c71:	ff 75 08             	pushl  0x8(%ebp)
c0108c74:	e8 dc ff ff ff       	call   c0108c55 <page2ppn>
c0108c79:	83 c4 04             	add    $0x4,%esp
c0108c7c:	c1 e0 0c             	shl    $0xc,%eax
}
c0108c7f:	c9                   	leave  
c0108c80:	c3                   	ret    

c0108c81 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c0108c81:	55                   	push   %ebp
c0108c82:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0108c84:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c87:	8b 00                	mov    (%eax),%eax
}
c0108c89:	5d                   	pop    %ebp
c0108c8a:	c3                   	ret    

c0108c8b <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0108c8b:	55                   	push   %ebp
c0108c8c:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0108c8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c91:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108c94:	89 10                	mov    %edx,(%eax)
}
c0108c96:	90                   	nop
c0108c97:	5d                   	pop    %ebp
c0108c98:	c3                   	ret    

c0108c99 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0108c99:	55                   	push   %ebp
c0108c9a:	89 e5                	mov    %esp,%ebp
c0108c9c:	83 ec 10             	sub    $0x10,%esp
c0108c9f:	c7 45 fc 4c 3e 1b c0 	movl   $0xc01b3e4c,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0108ca6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108ca9:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108cac:	89 50 04             	mov    %edx,0x4(%eax)
c0108caf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108cb2:	8b 50 04             	mov    0x4(%eax),%edx
c0108cb5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108cb8:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0108cba:	c7 05 54 3e 1b c0 00 	movl   $0x0,0xc01b3e54
c0108cc1:	00 00 00 
}
c0108cc4:	90                   	nop
c0108cc5:	c9                   	leave  
c0108cc6:	c3                   	ret    

c0108cc7 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0108cc7:	55                   	push   %ebp
c0108cc8:	89 e5                	mov    %esp,%ebp
c0108cca:	83 ec 38             	sub    $0x38,%esp
    assert(n > 0);
c0108ccd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108cd1:	75 16                	jne    c0108ce9 <default_init_memmap+0x22>
c0108cd3:	68 3c ec 10 c0       	push   $0xc010ec3c
c0108cd8:	68 42 ec 10 c0       	push   $0xc010ec42
c0108cdd:	6a 46                	push   $0x46
c0108cdf:	68 57 ec 10 c0       	push   $0xc010ec57
c0108ce4:	e8 78 8a ff ff       	call   c0101761 <__panic>
    struct Page *p = base;
c0108ce9:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0108cef:	e9 cb 00 00 00       	jmp    c0108dbf <default_init_memmap+0xf8>
        assert(PageReserved(p));
c0108cf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108cf7:	83 c0 04             	add    $0x4,%eax
c0108cfa:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0108d01:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0108d04:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d07:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108d0a:	0f a3 10             	bt     %edx,(%eax)
c0108d0d:	19 c0                	sbb    %eax,%eax
c0108d0f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return oldbit != 0;
c0108d12:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108d16:	0f 95 c0             	setne  %al
c0108d19:	0f b6 c0             	movzbl %al,%eax
c0108d1c:	85 c0                	test   %eax,%eax
c0108d1e:	75 16                	jne    c0108d36 <default_init_memmap+0x6f>
c0108d20:	68 6d ec 10 c0       	push   $0xc010ec6d
c0108d25:	68 42 ec 10 c0       	push   $0xc010ec42
c0108d2a:	6a 49                	push   $0x49
c0108d2c:	68 57 ec 10 c0       	push   $0xc010ec57
c0108d31:	e8 2b 8a ff ff       	call   c0101761 <__panic>
        p->flags = 0;
c0108d36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d39:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        SetPageProperty(p);
c0108d40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d43:	83 c0 04             	add    $0x4,%eax
c0108d46:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0108d4d:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0108d50:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108d53:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108d56:	0f ab 10             	bts    %edx,(%eax)
        p->property = 0;
c0108d59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d5c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        set_page_ref(p, 0);
c0108d63:	83 ec 08             	sub    $0x8,%esp
c0108d66:	6a 00                	push   $0x0
c0108d68:	ff 75 f4             	pushl  -0xc(%ebp)
c0108d6b:	e8 1b ff ff ff       	call   c0108c8b <set_page_ref>
c0108d70:	83 c4 10             	add    $0x10,%esp
        list_add_before(&free_list, &(p->page_link));
c0108d73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d76:	83 c0 10             	add    $0x10,%eax
c0108d79:	c7 45 f0 4c 3e 1b c0 	movl   $0xc01b3e4c,-0x10(%ebp)
c0108d80:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0108d83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108d86:	8b 00                	mov    (%eax),%eax
c0108d88:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108d8b:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0108d8e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0108d91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108d94:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0108d97:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108d9a:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108d9d:	89 10                	mov    %edx,(%eax)
c0108d9f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108da2:	8b 10                	mov    (%eax),%edx
c0108da4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108da7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108daa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108dad:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0108db0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0108db3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108db6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108db9:	89 10                	mov    %edx,(%eax)

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0108dbb:	83 45 f4 24          	addl   $0x24,-0xc(%ebp)
c0108dbf:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108dc2:	89 d0                	mov    %edx,%eax
c0108dc4:	c1 e0 03             	shl    $0x3,%eax
c0108dc7:	01 d0                	add    %edx,%eax
c0108dc9:	c1 e0 02             	shl    $0x2,%eax
c0108dcc:	89 c2                	mov    %eax,%edx
c0108dce:	8b 45 08             	mov    0x8(%ebp),%eax
c0108dd1:	01 d0                	add    %edx,%eax
c0108dd3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108dd6:	0f 85 18 ff ff ff    	jne    c0108cf4 <default_init_memmap+0x2d>
        SetPageProperty(p);
        p->property = 0;
        set_page_ref(p, 0);
        list_add_before(&free_list, &(p->page_link));
    }
    nr_free += n;
c0108ddc:	8b 15 54 3e 1b c0    	mov    0xc01b3e54,%edx
c0108de2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108de5:	01 d0                	add    %edx,%eax
c0108de7:	a3 54 3e 1b c0       	mov    %eax,0xc01b3e54
    //first block
    base->property = n;
c0108dec:	8b 45 08             	mov    0x8(%ebp),%eax
c0108def:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108df2:	89 50 08             	mov    %edx,0x8(%eax)
}
c0108df5:	90                   	nop
c0108df6:	c9                   	leave  
c0108df7:	c3                   	ret    

c0108df8 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c0108df8:	55                   	push   %ebp
c0108df9:	89 e5                	mov    %esp,%ebp
c0108dfb:	83 ec 58             	sub    $0x58,%esp
    assert(n > 0);
c0108dfe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108e02:	75 16                	jne    c0108e1a <default_alloc_pages+0x22>
c0108e04:	68 3c ec 10 c0       	push   $0xc010ec3c
c0108e09:	68 42 ec 10 c0       	push   $0xc010ec42
c0108e0e:	6a 57                	push   $0x57
c0108e10:	68 57 ec 10 c0       	push   $0xc010ec57
c0108e15:	e8 47 89 ff ff       	call   c0101761 <__panic>
    if (n > nr_free) {
c0108e1a:	a1 54 3e 1b c0       	mov    0xc01b3e54,%eax
c0108e1f:	3b 45 08             	cmp    0x8(%ebp),%eax
c0108e22:	73 0a                	jae    c0108e2e <default_alloc_pages+0x36>
        return NULL;
c0108e24:	b8 00 00 00 00       	mov    $0x0,%eax
c0108e29:	e9 37 01 00 00       	jmp    c0108f65 <default_alloc_pages+0x16d>
    }
    list_entry_t *le, *len;
    le = &free_list;
c0108e2e:	c7 45 f4 4c 3e 1b c0 	movl   $0xc01b3e4c,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
c0108e35:	e9 0a 01 00 00       	jmp    c0108f44 <default_alloc_pages+0x14c>
      struct Page *p = le2page(le, page_link);
c0108e3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e3d:	83 e8 10             	sub    $0x10,%eax
c0108e40:	89 45 ec             	mov    %eax,-0x14(%ebp)
      if(p->property >= n){
c0108e43:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e46:	8b 40 08             	mov    0x8(%eax),%eax
c0108e49:	3b 45 08             	cmp    0x8(%ebp),%eax
c0108e4c:	0f 82 f2 00 00 00    	jb     c0108f44 <default_alloc_pages+0x14c>
        int i;
        for(i=0;i<n;i++){
c0108e52:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0108e59:	eb 7c                	jmp    c0108ed7 <default_alloc_pages+0xdf>
c0108e5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e5e:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108e61:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108e64:	8b 40 04             	mov    0x4(%eax),%eax
          len = list_next(le);
c0108e67:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          struct Page *pp = le2page(le, page_link);
c0108e6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e6d:	83 e8 10             	sub    $0x10,%eax
c0108e70:	89 45 e0             	mov    %eax,-0x20(%ebp)
          SetPageReserved(pp);
c0108e73:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108e76:	83 c0 04             	add    $0x4,%eax
c0108e79:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
c0108e80:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0108e83:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0108e86:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108e89:	0f ab 10             	bts    %edx,(%eax)
          ClearPageProperty(pp);
c0108e8c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108e8f:	83 c0 04             	add    $0x4,%eax
c0108e92:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0108e99:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0108e9c:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108e9f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108ea2:	0f b3 10             	btr    %edx,(%eax)
c0108ea5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ea8:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0108eab:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108eae:	8b 40 04             	mov    0x4(%eax),%eax
c0108eb1:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0108eb4:	8b 12                	mov    (%edx),%edx
c0108eb6:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c0108eb9:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0108ebc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0108ebf:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0108ec2:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0108ec5:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0108ec8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0108ecb:	89 10                	mov    %edx,(%eax)
          list_del(le);
          le = len;
c0108ecd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108ed0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
      struct Page *p = le2page(le, page_link);
      if(p->property >= n){
        int i;
        for(i=0;i<n;i++){
c0108ed3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0108ed7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108eda:	3b 45 08             	cmp    0x8(%ebp),%eax
c0108edd:	0f 82 78 ff ff ff    	jb     c0108e5b <default_alloc_pages+0x63>
          SetPageReserved(pp);
          ClearPageProperty(pp);
          list_del(le);
          le = len;
        }
        if(p->property>n){
c0108ee3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108ee6:	8b 40 08             	mov    0x8(%eax),%eax
c0108ee9:	3b 45 08             	cmp    0x8(%ebp),%eax
c0108eec:	76 12                	jbe    c0108f00 <default_alloc_pages+0x108>
          (le2page(le,page_link))->property = p->property - n;
c0108eee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ef1:	8d 50 f0             	lea    -0x10(%eax),%edx
c0108ef4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108ef7:	8b 40 08             	mov    0x8(%eax),%eax
c0108efa:	2b 45 08             	sub    0x8(%ebp),%eax
c0108efd:	89 42 08             	mov    %eax,0x8(%edx)
        }
        ClearPageProperty(p);
c0108f00:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f03:	83 c0 04             	add    $0x4,%eax
c0108f06:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
c0108f0d:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0108f10:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0108f13:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0108f16:	0f b3 10             	btr    %edx,(%eax)
        SetPageReserved(p);
c0108f19:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f1c:	83 c0 04             	add    $0x4,%eax
c0108f1f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0108f26:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0108f29:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0108f2c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108f2f:	0f ab 10             	bts    %edx,(%eax)
        nr_free -= n;
c0108f32:	a1 54 3e 1b c0       	mov    0xc01b3e54,%eax
c0108f37:	2b 45 08             	sub    0x8(%ebp),%eax
c0108f3a:	a3 54 3e 1b c0       	mov    %eax,0xc01b3e54
        return p;
c0108f3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f42:	eb 21                	jmp    c0108f65 <default_alloc_pages+0x16d>
c0108f44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f47:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108f4a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108f4d:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    list_entry_t *le, *len;
    le = &free_list;

    while((le=list_next(le)) != &free_list) {
c0108f50:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108f53:	81 7d f4 4c 3e 1b c0 	cmpl   $0xc01b3e4c,-0xc(%ebp)
c0108f5a:	0f 85 da fe ff ff    	jne    c0108e3a <default_alloc_pages+0x42>
        SetPageReserved(p);
        nr_free -= n;
        return p;
      }
    }
    return NULL;
c0108f60:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108f65:	c9                   	leave  
c0108f66:	c3                   	ret    

c0108f67 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c0108f67:	55                   	push   %ebp
c0108f68:	89 e5                	mov    %esp,%ebp
c0108f6a:	83 ec 58             	sub    $0x58,%esp
    assert(n > 0);
c0108f6d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108f71:	75 16                	jne    c0108f89 <default_free_pages+0x22>
c0108f73:	68 3c ec 10 c0       	push   $0xc010ec3c
c0108f78:	68 42 ec 10 c0       	push   $0xc010ec42
c0108f7d:	6a 78                	push   $0x78
c0108f7f:	68 57 ec 10 c0       	push   $0xc010ec57
c0108f84:	e8 d8 87 ff ff       	call   c0101761 <__panic>
    assert(PageReserved(base));
c0108f89:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f8c:	83 c0 04             	add    $0x4,%eax
c0108f8f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
c0108f96:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0108f99:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108f9c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108f9f:	0f a3 10             	bt     %edx,(%eax)
c0108fa2:	19 c0                	sbb    %eax,%eax
c0108fa4:	89 45 cc             	mov    %eax,-0x34(%ebp)
    return oldbit != 0;
c0108fa7:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0108fab:	0f 95 c0             	setne  %al
c0108fae:	0f b6 c0             	movzbl %al,%eax
c0108fb1:	85 c0                	test   %eax,%eax
c0108fb3:	75 16                	jne    c0108fcb <default_free_pages+0x64>
c0108fb5:	68 7d ec 10 c0       	push   $0xc010ec7d
c0108fba:	68 42 ec 10 c0       	push   $0xc010ec42
c0108fbf:	6a 79                	push   $0x79
c0108fc1:	68 57 ec 10 c0       	push   $0xc010ec57
c0108fc6:	e8 96 87 ff ff       	call   c0101761 <__panic>

    list_entry_t *le = &free_list;
c0108fcb:	c7 45 f4 4c 3e 1b c0 	movl   $0xc01b3e4c,-0xc(%ebp)
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c0108fd2:	eb 11                	jmp    c0108fe5 <default_free_pages+0x7e>
      p = le2page(le, page_link);
c0108fd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fd7:	83 e8 10             	sub    $0x10,%eax
c0108fda:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(p>base){
c0108fdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108fe0:	3b 45 08             	cmp    0x8(%ebp),%eax
c0108fe3:	77 1a                	ja     c0108fff <default_free_pages+0x98>
c0108fe5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fe8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108feb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108fee:	8b 40 04             	mov    0x4(%eax),%eax
    assert(n > 0);
    assert(PageReserved(base));

    list_entry_t *le = &free_list;
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c0108ff1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108ff4:	81 7d f4 4c 3e 1b c0 	cmpl   $0xc01b3e4c,-0xc(%ebp)
c0108ffb:	75 d7                	jne    c0108fd4 <default_free_pages+0x6d>
c0108ffd:	eb 01                	jmp    c0109000 <default_free_pages+0x99>
      p = le2page(le, page_link);
      if(p>base){
        break;
c0108fff:	90                   	nop
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c0109000:	8b 45 08             	mov    0x8(%ebp),%eax
c0109003:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109006:	eb 4b                	jmp    c0109053 <default_free_pages+0xec>
      list_add_before(le, &(p->page_link));
c0109008:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010900b:	8d 50 10             	lea    0x10(%eax),%edx
c010900e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109011:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109014:	89 55 c8             	mov    %edx,-0x38(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109017:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010901a:	8b 00                	mov    (%eax),%eax
c010901c:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010901f:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c0109022:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0109025:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109028:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010902b:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010902e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0109031:	89 10                	mov    %edx,(%eax)
c0109033:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109036:	8b 10                	mov    (%eax),%edx
c0109038:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010903b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010903e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0109041:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0109044:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109047:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010904a:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010904d:	89 10                	mov    %edx,(%eax)
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c010904f:	83 45 f0 24          	addl   $0x24,-0x10(%ebp)
c0109053:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109056:	89 d0                	mov    %edx,%eax
c0109058:	c1 e0 03             	shl    $0x3,%eax
c010905b:	01 d0                	add    %edx,%eax
c010905d:	c1 e0 02             	shl    $0x2,%eax
c0109060:	89 c2                	mov    %eax,%edx
c0109062:	8b 45 08             	mov    0x8(%ebp),%eax
c0109065:	01 d0                	add    %edx,%eax
c0109067:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010906a:	77 9c                	ja     c0109008 <default_free_pages+0xa1>
      list_add_before(le, &(p->page_link));
    }
    base->flags = 0;
c010906c:	8b 45 08             	mov    0x8(%ebp),%eax
c010906f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    set_page_ref(base, 0);
c0109076:	83 ec 08             	sub    $0x8,%esp
c0109079:	6a 00                	push   $0x0
c010907b:	ff 75 08             	pushl  0x8(%ebp)
c010907e:	e8 08 fc ff ff       	call   c0108c8b <set_page_ref>
c0109083:	83 c4 10             	add    $0x10,%esp
    ClearPageProperty(base);
c0109086:	8b 45 08             	mov    0x8(%ebp),%eax
c0109089:	83 c0 04             	add    $0x4,%eax
c010908c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
c0109093:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0109096:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0109099:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010909c:	0f b3 10             	btr    %edx,(%eax)
    SetPageProperty(base);
c010909f:	8b 45 08             	mov    0x8(%ebp),%eax
c01090a2:	83 c0 04             	add    $0x4,%eax
c01090a5:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c01090ac:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01090af:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01090b2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01090b5:	0f ab 10             	bts    %edx,(%eax)
    base->property = n;
c01090b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01090bb:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090be:	89 50 08             	mov    %edx,0x8(%eax)
    
    p = le2page(le,page_link) ;
c01090c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090c4:	83 e8 10             	sub    $0x10,%eax
c01090c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( base+n == p ){
c01090ca:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090cd:	89 d0                	mov    %edx,%eax
c01090cf:	c1 e0 03             	shl    $0x3,%eax
c01090d2:	01 d0                	add    %edx,%eax
c01090d4:	c1 e0 02             	shl    $0x2,%eax
c01090d7:	89 c2                	mov    %eax,%edx
c01090d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01090dc:	01 d0                	add    %edx,%eax
c01090de:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01090e1:	75 1e                	jne    c0109101 <default_free_pages+0x19a>
      base->property += p->property;
c01090e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01090e6:	8b 50 08             	mov    0x8(%eax),%edx
c01090e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01090ec:	8b 40 08             	mov    0x8(%eax),%eax
c01090ef:	01 c2                	add    %eax,%edx
c01090f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01090f4:	89 50 08             	mov    %edx,0x8(%eax)
      p->property = 0;
c01090f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01090fa:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    le = list_prev(&(base->page_link));
c0109101:	8b 45 08             	mov    0x8(%ebp),%eax
c0109104:	83 c0 10             	add    $0x10,%eax
c0109107:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010910a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010910d:	8b 00                	mov    (%eax),%eax
c010910f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    p = le2page(le, page_link);
c0109112:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109115:	83 e8 10             	sub    $0x10,%eax
c0109118:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(le!=&free_list && p==base-1){
c010911b:	81 7d f4 4c 3e 1b c0 	cmpl   $0xc01b3e4c,-0xc(%ebp)
c0109122:	74 57                	je     c010917b <default_free_pages+0x214>
c0109124:	8b 45 08             	mov    0x8(%ebp),%eax
c0109127:	83 e8 24             	sub    $0x24,%eax
c010912a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010912d:	75 4c                	jne    c010917b <default_free_pages+0x214>
      while(le!=&free_list){
c010912f:	eb 41                	jmp    c0109172 <default_free_pages+0x20b>
        if(p->property){
c0109131:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109134:	8b 40 08             	mov    0x8(%eax),%eax
c0109137:	85 c0                	test   %eax,%eax
c0109139:	74 20                	je     c010915b <default_free_pages+0x1f4>
          p->property += base->property;
c010913b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010913e:	8b 50 08             	mov    0x8(%eax),%edx
c0109141:	8b 45 08             	mov    0x8(%ebp),%eax
c0109144:	8b 40 08             	mov    0x8(%eax),%eax
c0109147:	01 c2                	add    %eax,%edx
c0109149:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010914c:	89 50 08             	mov    %edx,0x8(%eax)
          base->property = 0;
c010914f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109152:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
          break;
c0109159:	eb 20                	jmp    c010917b <default_free_pages+0x214>
c010915b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010915e:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0109161:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109164:	8b 00                	mov    (%eax),%eax
        }
        le = list_prev(le);
c0109166:	89 45 f4             	mov    %eax,-0xc(%ebp)
        p = le2page(le,page_link);
c0109169:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010916c:	83 e8 10             	sub    $0x10,%eax
c010916f:	89 45 f0             	mov    %eax,-0x10(%ebp)
      p->property = 0;
    }
    le = list_prev(&(base->page_link));
    p = le2page(le, page_link);
    if(le!=&free_list && p==base-1){
      while(le!=&free_list){
c0109172:	81 7d f4 4c 3e 1b c0 	cmpl   $0xc01b3e4c,-0xc(%ebp)
c0109179:	75 b6                	jne    c0109131 <default_free_pages+0x1ca>
        le = list_prev(le);
        p = le2page(le,page_link);
      }
    }

    nr_free += n;
c010917b:	8b 15 54 3e 1b c0    	mov    0xc01b3e54,%edx
c0109181:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109184:	01 d0                	add    %edx,%eax
c0109186:	a3 54 3e 1b c0       	mov    %eax,0xc01b3e54
    return ;
c010918b:	90                   	nop
}
c010918c:	c9                   	leave  
c010918d:	c3                   	ret    

c010918e <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c010918e:	55                   	push   %ebp
c010918f:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0109191:	a1 54 3e 1b c0       	mov    0xc01b3e54,%eax
}
c0109196:	5d                   	pop    %ebp
c0109197:	c3                   	ret    

c0109198 <basic_check>:

static void
basic_check(void) {
c0109198:	55                   	push   %ebp
c0109199:	89 e5                	mov    %esp,%ebp
c010919b:	83 ec 38             	sub    $0x38,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c010919e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01091a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01091ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01091ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c01091b1:	83 ec 0c             	sub    $0xc,%esp
c01091b4:	6a 01                	push   $0x1
c01091b6:	e8 3e b9 ff ff       	call   c0104af9 <alloc_pages>
c01091bb:	83 c4 10             	add    $0x10,%esp
c01091be:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01091c1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01091c5:	75 19                	jne    c01091e0 <basic_check+0x48>
c01091c7:	68 90 ec 10 c0       	push   $0xc010ec90
c01091cc:	68 42 ec 10 c0       	push   $0xc010ec42
c01091d1:	68 ad 00 00 00       	push   $0xad
c01091d6:	68 57 ec 10 c0       	push   $0xc010ec57
c01091db:	e8 81 85 ff ff       	call   c0101761 <__panic>
    assert((p1 = alloc_page()) != NULL);
c01091e0:	83 ec 0c             	sub    $0xc,%esp
c01091e3:	6a 01                	push   $0x1
c01091e5:	e8 0f b9 ff ff       	call   c0104af9 <alloc_pages>
c01091ea:	83 c4 10             	add    $0x10,%esp
c01091ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01091f0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01091f4:	75 19                	jne    c010920f <basic_check+0x77>
c01091f6:	68 ac ec 10 c0       	push   $0xc010ecac
c01091fb:	68 42 ec 10 c0       	push   $0xc010ec42
c0109200:	68 ae 00 00 00       	push   $0xae
c0109205:	68 57 ec 10 c0       	push   $0xc010ec57
c010920a:	e8 52 85 ff ff       	call   c0101761 <__panic>
    assert((p2 = alloc_page()) != NULL);
c010920f:	83 ec 0c             	sub    $0xc,%esp
c0109212:	6a 01                	push   $0x1
c0109214:	e8 e0 b8 ff ff       	call   c0104af9 <alloc_pages>
c0109219:	83 c4 10             	add    $0x10,%esp
c010921c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010921f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109223:	75 19                	jne    c010923e <basic_check+0xa6>
c0109225:	68 c8 ec 10 c0       	push   $0xc010ecc8
c010922a:	68 42 ec 10 c0       	push   $0xc010ec42
c010922f:	68 af 00 00 00       	push   $0xaf
c0109234:	68 57 ec 10 c0       	push   $0xc010ec57
c0109239:	e8 23 85 ff ff       	call   c0101761 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c010923e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109241:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0109244:	74 10                	je     c0109256 <basic_check+0xbe>
c0109246:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109249:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010924c:	74 08                	je     c0109256 <basic_check+0xbe>
c010924e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109251:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109254:	75 19                	jne    c010926f <basic_check+0xd7>
c0109256:	68 e4 ec 10 c0       	push   $0xc010ece4
c010925b:	68 42 ec 10 c0       	push   $0xc010ec42
c0109260:	68 b1 00 00 00       	push   $0xb1
c0109265:	68 57 ec 10 c0       	push   $0xc010ec57
c010926a:	e8 f2 84 ff ff       	call   c0101761 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c010926f:	83 ec 0c             	sub    $0xc,%esp
c0109272:	ff 75 ec             	pushl  -0x14(%ebp)
c0109275:	e8 07 fa ff ff       	call   c0108c81 <page_ref>
c010927a:	83 c4 10             	add    $0x10,%esp
c010927d:	85 c0                	test   %eax,%eax
c010927f:	75 24                	jne    c01092a5 <basic_check+0x10d>
c0109281:	83 ec 0c             	sub    $0xc,%esp
c0109284:	ff 75 f0             	pushl  -0x10(%ebp)
c0109287:	e8 f5 f9 ff ff       	call   c0108c81 <page_ref>
c010928c:	83 c4 10             	add    $0x10,%esp
c010928f:	85 c0                	test   %eax,%eax
c0109291:	75 12                	jne    c01092a5 <basic_check+0x10d>
c0109293:	83 ec 0c             	sub    $0xc,%esp
c0109296:	ff 75 f4             	pushl  -0xc(%ebp)
c0109299:	e8 e3 f9 ff ff       	call   c0108c81 <page_ref>
c010929e:	83 c4 10             	add    $0x10,%esp
c01092a1:	85 c0                	test   %eax,%eax
c01092a3:	74 19                	je     c01092be <basic_check+0x126>
c01092a5:	68 08 ed 10 c0       	push   $0xc010ed08
c01092aa:	68 42 ec 10 c0       	push   $0xc010ec42
c01092af:	68 b2 00 00 00       	push   $0xb2
c01092b4:	68 57 ec 10 c0       	push   $0xc010ec57
c01092b9:	e8 a3 84 ff ff       	call   c0101761 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c01092be:	83 ec 0c             	sub    $0xc,%esp
c01092c1:	ff 75 ec             	pushl  -0x14(%ebp)
c01092c4:	e8 a5 f9 ff ff       	call   c0108c6e <page2pa>
c01092c9:	83 c4 10             	add    $0x10,%esp
c01092cc:	89 c2                	mov    %eax,%edx
c01092ce:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c01092d3:	c1 e0 0c             	shl    $0xc,%eax
c01092d6:	39 c2                	cmp    %eax,%edx
c01092d8:	72 19                	jb     c01092f3 <basic_check+0x15b>
c01092da:	68 44 ed 10 c0       	push   $0xc010ed44
c01092df:	68 42 ec 10 c0       	push   $0xc010ec42
c01092e4:	68 b4 00 00 00       	push   $0xb4
c01092e9:	68 57 ec 10 c0       	push   $0xc010ec57
c01092ee:	e8 6e 84 ff ff       	call   c0101761 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c01092f3:	83 ec 0c             	sub    $0xc,%esp
c01092f6:	ff 75 f0             	pushl  -0x10(%ebp)
c01092f9:	e8 70 f9 ff ff       	call   c0108c6e <page2pa>
c01092fe:	83 c4 10             	add    $0x10,%esp
c0109301:	89 c2                	mov    %eax,%edx
c0109303:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c0109308:	c1 e0 0c             	shl    $0xc,%eax
c010930b:	39 c2                	cmp    %eax,%edx
c010930d:	72 19                	jb     c0109328 <basic_check+0x190>
c010930f:	68 61 ed 10 c0       	push   $0xc010ed61
c0109314:	68 42 ec 10 c0       	push   $0xc010ec42
c0109319:	68 b5 00 00 00       	push   $0xb5
c010931e:	68 57 ec 10 c0       	push   $0xc010ec57
c0109323:	e8 39 84 ff ff       	call   c0101761 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0109328:	83 ec 0c             	sub    $0xc,%esp
c010932b:	ff 75 f4             	pushl  -0xc(%ebp)
c010932e:	e8 3b f9 ff ff       	call   c0108c6e <page2pa>
c0109333:	83 c4 10             	add    $0x10,%esp
c0109336:	89 c2                	mov    %eax,%edx
c0109338:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c010933d:	c1 e0 0c             	shl    $0xc,%eax
c0109340:	39 c2                	cmp    %eax,%edx
c0109342:	72 19                	jb     c010935d <basic_check+0x1c5>
c0109344:	68 7e ed 10 c0       	push   $0xc010ed7e
c0109349:	68 42 ec 10 c0       	push   $0xc010ec42
c010934e:	68 b6 00 00 00       	push   $0xb6
c0109353:	68 57 ec 10 c0       	push   $0xc010ec57
c0109358:	e8 04 84 ff ff       	call   c0101761 <__panic>

    list_entry_t free_list_store = free_list;
c010935d:	a1 4c 3e 1b c0       	mov    0xc01b3e4c,%eax
c0109362:	8b 15 50 3e 1b c0    	mov    0xc01b3e50,%edx
c0109368:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010936b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010936e:	c7 45 e4 4c 3e 1b c0 	movl   $0xc01b3e4c,-0x1c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109375:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109378:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010937b:	89 50 04             	mov    %edx,0x4(%eax)
c010937e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109381:	8b 50 04             	mov    0x4(%eax),%edx
c0109384:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109387:	89 10                	mov    %edx,(%eax)
c0109389:	c7 45 d8 4c 3e 1b c0 	movl   $0xc01b3e4c,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109390:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109393:	8b 40 04             	mov    0x4(%eax),%eax
c0109396:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0109399:	0f 94 c0             	sete   %al
c010939c:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c010939f:	85 c0                	test   %eax,%eax
c01093a1:	75 19                	jne    c01093bc <basic_check+0x224>
c01093a3:	68 9b ed 10 c0       	push   $0xc010ed9b
c01093a8:	68 42 ec 10 c0       	push   $0xc010ec42
c01093ad:	68 ba 00 00 00       	push   $0xba
c01093b2:	68 57 ec 10 c0       	push   $0xc010ec57
c01093b7:	e8 a5 83 ff ff       	call   c0101761 <__panic>

    unsigned int nr_free_store = nr_free;
c01093bc:	a1 54 3e 1b c0       	mov    0xc01b3e54,%eax
c01093c1:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c01093c4:	c7 05 54 3e 1b c0 00 	movl   $0x0,0xc01b3e54
c01093cb:	00 00 00 

    assert(alloc_page() == NULL);
c01093ce:	83 ec 0c             	sub    $0xc,%esp
c01093d1:	6a 01                	push   $0x1
c01093d3:	e8 21 b7 ff ff       	call   c0104af9 <alloc_pages>
c01093d8:	83 c4 10             	add    $0x10,%esp
c01093db:	85 c0                	test   %eax,%eax
c01093dd:	74 19                	je     c01093f8 <basic_check+0x260>
c01093df:	68 b2 ed 10 c0       	push   $0xc010edb2
c01093e4:	68 42 ec 10 c0       	push   $0xc010ec42
c01093e9:	68 bf 00 00 00       	push   $0xbf
c01093ee:	68 57 ec 10 c0       	push   $0xc010ec57
c01093f3:	e8 69 83 ff ff       	call   c0101761 <__panic>

    free_page(p0);
c01093f8:	83 ec 08             	sub    $0x8,%esp
c01093fb:	6a 01                	push   $0x1
c01093fd:	ff 75 ec             	pushl  -0x14(%ebp)
c0109400:	e8 60 b7 ff ff       	call   c0104b65 <free_pages>
c0109405:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c0109408:	83 ec 08             	sub    $0x8,%esp
c010940b:	6a 01                	push   $0x1
c010940d:	ff 75 f0             	pushl  -0x10(%ebp)
c0109410:	e8 50 b7 ff ff       	call   c0104b65 <free_pages>
c0109415:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0109418:	83 ec 08             	sub    $0x8,%esp
c010941b:	6a 01                	push   $0x1
c010941d:	ff 75 f4             	pushl  -0xc(%ebp)
c0109420:	e8 40 b7 ff ff       	call   c0104b65 <free_pages>
c0109425:	83 c4 10             	add    $0x10,%esp
    assert(nr_free == 3);
c0109428:	a1 54 3e 1b c0       	mov    0xc01b3e54,%eax
c010942d:	83 f8 03             	cmp    $0x3,%eax
c0109430:	74 19                	je     c010944b <basic_check+0x2b3>
c0109432:	68 c7 ed 10 c0       	push   $0xc010edc7
c0109437:	68 42 ec 10 c0       	push   $0xc010ec42
c010943c:	68 c4 00 00 00       	push   $0xc4
c0109441:	68 57 ec 10 c0       	push   $0xc010ec57
c0109446:	e8 16 83 ff ff       	call   c0101761 <__panic>

    assert((p0 = alloc_page()) != NULL);
c010944b:	83 ec 0c             	sub    $0xc,%esp
c010944e:	6a 01                	push   $0x1
c0109450:	e8 a4 b6 ff ff       	call   c0104af9 <alloc_pages>
c0109455:	83 c4 10             	add    $0x10,%esp
c0109458:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010945b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010945f:	75 19                	jne    c010947a <basic_check+0x2e2>
c0109461:	68 90 ec 10 c0       	push   $0xc010ec90
c0109466:	68 42 ec 10 c0       	push   $0xc010ec42
c010946b:	68 c6 00 00 00       	push   $0xc6
c0109470:	68 57 ec 10 c0       	push   $0xc010ec57
c0109475:	e8 e7 82 ff ff       	call   c0101761 <__panic>
    assert((p1 = alloc_page()) != NULL);
c010947a:	83 ec 0c             	sub    $0xc,%esp
c010947d:	6a 01                	push   $0x1
c010947f:	e8 75 b6 ff ff       	call   c0104af9 <alloc_pages>
c0109484:	83 c4 10             	add    $0x10,%esp
c0109487:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010948a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010948e:	75 19                	jne    c01094a9 <basic_check+0x311>
c0109490:	68 ac ec 10 c0       	push   $0xc010ecac
c0109495:	68 42 ec 10 c0       	push   $0xc010ec42
c010949a:	68 c7 00 00 00       	push   $0xc7
c010949f:	68 57 ec 10 c0       	push   $0xc010ec57
c01094a4:	e8 b8 82 ff ff       	call   c0101761 <__panic>
    assert((p2 = alloc_page()) != NULL);
c01094a9:	83 ec 0c             	sub    $0xc,%esp
c01094ac:	6a 01                	push   $0x1
c01094ae:	e8 46 b6 ff ff       	call   c0104af9 <alloc_pages>
c01094b3:	83 c4 10             	add    $0x10,%esp
c01094b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01094b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01094bd:	75 19                	jne    c01094d8 <basic_check+0x340>
c01094bf:	68 c8 ec 10 c0       	push   $0xc010ecc8
c01094c4:	68 42 ec 10 c0       	push   $0xc010ec42
c01094c9:	68 c8 00 00 00       	push   $0xc8
c01094ce:	68 57 ec 10 c0       	push   $0xc010ec57
c01094d3:	e8 89 82 ff ff       	call   c0101761 <__panic>

    assert(alloc_page() == NULL);
c01094d8:	83 ec 0c             	sub    $0xc,%esp
c01094db:	6a 01                	push   $0x1
c01094dd:	e8 17 b6 ff ff       	call   c0104af9 <alloc_pages>
c01094e2:	83 c4 10             	add    $0x10,%esp
c01094e5:	85 c0                	test   %eax,%eax
c01094e7:	74 19                	je     c0109502 <basic_check+0x36a>
c01094e9:	68 b2 ed 10 c0       	push   $0xc010edb2
c01094ee:	68 42 ec 10 c0       	push   $0xc010ec42
c01094f3:	68 ca 00 00 00       	push   $0xca
c01094f8:	68 57 ec 10 c0       	push   $0xc010ec57
c01094fd:	e8 5f 82 ff ff       	call   c0101761 <__panic>

    free_page(p0);
c0109502:	83 ec 08             	sub    $0x8,%esp
c0109505:	6a 01                	push   $0x1
c0109507:	ff 75 ec             	pushl  -0x14(%ebp)
c010950a:	e8 56 b6 ff ff       	call   c0104b65 <free_pages>
c010950f:	83 c4 10             	add    $0x10,%esp
c0109512:	c7 45 e8 4c 3e 1b c0 	movl   $0xc01b3e4c,-0x18(%ebp)
c0109519:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010951c:	8b 40 04             	mov    0x4(%eax),%eax
c010951f:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0109522:	0f 94 c0             	sete   %al
c0109525:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0109528:	85 c0                	test   %eax,%eax
c010952a:	74 19                	je     c0109545 <basic_check+0x3ad>
c010952c:	68 d4 ed 10 c0       	push   $0xc010edd4
c0109531:	68 42 ec 10 c0       	push   $0xc010ec42
c0109536:	68 cd 00 00 00       	push   $0xcd
c010953b:	68 57 ec 10 c0       	push   $0xc010ec57
c0109540:	e8 1c 82 ff ff       	call   c0101761 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0109545:	83 ec 0c             	sub    $0xc,%esp
c0109548:	6a 01                	push   $0x1
c010954a:	e8 aa b5 ff ff       	call   c0104af9 <alloc_pages>
c010954f:	83 c4 10             	add    $0x10,%esp
c0109552:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0109555:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109558:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010955b:	74 19                	je     c0109576 <basic_check+0x3de>
c010955d:	68 ec ed 10 c0       	push   $0xc010edec
c0109562:	68 42 ec 10 c0       	push   $0xc010ec42
c0109567:	68 d0 00 00 00       	push   $0xd0
c010956c:	68 57 ec 10 c0       	push   $0xc010ec57
c0109571:	e8 eb 81 ff ff       	call   c0101761 <__panic>
    assert(alloc_page() == NULL);
c0109576:	83 ec 0c             	sub    $0xc,%esp
c0109579:	6a 01                	push   $0x1
c010957b:	e8 79 b5 ff ff       	call   c0104af9 <alloc_pages>
c0109580:	83 c4 10             	add    $0x10,%esp
c0109583:	85 c0                	test   %eax,%eax
c0109585:	74 19                	je     c01095a0 <basic_check+0x408>
c0109587:	68 b2 ed 10 c0       	push   $0xc010edb2
c010958c:	68 42 ec 10 c0       	push   $0xc010ec42
c0109591:	68 d1 00 00 00       	push   $0xd1
c0109596:	68 57 ec 10 c0       	push   $0xc010ec57
c010959b:	e8 c1 81 ff ff       	call   c0101761 <__panic>

    assert(nr_free == 0);
c01095a0:	a1 54 3e 1b c0       	mov    0xc01b3e54,%eax
c01095a5:	85 c0                	test   %eax,%eax
c01095a7:	74 19                	je     c01095c2 <basic_check+0x42a>
c01095a9:	68 05 ee 10 c0       	push   $0xc010ee05
c01095ae:	68 42 ec 10 c0       	push   $0xc010ec42
c01095b3:	68 d3 00 00 00       	push   $0xd3
c01095b8:	68 57 ec 10 c0       	push   $0xc010ec57
c01095bd:	e8 9f 81 ff ff       	call   c0101761 <__panic>
    free_list = free_list_store;
c01095c2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01095c5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01095c8:	a3 4c 3e 1b c0       	mov    %eax,0xc01b3e4c
c01095cd:	89 15 50 3e 1b c0    	mov    %edx,0xc01b3e50
    nr_free = nr_free_store;
c01095d3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01095d6:	a3 54 3e 1b c0       	mov    %eax,0xc01b3e54

    free_page(p);
c01095db:	83 ec 08             	sub    $0x8,%esp
c01095de:	6a 01                	push   $0x1
c01095e0:	ff 75 dc             	pushl  -0x24(%ebp)
c01095e3:	e8 7d b5 ff ff       	call   c0104b65 <free_pages>
c01095e8:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c01095eb:	83 ec 08             	sub    $0x8,%esp
c01095ee:	6a 01                	push   $0x1
c01095f0:	ff 75 f0             	pushl  -0x10(%ebp)
c01095f3:	e8 6d b5 ff ff       	call   c0104b65 <free_pages>
c01095f8:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c01095fb:	83 ec 08             	sub    $0x8,%esp
c01095fe:	6a 01                	push   $0x1
c0109600:	ff 75 f4             	pushl  -0xc(%ebp)
c0109603:	e8 5d b5 ff ff       	call   c0104b65 <free_pages>
c0109608:	83 c4 10             	add    $0x10,%esp
}
c010960b:	90                   	nop
c010960c:	c9                   	leave  
c010960d:	c3                   	ret    

c010960e <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c010960e:	55                   	push   %ebp
c010960f:	89 e5                	mov    %esp,%ebp
c0109611:	81 ec 88 00 00 00    	sub    $0x88,%esp
    int count = 0, total = 0;
c0109617:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010961e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0109625:	c7 45 ec 4c 3e 1b c0 	movl   $0xc01b3e4c,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010962c:	eb 60                	jmp    c010968e <default_check+0x80>
        struct Page *p = le2page(le, page_link);
c010962e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109631:	83 e8 10             	sub    $0x10,%eax
c0109634:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0109637:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010963a:	83 c0 04             	add    $0x4,%eax
c010963d:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0109644:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0109647:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010964a:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010964d:	0f a3 10             	bt     %edx,(%eax)
c0109650:	19 c0                	sbb    %eax,%eax
c0109652:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c0109655:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c0109659:	0f 95 c0             	setne  %al
c010965c:	0f b6 c0             	movzbl %al,%eax
c010965f:	85 c0                	test   %eax,%eax
c0109661:	75 19                	jne    c010967c <default_check+0x6e>
c0109663:	68 12 ee 10 c0       	push   $0xc010ee12
c0109668:	68 42 ec 10 c0       	push   $0xc010ec42
c010966d:	68 e4 00 00 00       	push   $0xe4
c0109672:	68 57 ec 10 c0       	push   $0xc010ec57
c0109677:	e8 e5 80 ff ff       	call   c0101761 <__panic>
        count ++, total += p->property;
c010967c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109680:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109683:	8b 50 08             	mov    0x8(%eax),%edx
c0109686:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109689:	01 d0                	add    %edx,%eax
c010968b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010968e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109691:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109694:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109697:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010969a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010969d:	81 7d ec 4c 3e 1b c0 	cmpl   $0xc01b3e4c,-0x14(%ebp)
c01096a4:	75 88                	jne    c010962e <default_check+0x20>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c01096a6:	e8 ef b4 ff ff       	call   c0104b9a <nr_free_pages>
c01096ab:	89 c2                	mov    %eax,%edx
c01096ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096b0:	39 c2                	cmp    %eax,%edx
c01096b2:	74 19                	je     c01096cd <default_check+0xbf>
c01096b4:	68 22 ee 10 c0       	push   $0xc010ee22
c01096b9:	68 42 ec 10 c0       	push   $0xc010ec42
c01096be:	68 e7 00 00 00       	push   $0xe7
c01096c3:	68 57 ec 10 c0       	push   $0xc010ec57
c01096c8:	e8 94 80 ff ff       	call   c0101761 <__panic>

    basic_check();
c01096cd:	e8 c6 fa ff ff       	call   c0109198 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c01096d2:	83 ec 0c             	sub    $0xc,%esp
c01096d5:	6a 05                	push   $0x5
c01096d7:	e8 1d b4 ff ff       	call   c0104af9 <alloc_pages>
c01096dc:	83 c4 10             	add    $0x10,%esp
c01096df:	89 45 dc             	mov    %eax,-0x24(%ebp)
    assert(p0 != NULL);
c01096e2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01096e6:	75 19                	jne    c0109701 <default_check+0xf3>
c01096e8:	68 3b ee 10 c0       	push   $0xc010ee3b
c01096ed:	68 42 ec 10 c0       	push   $0xc010ec42
c01096f2:	68 ec 00 00 00       	push   $0xec
c01096f7:	68 57 ec 10 c0       	push   $0xc010ec57
c01096fc:	e8 60 80 ff ff       	call   c0101761 <__panic>
    assert(!PageProperty(p0));
c0109701:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109704:	83 c0 04             	add    $0x4,%eax
c0109707:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c010970e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0109711:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0109714:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109717:	0f a3 10             	bt     %edx,(%eax)
c010971a:	19 c0                	sbb    %eax,%eax
c010971c:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c010971f:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c0109723:	0f 95 c0             	setne  %al
c0109726:	0f b6 c0             	movzbl %al,%eax
c0109729:	85 c0                	test   %eax,%eax
c010972b:	74 19                	je     c0109746 <default_check+0x138>
c010972d:	68 46 ee 10 c0       	push   $0xc010ee46
c0109732:	68 42 ec 10 c0       	push   $0xc010ec42
c0109737:	68 ed 00 00 00       	push   $0xed
c010973c:	68 57 ec 10 c0       	push   $0xc010ec57
c0109741:	e8 1b 80 ff ff       	call   c0101761 <__panic>

    list_entry_t free_list_store = free_list;
c0109746:	a1 4c 3e 1b c0       	mov    0xc01b3e4c,%eax
c010974b:	8b 15 50 3e 1b c0    	mov    0xc01b3e50,%edx
c0109751:	89 45 80             	mov    %eax,-0x80(%ebp)
c0109754:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0109757:	c7 45 d0 4c 3e 1b c0 	movl   $0xc01b3e4c,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010975e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109761:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0109764:	89 50 04             	mov    %edx,0x4(%eax)
c0109767:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010976a:	8b 50 04             	mov    0x4(%eax),%edx
c010976d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109770:	89 10                	mov    %edx,(%eax)
c0109772:	c7 45 d8 4c 3e 1b c0 	movl   $0xc01b3e4c,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109779:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010977c:	8b 40 04             	mov    0x4(%eax),%eax
c010977f:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0109782:	0f 94 c0             	sete   %al
c0109785:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0109788:	85 c0                	test   %eax,%eax
c010978a:	75 19                	jne    c01097a5 <default_check+0x197>
c010978c:	68 9b ed 10 c0       	push   $0xc010ed9b
c0109791:	68 42 ec 10 c0       	push   $0xc010ec42
c0109796:	68 f1 00 00 00       	push   $0xf1
c010979b:	68 57 ec 10 c0       	push   $0xc010ec57
c01097a0:	e8 bc 7f ff ff       	call   c0101761 <__panic>
    assert(alloc_page() == NULL);
c01097a5:	83 ec 0c             	sub    $0xc,%esp
c01097a8:	6a 01                	push   $0x1
c01097aa:	e8 4a b3 ff ff       	call   c0104af9 <alloc_pages>
c01097af:	83 c4 10             	add    $0x10,%esp
c01097b2:	85 c0                	test   %eax,%eax
c01097b4:	74 19                	je     c01097cf <default_check+0x1c1>
c01097b6:	68 b2 ed 10 c0       	push   $0xc010edb2
c01097bb:	68 42 ec 10 c0       	push   $0xc010ec42
c01097c0:	68 f2 00 00 00       	push   $0xf2
c01097c5:	68 57 ec 10 c0       	push   $0xc010ec57
c01097ca:	e8 92 7f ff ff       	call   c0101761 <__panic>

    unsigned int nr_free_store = nr_free;
c01097cf:	a1 54 3e 1b c0       	mov    0xc01b3e54,%eax
c01097d4:	89 45 cc             	mov    %eax,-0x34(%ebp)
    nr_free = 0;
c01097d7:	c7 05 54 3e 1b c0 00 	movl   $0x0,0xc01b3e54
c01097de:	00 00 00 

    free_pages(p0 + 2, 3);
c01097e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01097e4:	83 c0 48             	add    $0x48,%eax
c01097e7:	83 ec 08             	sub    $0x8,%esp
c01097ea:	6a 03                	push   $0x3
c01097ec:	50                   	push   %eax
c01097ed:	e8 73 b3 ff ff       	call   c0104b65 <free_pages>
c01097f2:	83 c4 10             	add    $0x10,%esp
    assert(alloc_pages(4) == NULL);
c01097f5:	83 ec 0c             	sub    $0xc,%esp
c01097f8:	6a 04                	push   $0x4
c01097fa:	e8 fa b2 ff ff       	call   c0104af9 <alloc_pages>
c01097ff:	83 c4 10             	add    $0x10,%esp
c0109802:	85 c0                	test   %eax,%eax
c0109804:	74 19                	je     c010981f <default_check+0x211>
c0109806:	68 58 ee 10 c0       	push   $0xc010ee58
c010980b:	68 42 ec 10 c0       	push   $0xc010ec42
c0109810:	68 f8 00 00 00       	push   $0xf8
c0109815:	68 57 ec 10 c0       	push   $0xc010ec57
c010981a:	e8 42 7f ff ff       	call   c0101761 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c010981f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109822:	83 c0 48             	add    $0x48,%eax
c0109825:	83 c0 04             	add    $0x4,%eax
c0109828:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c010982f:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0109832:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0109835:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0109838:	0f a3 10             	bt     %edx,(%eax)
c010983b:	19 c0                	sbb    %eax,%eax
c010983d:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0109840:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0109844:	0f 95 c0             	setne  %al
c0109847:	0f b6 c0             	movzbl %al,%eax
c010984a:	85 c0                	test   %eax,%eax
c010984c:	74 0e                	je     c010985c <default_check+0x24e>
c010984e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109851:	83 c0 48             	add    $0x48,%eax
c0109854:	8b 40 08             	mov    0x8(%eax),%eax
c0109857:	83 f8 03             	cmp    $0x3,%eax
c010985a:	74 19                	je     c0109875 <default_check+0x267>
c010985c:	68 70 ee 10 c0       	push   $0xc010ee70
c0109861:	68 42 ec 10 c0       	push   $0xc010ec42
c0109866:	68 f9 00 00 00       	push   $0xf9
c010986b:	68 57 ec 10 c0       	push   $0xc010ec57
c0109870:	e8 ec 7e ff ff       	call   c0101761 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0109875:	83 ec 0c             	sub    $0xc,%esp
c0109878:	6a 03                	push   $0x3
c010987a:	e8 7a b2 ff ff       	call   c0104af9 <alloc_pages>
c010987f:	83 c4 10             	add    $0x10,%esp
c0109882:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0109885:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0109889:	75 19                	jne    c01098a4 <default_check+0x296>
c010988b:	68 9c ee 10 c0       	push   $0xc010ee9c
c0109890:	68 42 ec 10 c0       	push   $0xc010ec42
c0109895:	68 fa 00 00 00       	push   $0xfa
c010989a:	68 57 ec 10 c0       	push   $0xc010ec57
c010989f:	e8 bd 7e ff ff       	call   c0101761 <__panic>
    assert(alloc_page() == NULL);
c01098a4:	83 ec 0c             	sub    $0xc,%esp
c01098a7:	6a 01                	push   $0x1
c01098a9:	e8 4b b2 ff ff       	call   c0104af9 <alloc_pages>
c01098ae:	83 c4 10             	add    $0x10,%esp
c01098b1:	85 c0                	test   %eax,%eax
c01098b3:	74 19                	je     c01098ce <default_check+0x2c0>
c01098b5:	68 b2 ed 10 c0       	push   $0xc010edb2
c01098ba:	68 42 ec 10 c0       	push   $0xc010ec42
c01098bf:	68 fb 00 00 00       	push   $0xfb
c01098c4:	68 57 ec 10 c0       	push   $0xc010ec57
c01098c9:	e8 93 7e ff ff       	call   c0101761 <__panic>
    assert(p0 + 2 == p1);
c01098ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01098d1:	83 c0 48             	add    $0x48,%eax
c01098d4:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c01098d7:	74 19                	je     c01098f2 <default_check+0x2e4>
c01098d9:	68 ba ee 10 c0       	push   $0xc010eeba
c01098de:	68 42 ec 10 c0       	push   $0xc010ec42
c01098e3:	68 fc 00 00 00       	push   $0xfc
c01098e8:	68 57 ec 10 c0       	push   $0xc010ec57
c01098ed:	e8 6f 7e ff ff       	call   c0101761 <__panic>

    p2 = p0 + 1;
c01098f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01098f5:	83 c0 24             	add    $0x24,%eax
c01098f8:	89 45 c0             	mov    %eax,-0x40(%ebp)
    free_page(p0);
c01098fb:	83 ec 08             	sub    $0x8,%esp
c01098fe:	6a 01                	push   $0x1
c0109900:	ff 75 dc             	pushl  -0x24(%ebp)
c0109903:	e8 5d b2 ff ff       	call   c0104b65 <free_pages>
c0109908:	83 c4 10             	add    $0x10,%esp
    free_pages(p1, 3);
c010990b:	83 ec 08             	sub    $0x8,%esp
c010990e:	6a 03                	push   $0x3
c0109910:	ff 75 c4             	pushl  -0x3c(%ebp)
c0109913:	e8 4d b2 ff ff       	call   c0104b65 <free_pages>
c0109918:	83 c4 10             	add    $0x10,%esp
    assert(PageProperty(p0) && p0->property == 1);
c010991b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010991e:	83 c0 04             	add    $0x4,%eax
c0109921:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0109928:	89 45 94             	mov    %eax,-0x6c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010992b:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010992e:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0109931:	0f a3 10             	bt     %edx,(%eax)
c0109934:	19 c0                	sbb    %eax,%eax
c0109936:	89 45 90             	mov    %eax,-0x70(%ebp)
    return oldbit != 0;
c0109939:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
c010993d:	0f 95 c0             	setne  %al
c0109940:	0f b6 c0             	movzbl %al,%eax
c0109943:	85 c0                	test   %eax,%eax
c0109945:	74 0b                	je     c0109952 <default_check+0x344>
c0109947:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010994a:	8b 40 08             	mov    0x8(%eax),%eax
c010994d:	83 f8 01             	cmp    $0x1,%eax
c0109950:	74 19                	je     c010996b <default_check+0x35d>
c0109952:	68 c8 ee 10 c0       	push   $0xc010eec8
c0109957:	68 42 ec 10 c0       	push   $0xc010ec42
c010995c:	68 01 01 00 00       	push   $0x101
c0109961:	68 57 ec 10 c0       	push   $0xc010ec57
c0109966:	e8 f6 7d ff ff       	call   c0101761 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c010996b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010996e:	83 c0 04             	add    $0x4,%eax
c0109971:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
c0109978:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010997b:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010997e:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0109981:	0f a3 10             	bt     %edx,(%eax)
c0109984:	19 c0                	sbb    %eax,%eax
c0109986:	89 45 88             	mov    %eax,-0x78(%ebp)
    return oldbit != 0;
c0109989:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
c010998d:	0f 95 c0             	setne  %al
c0109990:	0f b6 c0             	movzbl %al,%eax
c0109993:	85 c0                	test   %eax,%eax
c0109995:	74 0b                	je     c01099a2 <default_check+0x394>
c0109997:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010999a:	8b 40 08             	mov    0x8(%eax),%eax
c010999d:	83 f8 03             	cmp    $0x3,%eax
c01099a0:	74 19                	je     c01099bb <default_check+0x3ad>
c01099a2:	68 f0 ee 10 c0       	push   $0xc010eef0
c01099a7:	68 42 ec 10 c0       	push   $0xc010ec42
c01099ac:	68 02 01 00 00       	push   $0x102
c01099b1:	68 57 ec 10 c0       	push   $0xc010ec57
c01099b6:	e8 a6 7d ff ff       	call   c0101761 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c01099bb:	83 ec 0c             	sub    $0xc,%esp
c01099be:	6a 01                	push   $0x1
c01099c0:	e8 34 b1 ff ff       	call   c0104af9 <alloc_pages>
c01099c5:	83 c4 10             	add    $0x10,%esp
c01099c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01099cb:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01099ce:	83 e8 24             	sub    $0x24,%eax
c01099d1:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c01099d4:	74 19                	je     c01099ef <default_check+0x3e1>
c01099d6:	68 16 ef 10 c0       	push   $0xc010ef16
c01099db:	68 42 ec 10 c0       	push   $0xc010ec42
c01099e0:	68 04 01 00 00       	push   $0x104
c01099e5:	68 57 ec 10 c0       	push   $0xc010ec57
c01099ea:	e8 72 7d ff ff       	call   c0101761 <__panic>
    free_page(p0);
c01099ef:	83 ec 08             	sub    $0x8,%esp
c01099f2:	6a 01                	push   $0x1
c01099f4:	ff 75 dc             	pushl  -0x24(%ebp)
c01099f7:	e8 69 b1 ff ff       	call   c0104b65 <free_pages>
c01099fc:	83 c4 10             	add    $0x10,%esp
    assert((p0 = alloc_pages(2)) == p2 + 1);
c01099ff:	83 ec 0c             	sub    $0xc,%esp
c0109a02:	6a 02                	push   $0x2
c0109a04:	e8 f0 b0 ff ff       	call   c0104af9 <alloc_pages>
c0109a09:	83 c4 10             	add    $0x10,%esp
c0109a0c:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0109a0f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109a12:	83 c0 24             	add    $0x24,%eax
c0109a15:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0109a18:	74 19                	je     c0109a33 <default_check+0x425>
c0109a1a:	68 34 ef 10 c0       	push   $0xc010ef34
c0109a1f:	68 42 ec 10 c0       	push   $0xc010ec42
c0109a24:	68 06 01 00 00       	push   $0x106
c0109a29:	68 57 ec 10 c0       	push   $0xc010ec57
c0109a2e:	e8 2e 7d ff ff       	call   c0101761 <__panic>

    free_pages(p0, 2);
c0109a33:	83 ec 08             	sub    $0x8,%esp
c0109a36:	6a 02                	push   $0x2
c0109a38:	ff 75 dc             	pushl  -0x24(%ebp)
c0109a3b:	e8 25 b1 ff ff       	call   c0104b65 <free_pages>
c0109a40:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0109a43:	83 ec 08             	sub    $0x8,%esp
c0109a46:	6a 01                	push   $0x1
c0109a48:	ff 75 c0             	pushl  -0x40(%ebp)
c0109a4b:	e8 15 b1 ff ff       	call   c0104b65 <free_pages>
c0109a50:	83 c4 10             	add    $0x10,%esp

    assert((p0 = alloc_pages(5)) != NULL);
c0109a53:	83 ec 0c             	sub    $0xc,%esp
c0109a56:	6a 05                	push   $0x5
c0109a58:	e8 9c b0 ff ff       	call   c0104af9 <alloc_pages>
c0109a5d:	83 c4 10             	add    $0x10,%esp
c0109a60:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0109a63:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0109a67:	75 19                	jne    c0109a82 <default_check+0x474>
c0109a69:	68 54 ef 10 c0       	push   $0xc010ef54
c0109a6e:	68 42 ec 10 c0       	push   $0xc010ec42
c0109a73:	68 0b 01 00 00       	push   $0x10b
c0109a78:	68 57 ec 10 c0       	push   $0xc010ec57
c0109a7d:	e8 df 7c ff ff       	call   c0101761 <__panic>
    assert(alloc_page() == NULL);
c0109a82:	83 ec 0c             	sub    $0xc,%esp
c0109a85:	6a 01                	push   $0x1
c0109a87:	e8 6d b0 ff ff       	call   c0104af9 <alloc_pages>
c0109a8c:	83 c4 10             	add    $0x10,%esp
c0109a8f:	85 c0                	test   %eax,%eax
c0109a91:	74 19                	je     c0109aac <default_check+0x49e>
c0109a93:	68 b2 ed 10 c0       	push   $0xc010edb2
c0109a98:	68 42 ec 10 c0       	push   $0xc010ec42
c0109a9d:	68 0c 01 00 00       	push   $0x10c
c0109aa2:	68 57 ec 10 c0       	push   $0xc010ec57
c0109aa7:	e8 b5 7c ff ff       	call   c0101761 <__panic>

    assert(nr_free == 0);
c0109aac:	a1 54 3e 1b c0       	mov    0xc01b3e54,%eax
c0109ab1:	85 c0                	test   %eax,%eax
c0109ab3:	74 19                	je     c0109ace <default_check+0x4c0>
c0109ab5:	68 05 ee 10 c0       	push   $0xc010ee05
c0109aba:	68 42 ec 10 c0       	push   $0xc010ec42
c0109abf:	68 0e 01 00 00       	push   $0x10e
c0109ac4:	68 57 ec 10 c0       	push   $0xc010ec57
c0109ac9:	e8 93 7c ff ff       	call   c0101761 <__panic>
    nr_free = nr_free_store;
c0109ace:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109ad1:	a3 54 3e 1b c0       	mov    %eax,0xc01b3e54

    free_list = free_list_store;
c0109ad6:	8b 45 80             	mov    -0x80(%ebp),%eax
c0109ad9:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0109adc:	a3 4c 3e 1b c0       	mov    %eax,0xc01b3e4c
c0109ae1:	89 15 50 3e 1b c0    	mov    %edx,0xc01b3e50
    free_pages(p0, 5);
c0109ae7:	83 ec 08             	sub    $0x8,%esp
c0109aea:	6a 05                	push   $0x5
c0109aec:	ff 75 dc             	pushl  -0x24(%ebp)
c0109aef:	e8 71 b0 ff ff       	call   c0104b65 <free_pages>
c0109af4:	83 c4 10             	add    $0x10,%esp

    le = &free_list;
c0109af7:	c7 45 ec 4c 3e 1b c0 	movl   $0xc01b3e4c,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0109afe:	eb 1d                	jmp    c0109b1d <default_check+0x50f>
        struct Page *p = le2page(le, page_link);
c0109b00:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b03:	83 e8 10             	sub    $0x10,%eax
c0109b06:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        count --, total -= p->property;
c0109b09:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0109b0d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109b10:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0109b13:	8b 40 08             	mov    0x8(%eax),%eax
c0109b16:	29 c2                	sub    %eax,%edx
c0109b18:	89 d0                	mov    %edx,%eax
c0109b1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109b1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b20:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109b23:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0109b26:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0109b29:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109b2c:	81 7d ec 4c 3e 1b c0 	cmpl   $0xc01b3e4c,-0x14(%ebp)
c0109b33:	75 cb                	jne    c0109b00 <default_check+0x4f2>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0109b35:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109b39:	74 19                	je     c0109b54 <default_check+0x546>
c0109b3b:	68 72 ef 10 c0       	push   $0xc010ef72
c0109b40:	68 42 ec 10 c0       	push   $0xc010ec42
c0109b45:	68 19 01 00 00       	push   $0x119
c0109b4a:	68 57 ec 10 c0       	push   $0xc010ec57
c0109b4f:	e8 0d 7c ff ff       	call   c0101761 <__panic>
    assert(total == 0);
c0109b54:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109b58:	74 19                	je     c0109b73 <default_check+0x565>
c0109b5a:	68 7d ef 10 c0       	push   $0xc010ef7d
c0109b5f:	68 42 ec 10 c0       	push   $0xc010ec42
c0109b64:	68 1a 01 00 00       	push   $0x11a
c0109b69:	68 57 ec 10 c0       	push   $0xc010ec57
c0109b6e:	e8 ee 7b ff ff       	call   c0101761 <__panic>
}
c0109b73:	90                   	nop
c0109b74:	c9                   	leave  
c0109b75:	c3                   	ret    

c0109b76 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0109b76:	55                   	push   %ebp
c0109b77:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0109b79:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b7c:	8b 15 64 3d 1b c0    	mov    0xc01b3d64,%edx
c0109b82:	29 d0                	sub    %edx,%eax
c0109b84:	c1 f8 02             	sar    $0x2,%eax
c0109b87:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0109b8d:	5d                   	pop    %ebp
c0109b8e:	c3                   	ret    

c0109b8f <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0109b8f:	55                   	push   %ebp
c0109b90:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0109b92:	ff 75 08             	pushl  0x8(%ebp)
c0109b95:	e8 dc ff ff ff       	call   c0109b76 <page2ppn>
c0109b9a:	83 c4 04             	add    $0x4,%esp
c0109b9d:	c1 e0 0c             	shl    $0xc,%eax
}
c0109ba0:	c9                   	leave  
c0109ba1:	c3                   	ret    

c0109ba2 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c0109ba2:	55                   	push   %ebp
c0109ba3:	89 e5                	mov    %esp,%ebp
c0109ba5:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0109ba8:	ff 75 08             	pushl  0x8(%ebp)
c0109bab:	e8 df ff ff ff       	call   c0109b8f <page2pa>
c0109bb0:	83 c4 04             	add    $0x4,%esp
c0109bb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109bb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bb9:	c1 e8 0c             	shr    $0xc,%eax
c0109bbc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109bbf:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c0109bc4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109bc7:	72 14                	jb     c0109bdd <page2kva+0x3b>
c0109bc9:	ff 75 f4             	pushl  -0xc(%ebp)
c0109bcc:	68 b8 ef 10 c0       	push   $0xc010efb8
c0109bd1:	6a 65                	push   $0x65
c0109bd3:	68 db ef 10 c0       	push   $0xc010efdb
c0109bd8:	e8 84 7b ff ff       	call   c0101761 <__panic>
c0109bdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109be0:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0109be5:	c9                   	leave  
c0109be6:	c3                   	ret    

c0109be7 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c0109be7:	55                   	push   %ebp
c0109be8:	89 e5                	mov    %esp,%ebp
c0109bea:	83 ec 08             	sub    $0x8,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c0109bed:	83 ec 0c             	sub    $0xc,%esp
c0109bf0:	6a 01                	push   $0x1
c0109bf2:	e8 2a 89 ff ff       	call   c0102521 <ide_device_valid>
c0109bf7:	83 c4 10             	add    $0x10,%esp
c0109bfa:	85 c0                	test   %eax,%eax
c0109bfc:	75 14                	jne    c0109c12 <swapfs_init+0x2b>
        panic("swap fs isn't available.\n");
c0109bfe:	83 ec 04             	sub    $0x4,%esp
c0109c01:	68 e9 ef 10 c0       	push   $0xc010efe9
c0109c06:	6a 0d                	push   $0xd
c0109c08:	68 03 f0 10 c0       	push   $0xc010f003
c0109c0d:	e8 4f 7b ff ff       	call   c0101761 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c0109c12:	83 ec 0c             	sub    $0xc,%esp
c0109c15:	6a 01                	push   $0x1
c0109c17:	e8 45 89 ff ff       	call   c0102561 <ide_device_size>
c0109c1c:	83 c4 10             	add    $0x10,%esp
c0109c1f:	c1 e8 03             	shr    $0x3,%eax
c0109c22:	a3 1c 3e 1b c0       	mov    %eax,0xc01b3e1c
}
c0109c27:	90                   	nop
c0109c28:	c9                   	leave  
c0109c29:	c3                   	ret    

c0109c2a <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c0109c2a:	55                   	push   %ebp
c0109c2b:	89 e5                	mov    %esp,%ebp
c0109c2d:	83 ec 18             	sub    $0x18,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0109c30:	83 ec 0c             	sub    $0xc,%esp
c0109c33:	ff 75 0c             	pushl  0xc(%ebp)
c0109c36:	e8 67 ff ff ff       	call   c0109ba2 <page2kva>
c0109c3b:	83 c4 10             	add    $0x10,%esp
c0109c3e:	89 c2                	mov    %eax,%edx
c0109c40:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c43:	c1 e8 08             	shr    $0x8,%eax
c0109c46:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109c49:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109c4d:	74 0a                	je     c0109c59 <swapfs_read+0x2f>
c0109c4f:	a1 1c 3e 1b c0       	mov    0xc01b3e1c,%eax
c0109c54:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109c57:	72 14                	jb     c0109c6d <swapfs_read+0x43>
c0109c59:	ff 75 08             	pushl  0x8(%ebp)
c0109c5c:	68 14 f0 10 c0       	push   $0xc010f014
c0109c61:	6a 14                	push   $0x14
c0109c63:	68 03 f0 10 c0       	push   $0xc010f003
c0109c68:	e8 f4 7a ff ff       	call   c0101761 <__panic>
c0109c6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c70:	c1 e0 03             	shl    $0x3,%eax
c0109c73:	6a 08                	push   $0x8
c0109c75:	52                   	push   %edx
c0109c76:	50                   	push   %eax
c0109c77:	6a 01                	push   $0x1
c0109c79:	e8 23 89 ff ff       	call   c01025a1 <ide_read_secs>
c0109c7e:	83 c4 10             	add    $0x10,%esp
}
c0109c81:	c9                   	leave  
c0109c82:	c3                   	ret    

c0109c83 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c0109c83:	55                   	push   %ebp
c0109c84:	89 e5                	mov    %esp,%ebp
c0109c86:	83 ec 18             	sub    $0x18,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0109c89:	83 ec 0c             	sub    $0xc,%esp
c0109c8c:	ff 75 0c             	pushl  0xc(%ebp)
c0109c8f:	e8 0e ff ff ff       	call   c0109ba2 <page2kva>
c0109c94:	83 c4 10             	add    $0x10,%esp
c0109c97:	89 c2                	mov    %eax,%edx
c0109c99:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c9c:	c1 e8 08             	shr    $0x8,%eax
c0109c9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109ca2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109ca6:	74 0a                	je     c0109cb2 <swapfs_write+0x2f>
c0109ca8:	a1 1c 3e 1b c0       	mov    0xc01b3e1c,%eax
c0109cad:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109cb0:	72 14                	jb     c0109cc6 <swapfs_write+0x43>
c0109cb2:	ff 75 08             	pushl  0x8(%ebp)
c0109cb5:	68 14 f0 10 c0       	push   $0xc010f014
c0109cba:	6a 19                	push   $0x19
c0109cbc:	68 03 f0 10 c0       	push   $0xc010f003
c0109cc1:	e8 9b 7a ff ff       	call   c0101761 <__panic>
c0109cc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cc9:	c1 e0 03             	shl    $0x3,%eax
c0109ccc:	6a 08                	push   $0x8
c0109cce:	52                   	push   %edx
c0109ccf:	50                   	push   %eax
c0109cd0:	6a 01                	push   $0x1
c0109cd2:	e8 f4 8a ff ff       	call   c01027cb <ide_write_secs>
c0109cd7:	83 c4 10             	add    $0x10,%esp
}
c0109cda:	c9                   	leave  
c0109cdb:	c3                   	ret    

c0109cdc <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c0109cdc:	52                   	push   %edx
    call *%ebx              # call fn
c0109cdd:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c0109cdf:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c0109ce0:	e8 b2 0c 00 00       	call   c010a997 <do_exit>

c0109ce5 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c0109ce5:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c0109ce9:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c0109ceb:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c0109cee:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c0109cf1:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c0109cf4:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c0109cf7:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c0109cfa:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c0109cfd:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c0109d00:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c0109d04:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c0109d07:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c0109d0a:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c0109d0d:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c0109d10:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c0109d13:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c0109d16:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c0109d19:	ff 30                	pushl  (%eax)

    ret
c0109d1b:	c3                   	ret    

c0109d1c <test_and_set_bit>:
 * test_and_set_bit - Atomically set a bit and return its old value
 * @nr:     the bit to set
 * @addr:   the address to count from
 * */
static inline bool
test_and_set_bit(int nr, volatile void *addr) {
c0109d1c:	55                   	push   %ebp
c0109d1d:	89 e5                	mov    %esp,%ebp
c0109d1f:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btsl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c0109d22:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109d25:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d28:	0f ab 02             	bts    %eax,(%edx)
c0109d2b:	19 c0                	sbb    %eax,%eax
c0109d2d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c0109d30:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0109d34:	0f 95 c0             	setne  %al
c0109d37:	0f b6 c0             	movzbl %al,%eax
}
c0109d3a:	c9                   	leave  
c0109d3b:	c3                   	ret    

c0109d3c <test_and_clear_bit>:
 * test_and_clear_bit - Atomically clear a bit and return its old value
 * @nr:     the bit to clear
 * @addr:   the address to count from
 * */
static inline bool
test_and_clear_bit(int nr, volatile void *addr) {
c0109d3c:	55                   	push   %ebp
c0109d3d:	89 e5                	mov    %esp,%ebp
c0109d3f:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btrl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c0109d42:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109d45:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d48:	0f b3 02             	btr    %eax,(%edx)
c0109d4b:	19 c0                	sbb    %eax,%eax
c0109d4d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c0109d50:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0109d54:	0f 95 c0             	setne  %al
c0109d57:	0f b6 c0             	movzbl %al,%eax
}
c0109d5a:	c9                   	leave  
c0109d5b:	c3                   	ret    

c0109d5c <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109d5c:	55                   	push   %ebp
c0109d5d:	89 e5                	mov    %esp,%ebp
c0109d5f:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109d62:	9c                   	pushf  
c0109d63:	58                   	pop    %eax
c0109d64:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109d67:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109d6a:	25 00 02 00 00       	and    $0x200,%eax
c0109d6f:	85 c0                	test   %eax,%eax
c0109d71:	74 0c                	je     c0109d7f <__intr_save+0x23>
        intr_disable();
c0109d73:	e8 8c 97 ff ff       	call   c0103504 <intr_disable>
        return 1;
c0109d78:	b8 01 00 00 00       	mov    $0x1,%eax
c0109d7d:	eb 05                	jmp    c0109d84 <__intr_save+0x28>
    }
    return 0;
c0109d7f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109d84:	c9                   	leave  
c0109d85:	c3                   	ret    

c0109d86 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109d86:	55                   	push   %ebp
c0109d87:	89 e5                	mov    %esp,%ebp
c0109d89:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109d8c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109d90:	74 05                	je     c0109d97 <__intr_restore+0x11>
        intr_enable();
c0109d92:	e8 66 97 ff ff       	call   c01034fd <intr_enable>
    }
}
c0109d97:	90                   	nop
c0109d98:	c9                   	leave  
c0109d99:	c3                   	ret    

c0109d9a <try_lock>:
lock_init(lock_t *lock) {
    *lock = 0;
}

static inline bool
try_lock(lock_t *lock) {
c0109d9a:	55                   	push   %ebp
c0109d9b:	89 e5                	mov    %esp,%ebp
    return !test_and_set_bit(0, lock);
c0109d9d:	ff 75 08             	pushl  0x8(%ebp)
c0109da0:	6a 00                	push   $0x0
c0109da2:	e8 75 ff ff ff       	call   c0109d1c <test_and_set_bit>
c0109da7:	83 c4 08             	add    $0x8,%esp
c0109daa:	85 c0                	test   %eax,%eax
c0109dac:	0f 94 c0             	sete   %al
c0109daf:	0f b6 c0             	movzbl %al,%eax
}
c0109db2:	c9                   	leave  
c0109db3:	c3                   	ret    

c0109db4 <lock>:

static inline void
lock(lock_t *lock) {
c0109db4:	55                   	push   %ebp
c0109db5:	89 e5                	mov    %esp,%ebp
c0109db7:	83 ec 08             	sub    $0x8,%esp
    while (!try_lock(lock)) {
c0109dba:	eb 05                	jmp    c0109dc1 <lock+0xd>
        schedule();
c0109dbc:	e8 3b 1d 00 00       	call   c010bafc <schedule>
    return !test_and_set_bit(0, lock);
}

static inline void
lock(lock_t *lock) {
    while (!try_lock(lock)) {
c0109dc1:	83 ec 0c             	sub    $0xc,%esp
c0109dc4:	ff 75 08             	pushl  0x8(%ebp)
c0109dc7:	e8 ce ff ff ff       	call   c0109d9a <try_lock>
c0109dcc:	83 c4 10             	add    $0x10,%esp
c0109dcf:	85 c0                	test   %eax,%eax
c0109dd1:	74 e9                	je     c0109dbc <lock+0x8>
        schedule();
    }
}
c0109dd3:	90                   	nop
c0109dd4:	c9                   	leave  
c0109dd5:	c3                   	ret    

c0109dd6 <unlock>:

static inline void
unlock(lock_t *lock) {
c0109dd6:	55                   	push   %ebp
c0109dd7:	89 e5                	mov    %esp,%ebp
c0109dd9:	83 ec 08             	sub    $0x8,%esp
    if (!test_and_clear_bit(0, lock)) {
c0109ddc:	ff 75 08             	pushl  0x8(%ebp)
c0109ddf:	6a 00                	push   $0x0
c0109de1:	e8 56 ff ff ff       	call   c0109d3c <test_and_clear_bit>
c0109de6:	83 c4 08             	add    $0x8,%esp
c0109de9:	85 c0                	test   %eax,%eax
c0109deb:	75 14                	jne    c0109e01 <unlock+0x2b>
        panic("Unlock failed.\n");
c0109ded:	83 ec 04             	sub    $0x4,%esp
c0109df0:	68 34 f0 10 c0       	push   $0xc010f034
c0109df5:	6a 34                	push   $0x34
c0109df7:	68 44 f0 10 c0       	push   $0xc010f044
c0109dfc:	e8 60 79 ff ff       	call   c0101761 <__panic>
    }
}
c0109e01:	90                   	nop
c0109e02:	c9                   	leave  
c0109e03:	c3                   	ret    

c0109e04 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0109e04:	55                   	push   %ebp
c0109e05:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0109e07:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e0a:	8b 15 64 3d 1b c0    	mov    0xc01b3d64,%edx
c0109e10:	29 d0                	sub    %edx,%eax
c0109e12:	c1 f8 02             	sar    $0x2,%eax
c0109e15:	69 c0 39 8e e3 38    	imul   $0x38e38e39,%eax,%eax
}
c0109e1b:	5d                   	pop    %ebp
c0109e1c:	c3                   	ret    

c0109e1d <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0109e1d:	55                   	push   %ebp
c0109e1e:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0109e20:	ff 75 08             	pushl  0x8(%ebp)
c0109e23:	e8 dc ff ff ff       	call   c0109e04 <page2ppn>
c0109e28:	83 c4 04             	add    $0x4,%esp
c0109e2b:	c1 e0 0c             	shl    $0xc,%eax
}
c0109e2e:	c9                   	leave  
c0109e2f:	c3                   	ret    

c0109e30 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0109e30:	55                   	push   %ebp
c0109e31:	89 e5                	mov    %esp,%ebp
c0109e33:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0109e36:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e39:	c1 e8 0c             	shr    $0xc,%eax
c0109e3c:	89 c2                	mov    %eax,%edx
c0109e3e:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c0109e43:	39 c2                	cmp    %eax,%edx
c0109e45:	72 14                	jb     c0109e5b <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0109e47:	83 ec 04             	sub    $0x4,%esp
c0109e4a:	68 58 f0 10 c0       	push   $0xc010f058
c0109e4f:	6a 5e                	push   $0x5e
c0109e51:	68 77 f0 10 c0       	push   $0xc010f077
c0109e56:	e8 06 79 ff ff       	call   c0101761 <__panic>
    }
    return &pages[PPN(pa)];
c0109e5b:	8b 0d 64 3d 1b c0    	mov    0xc01b3d64,%ecx
c0109e61:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e64:	c1 e8 0c             	shr    $0xc,%eax
c0109e67:	89 c2                	mov    %eax,%edx
c0109e69:	89 d0                	mov    %edx,%eax
c0109e6b:	c1 e0 03             	shl    $0x3,%eax
c0109e6e:	01 d0                	add    %edx,%eax
c0109e70:	c1 e0 02             	shl    $0x2,%eax
c0109e73:	01 c8                	add    %ecx,%eax
}
c0109e75:	c9                   	leave  
c0109e76:	c3                   	ret    

c0109e77 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0109e77:	55                   	push   %ebp
c0109e78:	89 e5                	mov    %esp,%ebp
c0109e7a:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0109e7d:	ff 75 08             	pushl  0x8(%ebp)
c0109e80:	e8 98 ff ff ff       	call   c0109e1d <page2pa>
c0109e85:	83 c4 04             	add    $0x4,%esp
c0109e88:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109e8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e8e:	c1 e8 0c             	shr    $0xc,%eax
c0109e91:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109e94:	a1 60 1c 1b c0       	mov    0xc01b1c60,%eax
c0109e99:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109e9c:	72 14                	jb     c0109eb2 <page2kva+0x3b>
c0109e9e:	ff 75 f4             	pushl  -0xc(%ebp)
c0109ea1:	68 88 f0 10 c0       	push   $0xc010f088
c0109ea6:	6a 65                	push   $0x65
c0109ea8:	68 77 f0 10 c0       	push   $0xc010f077
c0109ead:	e8 af 78 ff ff       	call   c0101761 <__panic>
c0109eb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109eb5:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0109eba:	c9                   	leave  
c0109ebb:	c3                   	ret    

c0109ebc <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0109ebc:	55                   	push   %ebp
c0109ebd:	89 e5                	mov    %esp,%ebp
c0109ebf:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c0109ec2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ec5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109ec8:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0109ecf:	77 14                	ja     c0109ee5 <kva2page+0x29>
c0109ed1:	ff 75 f4             	pushl  -0xc(%ebp)
c0109ed4:	68 ac f0 10 c0       	push   $0xc010f0ac
c0109ed9:	6a 6a                	push   $0x6a
c0109edb:	68 77 f0 10 c0       	push   $0xc010f077
c0109ee0:	e8 7c 78 ff ff       	call   c0101761 <__panic>
c0109ee5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ee8:	05 00 00 00 40       	add    $0x40000000,%eax
c0109eed:	83 ec 0c             	sub    $0xc,%esp
c0109ef0:	50                   	push   %eax
c0109ef1:	e8 3a ff ff ff       	call   c0109e30 <pa2page>
c0109ef6:	83 c4 10             	add    $0x10,%esp
}
c0109ef9:	c9                   	leave  
c0109efa:	c3                   	ret    

c0109efb <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c0109efb:	55                   	push   %ebp
c0109efc:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c0109efe:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f01:	8b 40 18             	mov    0x18(%eax),%eax
c0109f04:	8d 50 01             	lea    0x1(%eax),%edx
c0109f07:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f0a:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c0109f0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f10:	8b 40 18             	mov    0x18(%eax),%eax
}
c0109f13:	5d                   	pop    %ebp
c0109f14:	c3                   	ret    

c0109f15 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c0109f15:	55                   	push   %ebp
c0109f16:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c0109f18:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f1b:	8b 40 18             	mov    0x18(%eax),%eax
c0109f1e:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109f21:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f24:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c0109f27:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f2a:	8b 40 18             	mov    0x18(%eax),%eax
}
c0109f2d:	5d                   	pop    %ebp
c0109f2e:	c3                   	ret    

c0109f2f <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c0109f2f:	55                   	push   %ebp
c0109f30:	89 e5                	mov    %esp,%ebp
c0109f32:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c0109f35:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109f39:	74 12                	je     c0109f4d <lock_mm+0x1e>
        lock(&(mm->mm_lock));
c0109f3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f3e:	83 c0 1c             	add    $0x1c,%eax
c0109f41:	83 ec 0c             	sub    $0xc,%esp
c0109f44:	50                   	push   %eax
c0109f45:	e8 6a fe ff ff       	call   c0109db4 <lock>
c0109f4a:	83 c4 10             	add    $0x10,%esp
    }
}
c0109f4d:	90                   	nop
c0109f4e:	c9                   	leave  
c0109f4f:	c3                   	ret    

c0109f50 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c0109f50:	55                   	push   %ebp
c0109f51:	89 e5                	mov    %esp,%ebp
c0109f53:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c0109f56:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109f5a:	74 12                	je     c0109f6e <unlock_mm+0x1e>
        unlock(&(mm->mm_lock));
c0109f5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f5f:	83 c0 1c             	add    $0x1c,%eax
c0109f62:	83 ec 0c             	sub    $0xc,%esp
c0109f65:	50                   	push   %eax
c0109f66:	e8 6b fe ff ff       	call   c0109dd6 <unlock>
c0109f6b:	83 c4 10             	add    $0x10,%esp
    }
}
c0109f6e:	90                   	nop
c0109f6f:	c9                   	leave  
c0109f70:	c3                   	ret    

c0109f71 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c0109f71:	55                   	push   %ebp
c0109f72:	89 e5                	mov    %esp,%ebp
c0109f74:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c0109f77:	83 ec 0c             	sub    $0xc,%esp
c0109f7a:	68 a0 00 00 00       	push   $0xa0
c0109f7f:	e8 f1 e6 ff ff       	call   c0108675 <kmalloc>
c0109f84:	83 c4 10             	add    $0x10,%esp
c0109f87:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c0109f8a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109f8e:	0f 84 3c 01 00 00    	je     c010a0d0 <alloc_proc+0x15f>
     *       struct trapframe *tf;                       // Trap frame for current interrupt
     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
     *       uint32_t flags;                             // Process flag
     *       char name[PROC_NAME_LEN + 1];               // Process name
     */
        proc->state = PROC_UNINIT;
c0109f94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f97:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c0109f9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fa0:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c0109fa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109faa:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c0109fb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fb4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c0109fbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fbe:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c0109fc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fc8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c0109fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fd2:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c0109fd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fdc:	83 c0 1c             	add    $0x1c,%eax
c0109fdf:	83 ec 04             	sub    $0x4,%esp
c0109fe2:	6a 20                	push   $0x20
c0109fe4:	6a 00                	push   $0x0
c0109fe6:	50                   	push   %eax
c0109fe7:	e8 04 25 00 00       	call   c010c4f0 <memset>
c0109fec:	83 c4 10             	add    $0x10,%esp
        proc->tf = NULL;
c0109fef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ff2:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c0109ff9:	8b 15 60 3d 1b c0    	mov    0xc01b3d60,%edx
c0109fff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a002:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c010a005:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a008:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c010a00f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a012:	83 c0 48             	add    $0x48,%eax
c010a015:	83 ec 04             	sub    $0x4,%esp
c010a018:	6a 0f                	push   $0xf
c010a01a:	6a 00                	push   $0x0
c010a01c:	50                   	push   %eax
c010a01d:	e8 ce 24 00 00       	call   c010c4f0 <memset>
c010a022:	83 c4 10             	add    $0x10,%esp
        proc->wait_state = 0;
c010a025:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a028:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
        proc->cptr = proc->optr = proc->yptr = NULL;
c010a02f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a032:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
c010a039:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a03c:	8b 50 74             	mov    0x74(%eax),%edx
c010a03f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a042:	89 50 78             	mov    %edx,0x78(%eax)
c010a045:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a048:	8b 50 78             	mov    0x78(%eax),%edx
c010a04b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a04e:	89 50 70             	mov    %edx,0x70(%eax)
        proc->rq = NULL;
c010a051:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a054:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
        list_init(&(proc->run_link));
c010a05b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a05e:	83 e8 80             	sub    $0xffffff80,%eax
c010a061:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010a064:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a067:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a06a:	89 50 04             	mov    %edx,0x4(%eax)
c010a06d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a070:	8b 50 04             	mov    0x4(%eax),%edx
c010a073:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a076:	89 10                	mov    %edx,(%eax)
        proc->time_slice = 0;
c010a078:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a07b:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%eax)
c010a082:	00 00 00 
        proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
c010a085:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a088:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%eax)
c010a08f:	00 00 00 
c010a092:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a095:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010a09b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a09e:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
c010a0a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0a7:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010a0ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0b0:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
        proc->lab6_stride = 0;
c010a0b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0b9:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010a0c0:	00 00 00 
        proc->lab6_priority = 0;
c010a0c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0c6:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
c010a0cd:	00 00 00 
    }
    return proc;
c010a0d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a0d3:	c9                   	leave  
c010a0d4:	c3                   	ret    

c010a0d5 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010a0d5:	55                   	push   %ebp
c010a0d6:	89 e5                	mov    %esp,%ebp
c010a0d8:	83 ec 08             	sub    $0x8,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010a0db:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0de:	83 c0 48             	add    $0x48,%eax
c010a0e1:	83 ec 04             	sub    $0x4,%esp
c010a0e4:	6a 10                	push   $0x10
c010a0e6:	6a 00                	push   $0x0
c010a0e8:	50                   	push   %eax
c010a0e9:	e8 02 24 00 00       	call   c010c4f0 <memset>
c010a0ee:	83 c4 10             	add    $0x10,%esp
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010a0f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0f4:	83 c0 48             	add    $0x48,%eax
c010a0f7:	83 ec 04             	sub    $0x4,%esp
c010a0fa:	6a 0f                	push   $0xf
c010a0fc:	ff 75 0c             	pushl  0xc(%ebp)
c010a0ff:	50                   	push   %eax
c010a100:	e8 ce 24 00 00       	call   c010c5d3 <memcpy>
c010a105:	83 c4 10             	add    $0x10,%esp
}
c010a108:	c9                   	leave  
c010a109:	c3                   	ret    

c010a10a <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010a10a:	55                   	push   %ebp
c010a10b:	89 e5                	mov    %esp,%ebp
c010a10d:	83 ec 08             	sub    $0x8,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010a110:	83 ec 04             	sub    $0x4,%esp
c010a113:	6a 10                	push   $0x10
c010a115:	6a 00                	push   $0x0
c010a117:	68 24 3d 1b c0       	push   $0xc01b3d24
c010a11c:	e8 cf 23 00 00       	call   c010c4f0 <memset>
c010a121:	83 c4 10             	add    $0x10,%esp
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010a124:	8b 45 08             	mov    0x8(%ebp),%eax
c010a127:	83 c0 48             	add    $0x48,%eax
c010a12a:	83 ec 04             	sub    $0x4,%esp
c010a12d:	6a 0f                	push   $0xf
c010a12f:	50                   	push   %eax
c010a130:	68 24 3d 1b c0       	push   $0xc01b3d24
c010a135:	e8 99 24 00 00       	call   c010c5d3 <memcpy>
c010a13a:	83 c4 10             	add    $0x10,%esp
}
c010a13d:	c9                   	leave  
c010a13e:	c3                   	ret    

c010a13f <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010a13f:	55                   	push   %ebp
c010a140:	89 e5                	mov    %esp,%ebp
c010a142:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010a145:	8b 45 08             	mov    0x8(%ebp),%eax
c010a148:	83 c0 58             	add    $0x58,%eax
c010a14b:	c7 45 fc 58 3e 1b c0 	movl   $0xc01b3e58,-0x4(%ebp)
c010a152:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010a155:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a158:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a15b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a15e:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010a161:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a164:	8b 40 04             	mov    0x4(%eax),%eax
c010a167:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a16a:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010a16d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a170:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010a173:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010a176:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a179:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a17c:	89 10                	mov    %edx,(%eax)
c010a17e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a181:	8b 10                	mov    (%eax),%edx
c010a183:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a186:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a189:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a18c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a18f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a192:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a195:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a198:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010a19a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a19d:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010a1a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1a7:	8b 40 14             	mov    0x14(%eax),%eax
c010a1aa:	8b 50 70             	mov    0x70(%eax),%edx
c010a1ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1b0:	89 50 78             	mov    %edx,0x78(%eax)
c010a1b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1b6:	8b 40 78             	mov    0x78(%eax),%eax
c010a1b9:	85 c0                	test   %eax,%eax
c010a1bb:	74 0c                	je     c010a1c9 <set_links+0x8a>
        proc->optr->yptr = proc;
c010a1bd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1c0:	8b 40 78             	mov    0x78(%eax),%eax
c010a1c3:	8b 55 08             	mov    0x8(%ebp),%edx
c010a1c6:	89 50 74             	mov    %edx,0x74(%eax)
    }
    proc->parent->cptr = proc;
c010a1c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1cc:	8b 40 14             	mov    0x14(%eax),%eax
c010a1cf:	8b 55 08             	mov    0x8(%ebp),%edx
c010a1d2:	89 50 70             	mov    %edx,0x70(%eax)
    nr_process ++;
c010a1d5:	a1 20 3d 1b c0       	mov    0xc01b3d20,%eax
c010a1da:	83 c0 01             	add    $0x1,%eax
c010a1dd:	a3 20 3d 1b c0       	mov    %eax,0xc01b3d20
}
c010a1e2:	90                   	nop
c010a1e3:	c9                   	leave  
c010a1e4:	c3                   	ret    

c010a1e5 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010a1e5:	55                   	push   %ebp
c010a1e6:	89 e5                	mov    %esp,%ebp
c010a1e8:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010a1eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1ee:	83 c0 58             	add    $0x58,%eax
c010a1f1:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010a1f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a1f7:	8b 40 04             	mov    0x4(%eax),%eax
c010a1fa:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a1fd:	8b 12                	mov    (%edx),%edx
c010a1ff:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010a202:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010a205:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a208:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a20b:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a20e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a211:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010a214:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010a216:	8b 45 08             	mov    0x8(%ebp),%eax
c010a219:	8b 40 78             	mov    0x78(%eax),%eax
c010a21c:	85 c0                	test   %eax,%eax
c010a21e:	74 0f                	je     c010a22f <remove_links+0x4a>
        proc->optr->yptr = proc->yptr;
c010a220:	8b 45 08             	mov    0x8(%ebp),%eax
c010a223:	8b 40 78             	mov    0x78(%eax),%eax
c010a226:	8b 55 08             	mov    0x8(%ebp),%edx
c010a229:	8b 52 74             	mov    0x74(%edx),%edx
c010a22c:	89 50 74             	mov    %edx,0x74(%eax)
    }
    if (proc->yptr != NULL) {
c010a22f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a232:	8b 40 74             	mov    0x74(%eax),%eax
c010a235:	85 c0                	test   %eax,%eax
c010a237:	74 11                	je     c010a24a <remove_links+0x65>
        proc->yptr->optr = proc->optr;
c010a239:	8b 45 08             	mov    0x8(%ebp),%eax
c010a23c:	8b 40 74             	mov    0x74(%eax),%eax
c010a23f:	8b 55 08             	mov    0x8(%ebp),%edx
c010a242:	8b 52 78             	mov    0x78(%edx),%edx
c010a245:	89 50 78             	mov    %edx,0x78(%eax)
c010a248:	eb 0f                	jmp    c010a259 <remove_links+0x74>
    }
    else {
       proc->parent->cptr = proc->optr;
c010a24a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a24d:	8b 40 14             	mov    0x14(%eax),%eax
c010a250:	8b 55 08             	mov    0x8(%ebp),%edx
c010a253:	8b 52 78             	mov    0x78(%edx),%edx
c010a256:	89 50 70             	mov    %edx,0x70(%eax)
    }
    nr_process --;
c010a259:	a1 20 3d 1b c0       	mov    0xc01b3d20,%eax
c010a25e:	83 e8 01             	sub    $0x1,%eax
c010a261:	a3 20 3d 1b c0       	mov    %eax,0xc01b3d20
}
c010a266:	90                   	nop
c010a267:	c9                   	leave  
c010a268:	c3                   	ret    

c010a269 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010a269:	55                   	push   %ebp
c010a26a:	89 e5                	mov    %esp,%ebp
c010a26c:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010a26f:	c7 45 f8 58 3e 1b c0 	movl   $0xc01b3e58,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010a276:	a1 80 fa 12 c0       	mov    0xc012fa80,%eax
c010a27b:	83 c0 01             	add    $0x1,%eax
c010a27e:	a3 80 fa 12 c0       	mov    %eax,0xc012fa80
c010a283:	a1 80 fa 12 c0       	mov    0xc012fa80,%eax
c010a288:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010a28d:	7e 0c                	jle    c010a29b <get_pid+0x32>
        last_pid = 1;
c010a28f:	c7 05 80 fa 12 c0 01 	movl   $0x1,0xc012fa80
c010a296:	00 00 00 
        goto inside;
c010a299:	eb 13                	jmp    c010a2ae <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010a29b:	8b 15 80 fa 12 c0    	mov    0xc012fa80,%edx
c010a2a1:	a1 84 fa 12 c0       	mov    0xc012fa84,%eax
c010a2a6:	39 c2                	cmp    %eax,%edx
c010a2a8:	0f 8c ac 00 00 00    	jl     c010a35a <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010a2ae:	c7 05 84 fa 12 c0 00 	movl   $0x2000,0xc012fa84
c010a2b5:	20 00 00 
    repeat:
        le = list;
c010a2b8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a2bb:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010a2be:	eb 7f                	jmp    c010a33f <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010a2c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a2c3:	83 e8 58             	sub    $0x58,%eax
c010a2c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010a2c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2cc:	8b 50 04             	mov    0x4(%eax),%edx
c010a2cf:	a1 80 fa 12 c0       	mov    0xc012fa80,%eax
c010a2d4:	39 c2                	cmp    %eax,%edx
c010a2d6:	75 3e                	jne    c010a316 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010a2d8:	a1 80 fa 12 c0       	mov    0xc012fa80,%eax
c010a2dd:	83 c0 01             	add    $0x1,%eax
c010a2e0:	a3 80 fa 12 c0       	mov    %eax,0xc012fa80
c010a2e5:	8b 15 80 fa 12 c0    	mov    0xc012fa80,%edx
c010a2eb:	a1 84 fa 12 c0       	mov    0xc012fa84,%eax
c010a2f0:	39 c2                	cmp    %eax,%edx
c010a2f2:	7c 4b                	jl     c010a33f <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010a2f4:	a1 80 fa 12 c0       	mov    0xc012fa80,%eax
c010a2f9:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010a2fe:	7e 0a                	jle    c010a30a <get_pid+0xa1>
                        last_pid = 1;
c010a300:	c7 05 80 fa 12 c0 01 	movl   $0x1,0xc012fa80
c010a307:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010a30a:	c7 05 84 fa 12 c0 00 	movl   $0x2000,0xc012fa84
c010a311:	20 00 00 
                    goto repeat;
c010a314:	eb a2                	jmp    c010a2b8 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010a316:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a319:	8b 50 04             	mov    0x4(%eax),%edx
c010a31c:	a1 80 fa 12 c0       	mov    0xc012fa80,%eax
c010a321:	39 c2                	cmp    %eax,%edx
c010a323:	7e 1a                	jle    c010a33f <get_pid+0xd6>
c010a325:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a328:	8b 50 04             	mov    0x4(%eax),%edx
c010a32b:	a1 84 fa 12 c0       	mov    0xc012fa84,%eax
c010a330:	39 c2                	cmp    %eax,%edx
c010a332:	7d 0b                	jge    c010a33f <get_pid+0xd6>
                next_safe = proc->pid;
c010a334:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a337:	8b 40 04             	mov    0x4(%eax),%eax
c010a33a:	a3 84 fa 12 c0       	mov    %eax,0xc012fa84
c010a33f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a342:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a345:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a348:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010a34b:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a34e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a351:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010a354:	0f 85 66 ff ff ff    	jne    c010a2c0 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010a35a:	a1 80 fa 12 c0       	mov    0xc012fa80,%eax
}
c010a35f:	c9                   	leave  
c010a360:	c3                   	ret    

c010a361 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010a361:	55                   	push   %ebp
c010a362:	89 e5                	mov    %esp,%ebp
c010a364:	83 ec 18             	sub    $0x18,%esp
    if (proc != current) {
c010a367:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010a36c:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a36f:	74 6b                	je     c010a3dc <proc_run+0x7b>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010a371:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010a376:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a379:	8b 45 08             	mov    0x8(%ebp),%eax
c010a37c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010a37f:	e8 d8 f9 ff ff       	call   c0109d5c <__intr_save>
c010a384:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010a387:	8b 45 08             	mov    0x8(%ebp),%eax
c010a38a:	a3 08 1d 1b c0       	mov    %eax,0xc01b1d08
            load_esp0(next->kstack + KSTACKSIZE);
c010a38f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a392:	8b 40 0c             	mov    0xc(%eax),%eax
c010a395:	05 00 20 00 00       	add    $0x2000,%eax
c010a39a:	83 ec 0c             	sub    $0xc,%esp
c010a39d:	50                   	push   %eax
c010a39e:	e8 02 a6 ff ff       	call   c01049a5 <load_esp0>
c010a3a3:	83 c4 10             	add    $0x10,%esp
            lcr3(next->cr3);
c010a3a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a3a9:	8b 40 40             	mov    0x40(%eax),%eax
c010a3ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010a3af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a3b2:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010a3b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a3b8:	8d 50 1c             	lea    0x1c(%eax),%edx
c010a3bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3be:	83 c0 1c             	add    $0x1c,%eax
c010a3c1:	83 ec 08             	sub    $0x8,%esp
c010a3c4:	52                   	push   %edx
c010a3c5:	50                   	push   %eax
c010a3c6:	e8 1a f9 ff ff       	call   c0109ce5 <switch_to>
c010a3cb:	83 c4 10             	add    $0x10,%esp
        }
        local_intr_restore(intr_flag);
c010a3ce:	83 ec 0c             	sub    $0xc,%esp
c010a3d1:	ff 75 ec             	pushl  -0x14(%ebp)
c010a3d4:	e8 ad f9 ff ff       	call   c0109d86 <__intr_restore>
c010a3d9:	83 c4 10             	add    $0x10,%esp
    }
}
c010a3dc:	90                   	nop
c010a3dd:	c9                   	leave  
c010a3de:	c3                   	ret    

c010a3df <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010a3df:	55                   	push   %ebp
c010a3e0:	89 e5                	mov    %esp,%ebp
c010a3e2:	83 ec 08             	sub    $0x8,%esp
    forkrets(current->tf);
c010a3e5:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010a3ea:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a3ed:	83 ec 0c             	sub    $0xc,%esp
c010a3f0:	50                   	push   %eax
c010a3f1:	e8 de a3 ff ff       	call   c01047d4 <forkrets>
c010a3f6:	83 c4 10             	add    $0x10,%esp
}
c010a3f9:	90                   	nop
c010a3fa:	c9                   	leave  
c010a3fb:	c3                   	ret    

c010a3fc <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010a3fc:	55                   	push   %ebp
c010a3fd:	89 e5                	mov    %esp,%ebp
c010a3ff:	53                   	push   %ebx
c010a400:	83 ec 24             	sub    $0x24,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010a403:	8b 45 08             	mov    0x8(%ebp),%eax
c010a406:	8d 58 60             	lea    0x60(%eax),%ebx
c010a409:	8b 45 08             	mov    0x8(%ebp),%eax
c010a40c:	8b 40 04             	mov    0x4(%eax),%eax
c010a40f:	83 ec 08             	sub    $0x8,%esp
c010a412:	6a 0a                	push   $0xa
c010a414:	50                   	push   %eax
c010a415:	e8 6d 28 00 00       	call   c010cc87 <hash32>
c010a41a:	83 c4 10             	add    $0x10,%esp
c010a41d:	c1 e0 03             	shl    $0x3,%eax
c010a420:	05 20 1d 1b c0       	add    $0xc01b1d20,%eax
c010a425:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a428:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010a42b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a42e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a431:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a434:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010a437:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a43a:	8b 40 04             	mov    0x4(%eax),%eax
c010a43d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a440:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010a443:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a446:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010a449:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010a44c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a44f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a452:	89 10                	mov    %edx,(%eax)
c010a454:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a457:	8b 10                	mov    (%eax),%edx
c010a459:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a45c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a45f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a462:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a465:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a468:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a46b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a46e:	89 10                	mov    %edx,(%eax)
}
c010a470:	90                   	nop
c010a471:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010a474:	c9                   	leave  
c010a475:	c3                   	ret    

c010a476 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010a476:	55                   	push   %ebp
c010a477:	89 e5                	mov    %esp,%ebp
c010a479:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010a47c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a47f:	83 c0 60             	add    $0x60,%eax
c010a482:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010a485:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a488:	8b 40 04             	mov    0x4(%eax),%eax
c010a48b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a48e:	8b 12                	mov    (%edx),%edx
c010a490:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010a493:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010a496:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a499:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a49c:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a49f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4a2:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010a4a5:	89 10                	mov    %edx,(%eax)
}
c010a4a7:	90                   	nop
c010a4a8:	c9                   	leave  
c010a4a9:	c3                   	ret    

c010a4aa <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010a4aa:	55                   	push   %ebp
c010a4ab:	89 e5                	mov    %esp,%ebp
c010a4ad:	83 ec 18             	sub    $0x18,%esp
    if (0 < pid && pid < MAX_PID) {
c010a4b0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a4b4:	7e 5d                	jle    c010a513 <find_proc+0x69>
c010a4b6:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010a4bd:	7f 54                	jg     c010a513 <find_proc+0x69>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010a4bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4c2:	83 ec 08             	sub    $0x8,%esp
c010a4c5:	6a 0a                	push   $0xa
c010a4c7:	50                   	push   %eax
c010a4c8:	e8 ba 27 00 00       	call   c010cc87 <hash32>
c010a4cd:	83 c4 10             	add    $0x10,%esp
c010a4d0:	c1 e0 03             	shl    $0x3,%eax
c010a4d3:	05 20 1d 1b c0       	add    $0xc01b1d20,%eax
c010a4d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a4db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4de:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010a4e1:	eb 19                	jmp    c010a4fc <find_proc+0x52>
            struct proc_struct *proc = le2proc(le, hash_link);
c010a4e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4e6:	83 e8 60             	sub    $0x60,%eax
c010a4e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010a4ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a4ef:	8b 40 04             	mov    0x4(%eax),%eax
c010a4f2:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a4f5:	75 05                	jne    c010a4fc <find_proc+0x52>
                return proc;
c010a4f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a4fa:	eb 1c                	jmp    c010a518 <find_proc+0x6e>
c010a4fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4ff:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a502:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a505:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010a508:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a50b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a50e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010a511:	75 d0                	jne    c010a4e3 <find_proc+0x39>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010a513:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a518:	c9                   	leave  
c010a519:	c3                   	ret    

c010a51a <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010a51a:	55                   	push   %ebp
c010a51b:	89 e5                	mov    %esp,%ebp
c010a51d:	83 ec 58             	sub    $0x58,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010a520:	83 ec 04             	sub    $0x4,%esp
c010a523:	6a 4c                	push   $0x4c
c010a525:	6a 00                	push   $0x0
c010a527:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010a52a:	50                   	push   %eax
c010a52b:	e8 c0 1f 00 00       	call   c010c4f0 <memset>
c010a530:	83 c4 10             	add    $0x10,%esp
    tf.tf_cs = KERNEL_CS;
c010a533:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010a539:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010a53f:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010a543:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010a547:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010a54b:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010a54f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a552:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010a555:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a558:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010a55b:	b8 dc 9c 10 c0       	mov    $0xc0109cdc,%eax
c010a560:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010a563:	8b 45 10             	mov    0x10(%ebp),%eax
c010a566:	80 cc 01             	or     $0x1,%ah
c010a569:	89 c2                	mov    %eax,%edx
c010a56b:	83 ec 04             	sub    $0x4,%esp
c010a56e:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010a571:	50                   	push   %eax
c010a572:	6a 00                	push   $0x0
c010a574:	52                   	push   %edx
c010a575:	e8 f2 02 00 00       	call   c010a86c <do_fork>
c010a57a:	83 c4 10             	add    $0x10,%esp
}
c010a57d:	c9                   	leave  
c010a57e:	c3                   	ret    

c010a57f <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010a57f:	55                   	push   %ebp
c010a580:	89 e5                	mov    %esp,%ebp
c010a582:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010a585:	83 ec 0c             	sub    $0xc,%esp
c010a588:	6a 02                	push   $0x2
c010a58a:	e8 6a a5 ff ff       	call   c0104af9 <alloc_pages>
c010a58f:	83 c4 10             	add    $0x10,%esp
c010a592:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010a595:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a599:	74 1d                	je     c010a5b8 <setup_kstack+0x39>
        proc->kstack = (uintptr_t)page2kva(page);
c010a59b:	83 ec 0c             	sub    $0xc,%esp
c010a59e:	ff 75 f4             	pushl  -0xc(%ebp)
c010a5a1:	e8 d1 f8 ff ff       	call   c0109e77 <page2kva>
c010a5a6:	83 c4 10             	add    $0x10,%esp
c010a5a9:	89 c2                	mov    %eax,%edx
c010a5ab:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5ae:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010a5b1:	b8 00 00 00 00       	mov    $0x0,%eax
c010a5b6:	eb 05                	jmp    c010a5bd <setup_kstack+0x3e>
    }
    return -E_NO_MEM;
c010a5b8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010a5bd:	c9                   	leave  
c010a5be:	c3                   	ret    

c010a5bf <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010a5bf:	55                   	push   %ebp
c010a5c0:	89 e5                	mov    %esp,%ebp
c010a5c2:	83 ec 08             	sub    $0x8,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010a5c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5c8:	8b 40 0c             	mov    0xc(%eax),%eax
c010a5cb:	83 ec 0c             	sub    $0xc,%esp
c010a5ce:	50                   	push   %eax
c010a5cf:	e8 e8 f8 ff ff       	call   c0109ebc <kva2page>
c010a5d4:	83 c4 10             	add    $0x10,%esp
c010a5d7:	83 ec 08             	sub    $0x8,%esp
c010a5da:	6a 02                	push   $0x2
c010a5dc:	50                   	push   %eax
c010a5dd:	e8 83 a5 ff ff       	call   c0104b65 <free_pages>
c010a5e2:	83 c4 10             	add    $0x10,%esp
}
c010a5e5:	90                   	nop
c010a5e6:	c9                   	leave  
c010a5e7:	c3                   	ret    

c010a5e8 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010a5e8:	55                   	push   %ebp
c010a5e9:	89 e5                	mov    %esp,%ebp
c010a5eb:	83 ec 18             	sub    $0x18,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010a5ee:	83 ec 0c             	sub    $0xc,%esp
c010a5f1:	6a 01                	push   $0x1
c010a5f3:	e8 01 a5 ff ff       	call   c0104af9 <alloc_pages>
c010a5f8:	83 c4 10             	add    $0x10,%esp
c010a5fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a5fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a602:	75 07                	jne    c010a60b <setup_pgdir+0x23>
        return -E_NO_MEM;
c010a604:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010a609:	eb 74                	jmp    c010a67f <setup_pgdir+0x97>
    }
    pde_t *pgdir = page2kva(page);
c010a60b:	83 ec 0c             	sub    $0xc,%esp
c010a60e:	ff 75 f4             	pushl  -0xc(%ebp)
c010a611:	e8 61 f8 ff ff       	call   c0109e77 <page2kva>
c010a616:	83 c4 10             	add    $0x10,%esp
c010a619:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010a61c:	a1 64 1c 1b c0       	mov    0xc01b1c64,%eax
c010a621:	83 ec 04             	sub    $0x4,%esp
c010a624:	68 00 10 00 00       	push   $0x1000
c010a629:	50                   	push   %eax
c010a62a:	ff 75 f0             	pushl  -0x10(%ebp)
c010a62d:	e8 a1 1f 00 00       	call   c010c5d3 <memcpy>
c010a632:	83 c4 10             	add    $0x10,%esp
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010a635:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a638:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010a63e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a641:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a644:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010a64b:	77 17                	ja     c010a664 <setup_pgdir+0x7c>
c010a64d:	ff 75 ec             	pushl  -0x14(%ebp)
c010a650:	68 ac f0 10 c0       	push   $0xc010f0ac
c010a655:	68 2e 01 00 00       	push   $0x12e
c010a65a:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010a65f:	e8 fd 70 ff ff       	call   c0101761 <__panic>
c010a664:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a667:	05 00 00 00 40       	add    $0x40000000,%eax
c010a66c:	83 c8 03             	or     $0x3,%eax
c010a66f:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010a671:	8b 45 08             	mov    0x8(%ebp),%eax
c010a674:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a677:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010a67a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a67f:	c9                   	leave  
c010a680:	c3                   	ret    

c010a681 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010a681:	55                   	push   %ebp
c010a682:	89 e5                	mov    %esp,%ebp
c010a684:	83 ec 08             	sub    $0x8,%esp
    free_page(kva2page(mm->pgdir));
c010a687:	8b 45 08             	mov    0x8(%ebp),%eax
c010a68a:	8b 40 0c             	mov    0xc(%eax),%eax
c010a68d:	83 ec 0c             	sub    $0xc,%esp
c010a690:	50                   	push   %eax
c010a691:	e8 26 f8 ff ff       	call   c0109ebc <kva2page>
c010a696:	83 c4 10             	add    $0x10,%esp
c010a699:	83 ec 08             	sub    $0x8,%esp
c010a69c:	6a 01                	push   $0x1
c010a69e:	50                   	push   %eax
c010a69f:	e8 c1 a4 ff ff       	call   c0104b65 <free_pages>
c010a6a4:	83 c4 10             	add    $0x10,%esp
}
c010a6a7:	90                   	nop
c010a6a8:	c9                   	leave  
c010a6a9:	c3                   	ret    

c010a6aa <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010a6aa:	55                   	push   %ebp
c010a6ab:	89 e5                	mov    %esp,%ebp
c010a6ad:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010a6b0:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010a6b5:	8b 40 18             	mov    0x18(%eax),%eax
c010a6b8:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010a6bb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a6bf:	75 0a                	jne    c010a6cb <copy_mm+0x21>
        return 0;
c010a6c1:	b8 00 00 00 00       	mov    $0x0,%eax
c010a6c6:	e9 03 01 00 00       	jmp    c010a7ce <copy_mm+0x124>
    }
    if (clone_flags & CLONE_VM) {
c010a6cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6ce:	25 00 01 00 00       	and    $0x100,%eax
c010a6d3:	85 c0                	test   %eax,%eax
c010a6d5:	74 08                	je     c010a6df <copy_mm+0x35>
        mm = oldmm;
c010a6d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a6da:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010a6dd:	eb 65                	jmp    c010a744 <copy_mm+0x9a>
    }

    int ret = -E_NO_MEM;
c010a6df:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010a6e6:	e8 d8 bd ff ff       	call   c01064c3 <mm_create>
c010a6eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a6ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a6f2:	0f 84 d2 00 00 00    	je     c010a7ca <copy_mm+0x120>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c010a6f8:	83 ec 0c             	sub    $0xc,%esp
c010a6fb:	ff 75 f4             	pushl  -0xc(%ebp)
c010a6fe:	e8 e5 fe ff ff       	call   c010a5e8 <setup_pgdir>
c010a703:	83 c4 10             	add    $0x10,%esp
c010a706:	85 c0                	test   %eax,%eax
c010a708:	0f 85 ab 00 00 00    	jne    c010a7b9 <copy_mm+0x10f>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
c010a70e:	83 ec 0c             	sub    $0xc,%esp
c010a711:	ff 75 ec             	pushl  -0x14(%ebp)
c010a714:	e8 16 f8 ff ff       	call   c0109f2f <lock_mm>
c010a719:	83 c4 10             	add    $0x10,%esp
    {
        ret = dup_mmap(mm, oldmm);
c010a71c:	83 ec 08             	sub    $0x8,%esp
c010a71f:	ff 75 ec             	pushl  -0x14(%ebp)
c010a722:	ff 75 f4             	pushl  -0xc(%ebp)
c010a725:	e8 6a c2 ff ff       	call   c0106994 <dup_mmap>
c010a72a:	83 c4 10             	add    $0x10,%esp
c010a72d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010a730:	83 ec 0c             	sub    $0xc,%esp
c010a733:	ff 75 ec             	pushl  -0x14(%ebp)
c010a736:	e8 15 f8 ff ff       	call   c0109f50 <unlock_mm>
c010a73b:	83 c4 10             	add    $0x10,%esp

    if (ret != 0) {
c010a73e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a742:	75 56                	jne    c010a79a <copy_mm+0xf0>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010a744:	83 ec 0c             	sub    $0xc,%esp
c010a747:	ff 75 f4             	pushl  -0xc(%ebp)
c010a74a:	e8 ac f7 ff ff       	call   c0109efb <mm_count_inc>
c010a74f:	83 c4 10             	add    $0x10,%esp
    proc->mm = mm;
c010a752:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a755:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a758:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010a75b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a75e:	8b 40 0c             	mov    0xc(%eax),%eax
c010a761:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010a764:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010a76b:	77 17                	ja     c010a784 <copy_mm+0xda>
c010a76d:	ff 75 e8             	pushl  -0x18(%ebp)
c010a770:	68 ac f0 10 c0       	push   $0xc010f0ac
c010a775:	68 5d 01 00 00       	push   $0x15d
c010a77a:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010a77f:	e8 dd 6f ff ff       	call   c0101761 <__panic>
c010a784:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a787:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010a78d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a790:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010a793:	b8 00 00 00 00       	mov    $0x0,%eax
c010a798:	eb 34                	jmp    c010a7ce <copy_mm+0x124>
        ret = dup_mmap(mm, oldmm);
    }
    unlock_mm(oldmm);

    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
c010a79a:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010a79b:	83 ec 0c             	sub    $0xc,%esp
c010a79e:	ff 75 f4             	pushl  -0xc(%ebp)
c010a7a1:	e8 d5 c2 ff ff       	call   c0106a7b <exit_mmap>
c010a7a6:	83 c4 10             	add    $0x10,%esp
    put_pgdir(mm);
c010a7a9:	83 ec 0c             	sub    $0xc,%esp
c010a7ac:	ff 75 f4             	pushl  -0xc(%ebp)
c010a7af:	e8 cd fe ff ff       	call   c010a681 <put_pgdir>
c010a7b4:	83 c4 10             	add    $0x10,%esp
c010a7b7:	eb 01                	jmp    c010a7ba <copy_mm+0x110>
    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010a7b9:	90                   	nop
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010a7ba:	83 ec 0c             	sub    $0xc,%esp
c010a7bd:	ff 75 f4             	pushl  -0xc(%ebp)
c010a7c0:	e8 28 c0 ff ff       	call   c01067ed <mm_destroy>
c010a7c5:	83 c4 10             	add    $0x10,%esp
c010a7c8:	eb 01                	jmp    c010a7cb <copy_mm+0x121>
        goto good_mm;
    }

    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010a7ca:	90                   	nop
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    return ret;
c010a7cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010a7ce:	c9                   	leave  
c010a7cf:	c3                   	ret    

c010a7d0 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010a7d0:	55                   	push   %ebp
c010a7d1:	89 e5                	mov    %esp,%ebp
c010a7d3:	57                   	push   %edi
c010a7d4:	56                   	push   %esi
c010a7d5:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010a7d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7d9:	8b 40 0c             	mov    0xc(%eax),%eax
c010a7dc:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010a7e1:	89 c2                	mov    %eax,%edx
c010a7e3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7e6:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010a7e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7ec:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a7ef:	8b 55 10             	mov    0x10(%ebp),%edx
c010a7f2:	89 d3                	mov    %edx,%ebx
c010a7f4:	ba 4c 00 00 00       	mov    $0x4c,%edx
c010a7f9:	8b 0b                	mov    (%ebx),%ecx
c010a7fb:	89 08                	mov    %ecx,(%eax)
c010a7fd:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c010a801:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c010a805:	8d 78 04             	lea    0x4(%eax),%edi
c010a808:	83 e7 fc             	and    $0xfffffffc,%edi
c010a80b:	29 f8                	sub    %edi,%eax
c010a80d:	29 c3                	sub    %eax,%ebx
c010a80f:	01 c2                	add    %eax,%edx
c010a811:	83 e2 fc             	and    $0xfffffffc,%edx
c010a814:	89 d0                	mov    %edx,%eax
c010a816:	c1 e8 02             	shr    $0x2,%eax
c010a819:	89 de                	mov    %ebx,%esi
c010a81b:	89 c1                	mov    %eax,%ecx
c010a81d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    proc->tf->tf_regs.reg_eax = 0;
c010a81f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a822:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a825:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010a82c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a82f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a832:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a835:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010a838:	8b 45 08             	mov    0x8(%ebp),%eax
c010a83b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a83e:	8b 55 08             	mov    0x8(%ebp),%edx
c010a841:	8b 52 3c             	mov    0x3c(%edx),%edx
c010a844:	8b 52 40             	mov    0x40(%edx),%edx
c010a847:	80 ce 02             	or     $0x2,%dh
c010a84a:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010a84d:	ba df a3 10 c0       	mov    $0xc010a3df,%edx
c010a852:	8b 45 08             	mov    0x8(%ebp),%eax
c010a855:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010a858:	8b 45 08             	mov    0x8(%ebp),%eax
c010a85b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a85e:	89 c2                	mov    %eax,%edx
c010a860:	8b 45 08             	mov    0x8(%ebp),%eax
c010a863:	89 50 20             	mov    %edx,0x20(%eax)
}
c010a866:	90                   	nop
c010a867:	5b                   	pop    %ebx
c010a868:	5e                   	pop    %esi
c010a869:	5f                   	pop    %edi
c010a86a:	5d                   	pop    %ebp
c010a86b:	c3                   	ret    

c010a86c <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010a86c:	55                   	push   %ebp
c010a86d:	89 e5                	mov    %esp,%ebp
c010a86f:	83 ec 18             	sub    $0x18,%esp
    int ret = -E_NO_FREE_PROC;
c010a872:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010a879:	a1 20 3d 1b c0       	mov    0xc01b3d20,%eax
c010a87e:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010a883:	0f 8f e1 00 00 00    	jg     c010a96a <do_fork+0xfe>
        goto fork_out;
    }
    ret = -E_NO_MEM;
c010a889:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    //    3. call copy_mm to dup OR share mm according clone_flag
    //    4. call copy_thread to setup tf & context in proc_struct
    //    5. insert proc_struct into hash_list && proc_list
    //    6. call wakeup_proc to make the new child process RUNNABLE
    //    7. set ret vaule using child proc's pid
    if ((proc = alloc_proc()) == NULL) {
c010a890:	e8 dc f6 ff ff       	call   c0109f71 <alloc_proc>
c010a895:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a898:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a89c:	0f 84 cb 00 00 00    	je     c010a96d <do_fork+0x101>
        goto fork_out;
    }

    proc->parent = current;
c010a8a2:	8b 15 08 1d 1b c0    	mov    0xc01b1d08,%edx
c010a8a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8ab:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c010a8ae:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010a8b3:	8b 40 6c             	mov    0x6c(%eax),%eax
c010a8b6:	85 c0                	test   %eax,%eax
c010a8b8:	74 19                	je     c010a8d3 <do_fork+0x67>
c010a8ba:	68 e4 f0 10 c0       	push   $0xc010f0e4
c010a8bf:	68 fd f0 10 c0       	push   $0xc010f0fd
c010a8c4:	68 a1 01 00 00       	push   $0x1a1
c010a8c9:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010a8ce:	e8 8e 6e ff ff       	call   c0101761 <__panic>

    if (setup_kstack(proc) != 0) {
c010a8d3:	83 ec 0c             	sub    $0xc,%esp
c010a8d6:	ff 75 f0             	pushl  -0x10(%ebp)
c010a8d9:	e8 a1 fc ff ff       	call   c010a57f <setup_kstack>
c010a8de:	83 c4 10             	add    $0x10,%esp
c010a8e1:	85 c0                	test   %eax,%eax
c010a8e3:	0f 85 9b 00 00 00    	jne    c010a984 <do_fork+0x118>
        goto bad_fork_cleanup_proc;
    }
    if (copy_mm(clone_flags, proc) != 0) {
c010a8e9:	83 ec 08             	sub    $0x8,%esp
c010a8ec:	ff 75 f0             	pushl  -0x10(%ebp)
c010a8ef:	ff 75 08             	pushl  0x8(%ebp)
c010a8f2:	e8 b3 fd ff ff       	call   c010a6aa <copy_mm>
c010a8f7:	83 c4 10             	add    $0x10,%esp
c010a8fa:	85 c0                	test   %eax,%eax
c010a8fc:	75 75                	jne    c010a973 <do_fork+0x107>
        goto bad_fork_cleanup_kstack;
    }
    copy_thread(proc, stack, tf);
c010a8fe:	83 ec 04             	sub    $0x4,%esp
c010a901:	ff 75 10             	pushl  0x10(%ebp)
c010a904:	ff 75 0c             	pushl  0xc(%ebp)
c010a907:	ff 75 f0             	pushl  -0x10(%ebp)
c010a90a:	e8 c1 fe ff ff       	call   c010a7d0 <copy_thread>
c010a90f:	83 c4 10             	add    $0x10,%esp

    bool intr_flag;
    local_intr_save(intr_flag);
c010a912:	e8 45 f4 ff ff       	call   c0109d5c <__intr_save>
c010a917:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010a91a:	e8 4a f9 ff ff       	call   c010a269 <get_pid>
c010a91f:	89 c2                	mov    %eax,%edx
c010a921:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a924:	89 50 04             	mov    %edx,0x4(%eax)
        hash_proc(proc);
c010a927:	83 ec 0c             	sub    $0xc,%esp
c010a92a:	ff 75 f0             	pushl  -0x10(%ebp)
c010a92d:	e8 ca fa ff ff       	call   c010a3fc <hash_proc>
c010a932:	83 c4 10             	add    $0x10,%esp
        set_links(proc);
c010a935:	83 ec 0c             	sub    $0xc,%esp
c010a938:	ff 75 f0             	pushl  -0x10(%ebp)
c010a93b:	e8 ff f7 ff ff       	call   c010a13f <set_links>
c010a940:	83 c4 10             	add    $0x10,%esp

    }
    local_intr_restore(intr_flag);
c010a943:	83 ec 0c             	sub    $0xc,%esp
c010a946:	ff 75 ec             	pushl  -0x14(%ebp)
c010a949:	e8 38 f4 ff ff       	call   c0109d86 <__intr_restore>
c010a94e:	83 c4 10             	add    $0x10,%esp

    wakeup_proc(proc);
c010a951:	83 ec 0c             	sub    $0xc,%esp
c010a954:	ff 75 f0             	pushl  -0x10(%ebp)
c010a957:	e8 13 11 00 00       	call   c010ba6f <wakeup_proc>
c010a95c:	83 c4 10             	add    $0x10,%esp

    ret = proc->pid;
c010a95f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a962:	8b 40 04             	mov    0x4(%eax),%eax
c010a965:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a968:	eb 04                	jmp    c010a96e <do_fork+0x102>
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
    int ret = -E_NO_FREE_PROC;
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
        goto fork_out;
c010a96a:	90                   	nop
c010a96b:	eb 01                	jmp    c010a96e <do_fork+0x102>
    //    4. call copy_thread to setup tf & context in proc_struct
    //    5. insert proc_struct into hash_list && proc_list
    //    6. call wakeup_proc to make the new child process RUNNABLE
    //    7. set ret vaule using child proc's pid
    if ((proc = alloc_proc()) == NULL) {
        goto fork_out;
c010a96d:	90                   	nop

    wakeup_proc(proc);

    ret = proc->pid;
fork_out:
    return ret;
c010a96e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a971:	eb 22                	jmp    c010a995 <do_fork+0x129>

    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
    }
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_kstack;
c010a973:	90                   	nop
    ret = proc->pid;
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c010a974:	83 ec 0c             	sub    $0xc,%esp
c010a977:	ff 75 f0             	pushl  -0x10(%ebp)
c010a97a:	e8 40 fc ff ff       	call   c010a5bf <put_kstack>
c010a97f:	83 c4 10             	add    $0x10,%esp
c010a982:	eb 01                	jmp    c010a985 <do_fork+0x119>

    proc->parent = current;
    assert(current->wait_state == 0);

    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
c010a984:	90                   	nop
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010a985:	83 ec 0c             	sub    $0xc,%esp
c010a988:	ff 75 f0             	pushl  -0x10(%ebp)
c010a98b:	e8 fd dc ff ff       	call   c010868d <kfree>
c010a990:	83 c4 10             	add    $0x10,%esp
    goto fork_out;
c010a993:	eb d9                	jmp    c010a96e <do_fork+0x102>
}
c010a995:	c9                   	leave  
c010a996:	c3                   	ret    

c010a997 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010a997:	55                   	push   %ebp
c010a998:	89 e5                	mov    %esp,%ebp
c010a99a:	83 ec 18             	sub    $0x18,%esp
    if (current == idleproc) {
c010a99d:	8b 15 08 1d 1b c0    	mov    0xc01b1d08,%edx
c010a9a3:	a1 00 1d 1b c0       	mov    0xc01b1d00,%eax
c010a9a8:	39 c2                	cmp    %eax,%edx
c010a9aa:	75 17                	jne    c010a9c3 <do_exit+0x2c>
        panic("idleproc exit.\n");
c010a9ac:	83 ec 04             	sub    $0x4,%esp
c010a9af:	68 12 f1 10 c0       	push   $0xc010f112
c010a9b4:	68 c9 01 00 00       	push   $0x1c9
c010a9b9:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010a9be:	e8 9e 6d ff ff       	call   c0101761 <__panic>
    }
    if (current == initproc) {
c010a9c3:	8b 15 08 1d 1b c0    	mov    0xc01b1d08,%edx
c010a9c9:	a1 04 1d 1b c0       	mov    0xc01b1d04,%eax
c010a9ce:	39 c2                	cmp    %eax,%edx
c010a9d0:	75 17                	jne    c010a9e9 <do_exit+0x52>
        panic("initproc exit.\n");
c010a9d2:	83 ec 04             	sub    $0x4,%esp
c010a9d5:	68 22 f1 10 c0       	push   $0xc010f122
c010a9da:	68 cc 01 00 00       	push   $0x1cc
c010a9df:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010a9e4:	e8 78 6d ff ff       	call   c0101761 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010a9e9:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010a9ee:	8b 40 18             	mov    0x18(%eax),%eax
c010a9f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010a9f4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a9f8:	74 56                	je     c010aa50 <do_exit+0xb9>
        lcr3(boot_cr3);
c010a9fa:	a1 60 3d 1b c0       	mov    0xc01b3d60,%eax
c010a9ff:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010aa02:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa05:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010aa08:	83 ec 0c             	sub    $0xc,%esp
c010aa0b:	ff 75 f4             	pushl  -0xc(%ebp)
c010aa0e:	e8 02 f5 ff ff       	call   c0109f15 <mm_count_dec>
c010aa13:	83 c4 10             	add    $0x10,%esp
c010aa16:	85 c0                	test   %eax,%eax
c010aa18:	75 2a                	jne    c010aa44 <do_exit+0xad>
            exit_mmap(mm);
c010aa1a:	83 ec 0c             	sub    $0xc,%esp
c010aa1d:	ff 75 f4             	pushl  -0xc(%ebp)
c010aa20:	e8 56 c0 ff ff       	call   c0106a7b <exit_mmap>
c010aa25:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c010aa28:	83 ec 0c             	sub    $0xc,%esp
c010aa2b:	ff 75 f4             	pushl  -0xc(%ebp)
c010aa2e:	e8 4e fc ff ff       	call   c010a681 <put_pgdir>
c010aa33:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010aa36:	83 ec 0c             	sub    $0xc,%esp
c010aa39:	ff 75 f4             	pushl  -0xc(%ebp)
c010aa3c:	e8 ac bd ff ff       	call   c01067ed <mm_destroy>
c010aa41:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c010aa44:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010aa49:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010aa50:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010aa55:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010aa5b:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010aa60:	8b 55 08             	mov    0x8(%ebp),%edx
c010aa63:	89 50 68             	mov    %edx,0x68(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010aa66:	e8 f1 f2 ff ff       	call   c0109d5c <__intr_save>
c010aa6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010aa6e:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010aa73:	8b 40 14             	mov    0x14(%eax),%eax
c010aa76:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010aa79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa7c:	8b 40 6c             	mov    0x6c(%eax),%eax
c010aa7f:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010aa84:	0f 85 9d 00 00 00    	jne    c010ab27 <do_exit+0x190>
            wakeup_proc(proc);
c010aa8a:	83 ec 0c             	sub    $0xc,%esp
c010aa8d:	ff 75 ec             	pushl  -0x14(%ebp)
c010aa90:	e8 da 0f 00 00       	call   c010ba6f <wakeup_proc>
c010aa95:	83 c4 10             	add    $0x10,%esp
        }
        while (current->cptr != NULL) {
c010aa98:	e9 8a 00 00 00       	jmp    c010ab27 <do_exit+0x190>
            proc = current->cptr;
c010aa9d:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010aaa2:	8b 40 70             	mov    0x70(%eax),%eax
c010aaa5:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010aaa8:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010aaad:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010aab0:	8b 52 78             	mov    0x78(%edx),%edx
c010aab3:	89 50 70             	mov    %edx,0x70(%eax)
    
            proc->yptr = NULL;
c010aab6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aab9:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
            if ((proc->optr = initproc->cptr) != NULL) {
c010aac0:	a1 04 1d 1b c0       	mov    0xc01b1d04,%eax
c010aac5:	8b 50 70             	mov    0x70(%eax),%edx
c010aac8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aacb:	89 50 78             	mov    %edx,0x78(%eax)
c010aace:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aad1:	8b 40 78             	mov    0x78(%eax),%eax
c010aad4:	85 c0                	test   %eax,%eax
c010aad6:	74 0e                	je     c010aae6 <do_exit+0x14f>
                initproc->cptr->yptr = proc;
c010aad8:	a1 04 1d 1b c0       	mov    0xc01b1d04,%eax
c010aadd:	8b 40 70             	mov    0x70(%eax),%eax
c010aae0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010aae3:	89 50 74             	mov    %edx,0x74(%eax)
            }
            proc->parent = initproc;
c010aae6:	8b 15 04 1d 1b c0    	mov    0xc01b1d04,%edx
c010aaec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aaef:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010aaf2:	a1 04 1d 1b c0       	mov    0xc01b1d04,%eax
c010aaf7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010aafa:	89 50 70             	mov    %edx,0x70(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010aafd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab00:	8b 00                	mov    (%eax),%eax
c010ab02:	83 f8 03             	cmp    $0x3,%eax
c010ab05:	75 20                	jne    c010ab27 <do_exit+0x190>
                if (initproc->wait_state == WT_CHILD) {
c010ab07:	a1 04 1d 1b c0       	mov    0xc01b1d04,%eax
c010ab0c:	8b 40 6c             	mov    0x6c(%eax),%eax
c010ab0f:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010ab14:	75 11                	jne    c010ab27 <do_exit+0x190>
                    wakeup_proc(initproc);
c010ab16:	a1 04 1d 1b c0       	mov    0xc01b1d04,%eax
c010ab1b:	83 ec 0c             	sub    $0xc,%esp
c010ab1e:	50                   	push   %eax
c010ab1f:	e8 4b 0f 00 00       	call   c010ba6f <wakeup_proc>
c010ab24:	83 c4 10             	add    $0x10,%esp
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010ab27:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010ab2c:	8b 40 70             	mov    0x70(%eax),%eax
c010ab2f:	85 c0                	test   %eax,%eax
c010ab31:	0f 85 66 ff ff ff    	jne    c010aa9d <do_exit+0x106>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010ab37:	83 ec 0c             	sub    $0xc,%esp
c010ab3a:	ff 75 f0             	pushl  -0x10(%ebp)
c010ab3d:	e8 44 f2 ff ff       	call   c0109d86 <__intr_restore>
c010ab42:	83 c4 10             	add    $0x10,%esp
    
    schedule();
c010ab45:	e8 b2 0f 00 00       	call   c010bafc <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010ab4a:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010ab4f:	8b 40 04             	mov    0x4(%eax),%eax
c010ab52:	50                   	push   %eax
c010ab53:	68 34 f1 10 c0       	push   $0xc010f134
c010ab58:	68 f8 01 00 00       	push   $0x1f8
c010ab5d:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010ab62:	e8 fa 6b ff ff       	call   c0101761 <__panic>

c010ab67 <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010ab67:	55                   	push   %ebp
c010ab68:	89 e5                	mov    %esp,%ebp
c010ab6a:	83 ec 58             	sub    $0x58,%esp
    if (current->mm != NULL) {
c010ab6d:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010ab72:	8b 40 18             	mov    0x18(%eax),%eax
c010ab75:	85 c0                	test   %eax,%eax
c010ab77:	74 17                	je     c010ab90 <load_icode+0x29>
        panic("load_icode: current->mm must be empty.\n");
c010ab79:	83 ec 04             	sub    $0x4,%esp
c010ab7c:	68 54 f1 10 c0       	push   $0xc010f154
c010ab81:	68 02 02 00 00       	push   $0x202
c010ab86:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010ab8b:	e8 d1 6b ff ff       	call   c0101761 <__panic>
    }

    int ret = -E_NO_MEM;
c010ab90:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010ab97:	e8 27 b9 ff ff       	call   c01064c3 <mm_create>
c010ab9c:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010ab9f:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010aba3:	0f 84 90 05 00 00    	je     c010b139 <load_icode+0x5d2>
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010aba9:	83 ec 0c             	sub    $0xc,%esp
c010abac:	ff 75 d0             	pushl  -0x30(%ebp)
c010abaf:	e8 34 fa ff ff       	call   c010a5e8 <setup_pgdir>
c010abb4:	83 c4 10             	add    $0x10,%esp
c010abb7:	85 c0                	test   %eax,%eax
c010abb9:	0f 85 69 05 00 00    	jne    c010b128 <load_icode+0x5c1>
        goto bad_pgdir_cleanup_mm;
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010abbf:	8b 45 08             	mov    0x8(%ebp),%eax
c010abc2:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010abc5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010abc8:	8b 50 1c             	mov    0x1c(%eax),%edx
c010abcb:	8b 45 08             	mov    0x8(%ebp),%eax
c010abce:	01 d0                	add    %edx,%eax
c010abd0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010abd3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010abd6:	8b 00                	mov    (%eax),%eax
c010abd8:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010abdd:	74 0c                	je     c010abeb <load_icode+0x84>
        ret = -E_INVAL_ELF;
c010abdf:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010abe6:	e9 2d 05 00 00       	jmp    c010b118 <load_icode+0x5b1>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010abeb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010abee:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010abf2:	0f b7 c0             	movzwl %ax,%eax
c010abf5:	c1 e0 05             	shl    $0x5,%eax
c010abf8:	89 c2                	mov    %eax,%edx
c010abfa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abfd:	01 d0                	add    %edx,%eax
c010abff:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010ac02:	e9 e0 02 00 00       	jmp    c010aee7 <load_icode+0x380>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010ac07:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac0a:	8b 00                	mov    (%eax),%eax
c010ac0c:	83 f8 01             	cmp    $0x1,%eax
c010ac0f:	0f 85 c7 02 00 00    	jne    c010aedc <load_icode+0x375>
            continue ;
        }
        if (ph->p_filesz > ph->p_memsz) {
c010ac15:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac18:	8b 50 10             	mov    0x10(%eax),%edx
c010ac1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac1e:	8b 40 14             	mov    0x14(%eax),%eax
c010ac21:	39 c2                	cmp    %eax,%edx
c010ac23:	76 0c                	jbe    c010ac31 <load_icode+0xca>
            ret = -E_INVAL_ELF;
c010ac25:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010ac2c:	e9 d9 04 00 00       	jmp    c010b10a <load_icode+0x5a3>
        }
        if (ph->p_filesz == 0) {
c010ac31:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac34:	8b 40 10             	mov    0x10(%eax),%eax
c010ac37:	85 c0                	test   %eax,%eax
c010ac39:	0f 84 a0 02 00 00    	je     c010aedf <load_icode+0x378>
            continue ;
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010ac3f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010ac46:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010ac4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac50:	8b 40 18             	mov    0x18(%eax),%eax
c010ac53:	83 e0 01             	and    $0x1,%eax
c010ac56:	85 c0                	test   %eax,%eax
c010ac58:	74 04                	je     c010ac5e <load_icode+0xf7>
c010ac5a:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010ac5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac61:	8b 40 18             	mov    0x18(%eax),%eax
c010ac64:	83 e0 02             	and    $0x2,%eax
c010ac67:	85 c0                	test   %eax,%eax
c010ac69:	74 04                	je     c010ac6f <load_icode+0x108>
c010ac6b:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010ac6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac72:	8b 40 18             	mov    0x18(%eax),%eax
c010ac75:	83 e0 04             	and    $0x4,%eax
c010ac78:	85 c0                	test   %eax,%eax
c010ac7a:	74 04                	je     c010ac80 <load_icode+0x119>
c010ac7c:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010ac80:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac83:	83 e0 02             	and    $0x2,%eax
c010ac86:	85 c0                	test   %eax,%eax
c010ac88:	74 04                	je     c010ac8e <load_icode+0x127>
c010ac8a:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010ac8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac91:	8b 50 14             	mov    0x14(%eax),%edx
c010ac94:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac97:	8b 40 08             	mov    0x8(%eax),%eax
c010ac9a:	83 ec 0c             	sub    $0xc,%esp
c010ac9d:	6a 00                	push   $0x0
c010ac9f:	ff 75 e8             	pushl  -0x18(%ebp)
c010aca2:	52                   	push   %edx
c010aca3:	50                   	push   %eax
c010aca4:	ff 75 d0             	pushl  -0x30(%ebp)
c010aca7:	e8 e0 bb ff ff       	call   c010688c <mm_map>
c010acac:	83 c4 20             	add    $0x20,%esp
c010acaf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010acb2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010acb6:	0f 85 44 04 00 00    	jne    c010b100 <load_icode+0x599>
            goto bad_cleanup_mmap;
        }
        unsigned char *from = binary + ph->p_offset;
c010acbc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010acbf:	8b 50 04             	mov    0x4(%eax),%edx
c010acc2:	8b 45 08             	mov    0x8(%ebp),%eax
c010acc5:	01 d0                	add    %edx,%eax
c010acc7:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010acca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010accd:	8b 40 08             	mov    0x8(%eax),%eax
c010acd0:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010acd3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010acd6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010acd9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010acdc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010ace1:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010ace4:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010aceb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010acee:	8b 50 08             	mov    0x8(%eax),%edx
c010acf1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010acf4:	8b 40 10             	mov    0x10(%eax),%eax
c010acf7:	01 d0                	add    %edx,%eax
c010acf9:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010acfc:	e9 84 00 00 00       	jmp    c010ad85 <load_icode+0x21e>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010ad01:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ad04:	8b 40 0c             	mov    0xc(%eax),%eax
c010ad07:	83 ec 04             	sub    $0x4,%esp
c010ad0a:	ff 75 e4             	pushl  -0x1c(%ebp)
c010ad0d:	ff 75 d4             	pushl  -0x2c(%ebp)
c010ad10:	50                   	push   %eax
c010ad11:	e8 98 ab ff ff       	call   c01058ae <pgdir_alloc_page>
c010ad16:	83 c4 10             	add    $0x10,%esp
c010ad19:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ad1c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ad20:	0f 84 dd 03 00 00    	je     c010b103 <load_icode+0x59c>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010ad26:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ad29:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010ad2c:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010ad2f:	b8 00 10 00 00       	mov    $0x1000,%eax
c010ad34:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010ad37:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010ad3a:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010ad41:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ad44:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010ad47:	73 09                	jae    c010ad52 <load_icode+0x1eb>
                size -= la - end;
c010ad49:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ad4c:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010ad4f:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010ad52:	83 ec 0c             	sub    $0xc,%esp
c010ad55:	ff 75 f0             	pushl  -0x10(%ebp)
c010ad58:	e8 1a f1 ff ff       	call   c0109e77 <page2kva>
c010ad5d:	83 c4 10             	add    $0x10,%esp
c010ad60:	89 c2                	mov    %eax,%edx
c010ad62:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010ad65:	01 d0                	add    %edx,%eax
c010ad67:	83 ec 04             	sub    $0x4,%esp
c010ad6a:	ff 75 dc             	pushl  -0x24(%ebp)
c010ad6d:	ff 75 e0             	pushl  -0x20(%ebp)
c010ad70:	50                   	push   %eax
c010ad71:	e8 5d 18 00 00       	call   c010c5d3 <memcpy>
c010ad76:	83 c4 10             	add    $0x10,%esp
            start += size, from += size;
c010ad79:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ad7c:	01 45 d8             	add    %eax,-0x28(%ebp)
c010ad7f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ad82:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010ad85:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ad88:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010ad8b:	0f 82 70 ff ff ff    	jb     c010ad01 <load_icode+0x19a>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010ad91:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad94:	8b 50 08             	mov    0x8(%eax),%edx
c010ad97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad9a:	8b 40 14             	mov    0x14(%eax),%eax
c010ad9d:	01 d0                	add    %edx,%eax
c010ad9f:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010ada2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ada5:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010ada8:	0f 83 20 01 00 00    	jae    c010aece <load_icode+0x367>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010adae:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010adb1:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010adb4:	0f 84 28 01 00 00    	je     c010aee2 <load_icode+0x37b>
                continue ;
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010adba:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010adbd:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010adc0:	05 00 10 00 00       	add    $0x1000,%eax
c010adc5:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010adc8:	b8 00 10 00 00       	mov    $0x1000,%eax
c010adcd:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010add0:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010add3:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010add6:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010add9:	73 09                	jae    c010ade4 <load_icode+0x27d>
                size -= la - end;
c010addb:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010adde:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010ade1:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010ade4:	83 ec 0c             	sub    $0xc,%esp
c010ade7:	ff 75 f0             	pushl  -0x10(%ebp)
c010adea:	e8 88 f0 ff ff       	call   c0109e77 <page2kva>
c010adef:	83 c4 10             	add    $0x10,%esp
c010adf2:	89 c2                	mov    %eax,%edx
c010adf4:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010adf7:	01 d0                	add    %edx,%eax
c010adf9:	83 ec 04             	sub    $0x4,%esp
c010adfc:	ff 75 dc             	pushl  -0x24(%ebp)
c010adff:	6a 00                	push   $0x0
c010ae01:	50                   	push   %eax
c010ae02:	e8 e9 16 00 00       	call   c010c4f0 <memset>
c010ae07:	83 c4 10             	add    $0x10,%esp
            start += size;
c010ae0a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ae0d:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010ae10:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ae13:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010ae16:	73 0c                	jae    c010ae24 <load_icode+0x2bd>
c010ae18:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ae1b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010ae1e:	0f 84 aa 00 00 00    	je     c010aece <load_icode+0x367>
c010ae24:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ae27:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010ae2a:	72 0c                	jb     c010ae38 <load_icode+0x2d1>
c010ae2c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ae2f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010ae32:	0f 84 96 00 00 00    	je     c010aece <load_icode+0x367>
c010ae38:	68 7c f1 10 c0       	push   $0xc010f17c
c010ae3d:	68 fd f0 10 c0       	push   $0xc010f0fd
c010ae42:	68 54 02 00 00       	push   $0x254
c010ae47:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010ae4c:	e8 10 69 ff ff       	call   c0101761 <__panic>
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010ae51:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ae54:	8b 40 0c             	mov    0xc(%eax),%eax
c010ae57:	83 ec 04             	sub    $0x4,%esp
c010ae5a:	ff 75 e4             	pushl  -0x1c(%ebp)
c010ae5d:	ff 75 d4             	pushl  -0x2c(%ebp)
c010ae60:	50                   	push   %eax
c010ae61:	e8 48 aa ff ff       	call   c01058ae <pgdir_alloc_page>
c010ae66:	83 c4 10             	add    $0x10,%esp
c010ae69:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ae6c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ae70:	0f 84 90 02 00 00    	je     c010b106 <load_icode+0x59f>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010ae76:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ae79:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010ae7c:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010ae7f:	b8 00 10 00 00       	mov    $0x1000,%eax
c010ae84:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010ae87:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010ae8a:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010ae91:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ae94:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010ae97:	73 09                	jae    c010aea2 <load_icode+0x33b>
                size -= la - end;
c010ae99:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ae9c:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010ae9f:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010aea2:	83 ec 0c             	sub    $0xc,%esp
c010aea5:	ff 75 f0             	pushl  -0x10(%ebp)
c010aea8:	e8 ca ef ff ff       	call   c0109e77 <page2kva>
c010aead:	83 c4 10             	add    $0x10,%esp
c010aeb0:	89 c2                	mov    %eax,%edx
c010aeb2:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010aeb5:	01 d0                	add    %edx,%eax
c010aeb7:	83 ec 04             	sub    $0x4,%esp
c010aeba:	ff 75 dc             	pushl  -0x24(%ebp)
c010aebd:	6a 00                	push   $0x0
c010aebf:	50                   	push   %eax
c010aec0:	e8 2b 16 00 00       	call   c010c4f0 <memset>
c010aec5:	83 c4 10             	add    $0x10,%esp
            start += size;
c010aec8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010aecb:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010aece:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010aed1:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010aed4:	0f 82 77 ff ff ff    	jb     c010ae51 <load_icode+0x2ea>
c010aeda:	eb 07                	jmp    c010aee3 <load_icode+0x37c>
    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
            continue ;
c010aedc:	90                   	nop
c010aedd:	eb 04                	jmp    c010aee3 <load_icode+0x37c>
        if (ph->p_filesz > ph->p_memsz) {
            ret = -E_INVAL_ELF;
            goto bad_cleanup_mmap;
        }
        if (ph->p_filesz == 0) {
            continue ;
c010aedf:	90                   	nop
c010aee0:	eb 01                	jmp    c010aee3 <load_icode+0x37c>
      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
        if (start < la) {
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
                continue ;
c010aee2:	90                   	nop
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010aee3:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010aee7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aeea:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010aeed:	0f 82 14 fd ff ff    	jb     c010ac07 <load_icode+0xa0>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010aef3:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010aefa:	83 ec 0c             	sub    $0xc,%esp
c010aefd:	6a 00                	push   $0x0
c010aeff:	ff 75 e8             	pushl  -0x18(%ebp)
c010af02:	68 00 00 10 00       	push   $0x100000
c010af07:	68 00 00 f0 af       	push   $0xaff00000
c010af0c:	ff 75 d0             	pushl  -0x30(%ebp)
c010af0f:	e8 78 b9 ff ff       	call   c010688c <mm_map>
c010af14:	83 c4 20             	add    $0x20,%esp
c010af17:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af1e:	0f 85 e5 01 00 00    	jne    c010b109 <load_icode+0x5a2>
        goto bad_cleanup_mmap;
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010af24:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010af27:	8b 40 0c             	mov    0xc(%eax),%eax
c010af2a:	83 ec 04             	sub    $0x4,%esp
c010af2d:	6a 07                	push   $0x7
c010af2f:	68 00 f0 ff af       	push   $0xaffff000
c010af34:	50                   	push   %eax
c010af35:	e8 74 a9 ff ff       	call   c01058ae <pgdir_alloc_page>
c010af3a:	83 c4 10             	add    $0x10,%esp
c010af3d:	85 c0                	test   %eax,%eax
c010af3f:	75 19                	jne    c010af5a <load_icode+0x3f3>
c010af41:	68 b8 f1 10 c0       	push   $0xc010f1b8
c010af46:	68 fd f0 10 c0       	push   $0xc010f0fd
c010af4b:	68 67 02 00 00       	push   $0x267
c010af50:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010af55:	e8 07 68 ff ff       	call   c0101761 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010af5a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010af5d:	8b 40 0c             	mov    0xc(%eax),%eax
c010af60:	83 ec 04             	sub    $0x4,%esp
c010af63:	6a 07                	push   $0x7
c010af65:	68 00 e0 ff af       	push   $0xafffe000
c010af6a:	50                   	push   %eax
c010af6b:	e8 3e a9 ff ff       	call   c01058ae <pgdir_alloc_page>
c010af70:	83 c4 10             	add    $0x10,%esp
c010af73:	85 c0                	test   %eax,%eax
c010af75:	75 19                	jne    c010af90 <load_icode+0x429>
c010af77:	68 fc f1 10 c0       	push   $0xc010f1fc
c010af7c:	68 fd f0 10 c0       	push   $0xc010f0fd
c010af81:	68 68 02 00 00       	push   $0x268
c010af86:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010af8b:	e8 d1 67 ff ff       	call   c0101761 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010af90:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010af93:	8b 40 0c             	mov    0xc(%eax),%eax
c010af96:	83 ec 04             	sub    $0x4,%esp
c010af99:	6a 07                	push   $0x7
c010af9b:	68 00 d0 ff af       	push   $0xafffd000
c010afa0:	50                   	push   %eax
c010afa1:	e8 08 a9 ff ff       	call   c01058ae <pgdir_alloc_page>
c010afa6:	83 c4 10             	add    $0x10,%esp
c010afa9:	85 c0                	test   %eax,%eax
c010afab:	75 19                	jne    c010afc6 <load_icode+0x45f>
c010afad:	68 40 f2 10 c0       	push   $0xc010f240
c010afb2:	68 fd f0 10 c0       	push   $0xc010f0fd
c010afb7:	68 69 02 00 00       	push   $0x269
c010afbc:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010afc1:	e8 9b 67 ff ff       	call   c0101761 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010afc6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010afc9:	8b 40 0c             	mov    0xc(%eax),%eax
c010afcc:	83 ec 04             	sub    $0x4,%esp
c010afcf:	6a 07                	push   $0x7
c010afd1:	68 00 c0 ff af       	push   $0xafffc000
c010afd6:	50                   	push   %eax
c010afd7:	e8 d2 a8 ff ff       	call   c01058ae <pgdir_alloc_page>
c010afdc:	83 c4 10             	add    $0x10,%esp
c010afdf:	85 c0                	test   %eax,%eax
c010afe1:	75 19                	jne    c010affc <load_icode+0x495>
c010afe3:	68 84 f2 10 c0       	push   $0xc010f284
c010afe8:	68 fd f0 10 c0       	push   $0xc010f0fd
c010afed:	68 6a 02 00 00       	push   $0x26a
c010aff2:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010aff7:	e8 65 67 ff ff       	call   c0101761 <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010affc:	83 ec 0c             	sub    $0xc,%esp
c010afff:	ff 75 d0             	pushl  -0x30(%ebp)
c010b002:	e8 f4 ee ff ff       	call   c0109efb <mm_count_inc>
c010b007:	83 c4 10             	add    $0x10,%esp
    current->mm = mm;
c010b00a:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010b00f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b012:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010b015:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010b01a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b01d:	8b 52 0c             	mov    0xc(%edx),%edx
c010b020:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010b023:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010b02a:	77 17                	ja     c010b043 <load_icode+0x4dc>
c010b02c:	ff 75 b8             	pushl  -0x48(%ebp)
c010b02f:	68 ac f0 10 c0       	push   $0xc010f0ac
c010b034:	68 6f 02 00 00       	push   $0x26f
c010b039:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010b03e:	e8 1e 67 ff ff       	call   c0101761 <__panic>
c010b043:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010b046:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010b04c:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010b04f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b052:	8b 40 0c             	mov    0xc(%eax),%eax
c010b055:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010b058:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010b05f:	77 17                	ja     c010b078 <load_icode+0x511>
c010b061:	ff 75 b4             	pushl  -0x4c(%ebp)
c010b064:	68 ac f0 10 c0       	push   $0xc010f0ac
c010b069:	68 70 02 00 00       	push   $0x270
c010b06e:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010b073:	e8 e9 66 ff ff       	call   c0101761 <__panic>
c010b078:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b07b:	05 00 00 00 40       	add    $0x40000000,%eax
c010b080:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010b083:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010b086:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010b089:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010b08e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b091:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010b094:	83 ec 04             	sub    $0x4,%esp
c010b097:	6a 4c                	push   $0x4c
c010b099:	6a 00                	push   $0x0
c010b09b:	ff 75 b0             	pushl  -0x50(%ebp)
c010b09e:	e8 4d 14 00 00       	call   c010c4f0 <memset>
c010b0a3:	83 c4 10             	add    $0x10,%esp
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010b0a6:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b0a9:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010b0af:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b0b2:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010b0b8:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b0bb:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010b0bf:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b0c2:	66 89 50 28          	mov    %dx,0x28(%eax)
c010b0c6:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b0c9:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010b0cd:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b0d0:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = USTACKTOP;
c010b0d4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b0d7:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010b0de:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b0e1:	8b 50 18             	mov    0x18(%eax),%edx
c010b0e4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b0e7:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010b0ea:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b0ed:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010b0f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010b0fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0fe:	eb 3c                	jmp    c010b13c <load_icode+0x5d5>
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
        if (vm_flags & VM_WRITE) perm |= PTE_W;
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
            goto bad_cleanup_mmap;
c010b100:	90                   	nop
c010b101:	eb 07                	jmp    c010b10a <load_icode+0x5a3>
     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010b103:	90                   	nop
c010b104:	eb 04                	jmp    c010b10a <load_icode+0x5a3>
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010b106:	90                   	nop
c010b107:	eb 01                	jmp    c010b10a <load_icode+0x5a3>
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
        goto bad_cleanup_mmap;
c010b109:	90                   	nop
    tf->tf_eflags = FL_IF;
    ret = 0;
out:
    return ret;
bad_cleanup_mmap:
    exit_mmap(mm);
c010b10a:	83 ec 0c             	sub    $0xc,%esp
c010b10d:	ff 75 d0             	pushl  -0x30(%ebp)
c010b110:	e8 66 b9 ff ff       	call   c0106a7b <exit_mmap>
c010b115:	83 c4 10             	add    $0x10,%esp
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010b118:	83 ec 0c             	sub    $0xc,%esp
c010b11b:	ff 75 d0             	pushl  -0x30(%ebp)
c010b11e:	e8 5e f5 ff ff       	call   c010a681 <put_pgdir>
c010b123:	83 c4 10             	add    $0x10,%esp
c010b126:	eb 01                	jmp    c010b129 <load_icode+0x5c2>
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010b128:	90                   	nop
bad_cleanup_mmap:
    exit_mmap(mm);
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010b129:	83 ec 0c             	sub    $0xc,%esp
c010b12c:	ff 75 d0             	pushl  -0x30(%ebp)
c010b12f:	e8 b9 b6 ff ff       	call   c01067ed <mm_destroy>
c010b134:	83 c4 10             	add    $0x10,%esp
bad_mm:
    goto out;
c010b137:	eb c2                	jmp    c010b0fb <load_icode+0x594>

    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010b139:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010b13a:	eb bf                	jmp    c010b0fb <load_icode+0x594>
}
c010b13c:	c9                   	leave  
c010b13d:	c3                   	ret    

c010b13e <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010b13e:	55                   	push   %ebp
c010b13f:	89 e5                	mov    %esp,%ebp
c010b141:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010b144:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010b149:	8b 40 18             	mov    0x18(%eax),%eax
c010b14c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010b14f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b152:	6a 00                	push   $0x0
c010b154:	ff 75 0c             	pushl  0xc(%ebp)
c010b157:	50                   	push   %eax
c010b158:	ff 75 f4             	pushl  -0xc(%ebp)
c010b15b:	e8 dd c2 ff ff       	call   c010743d <user_mem_check>
c010b160:	83 c4 10             	add    $0x10,%esp
c010b163:	85 c0                	test   %eax,%eax
c010b165:	75 0a                	jne    c010b171 <do_execve+0x33>
        return -E_INVAL;
c010b167:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b16c:	e9 ed 00 00 00       	jmp    c010b25e <do_execve+0x120>
    }
    if (len > PROC_NAME_LEN) {
c010b171:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
c010b175:	76 07                	jbe    c010b17e <do_execve+0x40>
        len = PROC_NAME_LEN;
c010b177:	c7 45 0c 0f 00 00 00 	movl   $0xf,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010b17e:	83 ec 04             	sub    $0x4,%esp
c010b181:	6a 10                	push   $0x10
c010b183:	6a 00                	push   $0x0
c010b185:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010b188:	50                   	push   %eax
c010b189:	e8 62 13 00 00       	call   c010c4f0 <memset>
c010b18e:	83 c4 10             	add    $0x10,%esp
    memcpy(local_name, name, len);
c010b191:	83 ec 04             	sub    $0x4,%esp
c010b194:	ff 75 0c             	pushl  0xc(%ebp)
c010b197:	ff 75 08             	pushl  0x8(%ebp)
c010b19a:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010b19d:	50                   	push   %eax
c010b19e:	e8 30 14 00 00       	call   c010c5d3 <memcpy>
c010b1a3:	83 c4 10             	add    $0x10,%esp

    if (mm != NULL) {
c010b1a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b1aa:	74 56                	je     c010b202 <do_execve+0xc4>
        lcr3(boot_cr3);
c010b1ac:	a1 60 3d 1b c0       	mov    0xc01b3d60,%eax
c010b1b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b1b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1b7:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010b1ba:	83 ec 0c             	sub    $0xc,%esp
c010b1bd:	ff 75 f4             	pushl  -0xc(%ebp)
c010b1c0:	e8 50 ed ff ff       	call   c0109f15 <mm_count_dec>
c010b1c5:	83 c4 10             	add    $0x10,%esp
c010b1c8:	85 c0                	test   %eax,%eax
c010b1ca:	75 2a                	jne    c010b1f6 <do_execve+0xb8>
            exit_mmap(mm);
c010b1cc:	83 ec 0c             	sub    $0xc,%esp
c010b1cf:	ff 75 f4             	pushl  -0xc(%ebp)
c010b1d2:	e8 a4 b8 ff ff       	call   c0106a7b <exit_mmap>
c010b1d7:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c010b1da:	83 ec 0c             	sub    $0xc,%esp
c010b1dd:	ff 75 f4             	pushl  -0xc(%ebp)
c010b1e0:	e8 9c f4 ff ff       	call   c010a681 <put_pgdir>
c010b1e5:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010b1e8:	83 ec 0c             	sub    $0xc,%esp
c010b1eb:	ff 75 f4             	pushl  -0xc(%ebp)
c010b1ee:	e8 fa b5 ff ff       	call   c01067ed <mm_destroy>
c010b1f3:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c010b1f6:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010b1fb:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010b202:	83 ec 08             	sub    $0x8,%esp
c010b205:	ff 75 14             	pushl  0x14(%ebp)
c010b208:	ff 75 10             	pushl  0x10(%ebp)
c010b20b:	e8 57 f9 ff ff       	call   c010ab67 <load_icode>
c010b210:	83 c4 10             	add    $0x10,%esp
c010b213:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b216:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b21a:	75 1c                	jne    c010b238 <do_execve+0xfa>
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010b21c:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010b221:	83 ec 08             	sub    $0x8,%esp
c010b224:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010b227:	52                   	push   %edx
c010b228:	50                   	push   %eax
c010b229:	e8 a7 ee ff ff       	call   c010a0d5 <set_proc_name>
c010b22e:	83 c4 10             	add    $0x10,%esp
    return 0;
c010b231:	b8 00 00 00 00       	mov    $0x0,%eax
c010b236:	eb 26                	jmp    c010b25e <do_execve+0x120>
        }
        current->mm = NULL;
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
c010b238:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010b239:	83 ec 0c             	sub    $0xc,%esp
c010b23c:	ff 75 f0             	pushl  -0x10(%ebp)
c010b23f:	e8 53 f7 ff ff       	call   c010a997 <do_exit>
c010b244:	83 c4 10             	add    $0x10,%esp
    panic("already exit: %e.\n", ret);
c010b247:	ff 75 f0             	pushl  -0x10(%ebp)
c010b24a:	68 c7 f2 10 c0       	push   $0xc010f2c7
c010b24f:	68 b2 02 00 00       	push   $0x2b2
c010b254:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010b259:	e8 03 65 ff ff       	call   c0101761 <__panic>
}
c010b25e:	c9                   	leave  
c010b25f:	c3                   	ret    

c010b260 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010b260:	55                   	push   %ebp
c010b261:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010b263:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010b268:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010b26f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b274:	5d                   	pop    %ebp
c010b275:	c3                   	ret    

c010b276 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010b276:	55                   	push   %ebp
c010b277:	89 e5                	mov    %esp,%ebp
c010b279:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c010b27c:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010b281:	8b 40 18             	mov    0x18(%eax),%eax
c010b284:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010b287:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b28b:	74 21                	je     c010b2ae <do_wait+0x38>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010b28d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b290:	6a 01                	push   $0x1
c010b292:	6a 04                	push   $0x4
c010b294:	50                   	push   %eax
c010b295:	ff 75 ec             	pushl  -0x14(%ebp)
c010b298:	e8 a0 c1 ff ff       	call   c010743d <user_mem_check>
c010b29d:	83 c4 10             	add    $0x10,%esp
c010b2a0:	85 c0                	test   %eax,%eax
c010b2a2:	75 0a                	jne    c010b2ae <do_wait+0x38>
            return -E_INVAL;
c010b2a4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b2a9:	e9 54 01 00 00       	jmp    c010b402 <do_wait+0x18c>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010b2ae:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010b2b5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b2b9:	74 39                	je     c010b2f4 <do_wait+0x7e>
        proc = find_proc(pid);
c010b2bb:	83 ec 0c             	sub    $0xc,%esp
c010b2be:	ff 75 08             	pushl  0x8(%ebp)
c010b2c1:	e8 e4 f1 ff ff       	call   c010a4aa <find_proc>
c010b2c6:	83 c4 10             	add    $0x10,%esp
c010b2c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010b2cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b2d0:	74 4f                	je     c010b321 <do_wait+0xab>
c010b2d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2d5:	8b 50 14             	mov    0x14(%eax),%edx
c010b2d8:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010b2dd:	39 c2                	cmp    %eax,%edx
c010b2df:	75 40                	jne    c010b321 <do_wait+0xab>
            haskid = 1;
c010b2e1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010b2e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2eb:	8b 00                	mov    (%eax),%eax
c010b2ed:	83 f8 03             	cmp    $0x3,%eax
c010b2f0:	75 2f                	jne    c010b321 <do_wait+0xab>
                goto found;
c010b2f2:	eb 7f                	jmp    c010b373 <do_wait+0xfd>
            }
        }
    }
    else {
        proc = current->cptr;
c010b2f4:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010b2f9:	8b 40 70             	mov    0x70(%eax),%eax
c010b2fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010b2ff:	eb 1a                	jmp    c010b31b <do_wait+0xa5>
            haskid = 1;
c010b301:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010b308:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b30b:	8b 00                	mov    (%eax),%eax
c010b30d:	83 f8 03             	cmp    $0x3,%eax
c010b310:	74 60                	je     c010b372 <do_wait+0xfc>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010b312:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b315:	8b 40 78             	mov    0x78(%eax),%eax
c010b318:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b31b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b31f:	75 e0                	jne    c010b301 <do_wait+0x8b>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010b321:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b325:	74 41                	je     c010b368 <do_wait+0xf2>
        current->state = PROC_SLEEPING;
c010b327:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010b32c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010b332:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010b337:	c7 40 6c 01 00 00 80 	movl   $0x80000001,0x6c(%eax)
        schedule();
c010b33e:	e8 b9 07 00 00       	call   c010bafc <schedule>
        if (current->flags & PF_EXITING) {
c010b343:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010b348:	8b 40 44             	mov    0x44(%eax),%eax
c010b34b:	83 e0 01             	and    $0x1,%eax
c010b34e:	85 c0                	test   %eax,%eax
c010b350:	0f 84 58 ff ff ff    	je     c010b2ae <do_wait+0x38>
            do_exit(-E_KILLED);
c010b356:	83 ec 0c             	sub    $0xc,%esp
c010b359:	6a f7                	push   $0xfffffff7
c010b35b:	e8 37 f6 ff ff       	call   c010a997 <do_exit>
c010b360:	83 c4 10             	add    $0x10,%esp
        }
        goto repeat;
c010b363:	e9 46 ff ff ff       	jmp    c010b2ae <do_wait+0x38>
    }
    return -E_BAD_PROC;
c010b368:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010b36d:	e9 90 00 00 00       	jmp    c010b402 <do_wait+0x18c>
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
            haskid = 1;
            if (proc->state == PROC_ZOMBIE) {
                goto found;
c010b372:	90                   	nop
        goto repeat;
    }
    return -E_BAD_PROC;

found:
    if (proc == idleproc || proc == initproc) {
c010b373:	a1 00 1d 1b c0       	mov    0xc01b1d00,%eax
c010b378:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b37b:	74 0a                	je     c010b387 <do_wait+0x111>
c010b37d:	a1 04 1d 1b c0       	mov    0xc01b1d04,%eax
c010b382:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b385:	75 17                	jne    c010b39e <do_wait+0x128>
        panic("wait idleproc or initproc.\n");
c010b387:	83 ec 04             	sub    $0x4,%esp
c010b38a:	68 da f2 10 c0       	push   $0xc010f2da
c010b38f:	68 eb 02 00 00       	push   $0x2eb
c010b394:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010b399:	e8 c3 63 ff ff       	call   c0101761 <__panic>
    }
    if (code_store != NULL) {
c010b39e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b3a2:	74 0b                	je     c010b3af <do_wait+0x139>
        *code_store = proc->exit_code;
c010b3a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3a7:	8b 50 68             	mov    0x68(%eax),%edx
c010b3aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3ad:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010b3af:	e8 a8 e9 ff ff       	call   c0109d5c <__intr_save>
c010b3b4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010b3b7:	83 ec 0c             	sub    $0xc,%esp
c010b3ba:	ff 75 f4             	pushl  -0xc(%ebp)
c010b3bd:	e8 b4 f0 ff ff       	call   c010a476 <unhash_proc>
c010b3c2:	83 c4 10             	add    $0x10,%esp
        remove_links(proc);
c010b3c5:	83 ec 0c             	sub    $0xc,%esp
c010b3c8:	ff 75 f4             	pushl  -0xc(%ebp)
c010b3cb:	e8 15 ee ff ff       	call   c010a1e5 <remove_links>
c010b3d0:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010b3d3:	83 ec 0c             	sub    $0xc,%esp
c010b3d6:	ff 75 e8             	pushl  -0x18(%ebp)
c010b3d9:	e8 a8 e9 ff ff       	call   c0109d86 <__intr_restore>
c010b3de:	83 c4 10             	add    $0x10,%esp
    put_kstack(proc);
c010b3e1:	83 ec 0c             	sub    $0xc,%esp
c010b3e4:	ff 75 f4             	pushl  -0xc(%ebp)
c010b3e7:	e8 d3 f1 ff ff       	call   c010a5bf <put_kstack>
c010b3ec:	83 c4 10             	add    $0x10,%esp
    kfree(proc);
c010b3ef:	83 ec 0c             	sub    $0xc,%esp
c010b3f2:	ff 75 f4             	pushl  -0xc(%ebp)
c010b3f5:	e8 93 d2 ff ff       	call   c010868d <kfree>
c010b3fa:	83 c4 10             	add    $0x10,%esp
    return 0;
c010b3fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b402:	c9                   	leave  
c010b403:	c3                   	ret    

c010b404 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010b404:	55                   	push   %ebp
c010b405:	89 e5                	mov    %esp,%ebp
c010b407:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010b40a:	83 ec 0c             	sub    $0xc,%esp
c010b40d:	ff 75 08             	pushl  0x8(%ebp)
c010b410:	e8 95 f0 ff ff       	call   c010a4aa <find_proc>
c010b415:	83 c4 10             	add    $0x10,%esp
c010b418:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b41b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b41f:	74 44                	je     c010b465 <do_kill+0x61>
        if (!(proc->flags & PF_EXITING)) {
c010b421:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b424:	8b 40 44             	mov    0x44(%eax),%eax
c010b427:	83 e0 01             	and    $0x1,%eax
c010b42a:	85 c0                	test   %eax,%eax
c010b42c:	75 30                	jne    c010b45e <do_kill+0x5a>
            proc->flags |= PF_EXITING;
c010b42e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b431:	8b 40 44             	mov    0x44(%eax),%eax
c010b434:	83 c8 01             	or     $0x1,%eax
c010b437:	89 c2                	mov    %eax,%edx
c010b439:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b43c:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010b43f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b442:	8b 40 6c             	mov    0x6c(%eax),%eax
c010b445:	85 c0                	test   %eax,%eax
c010b447:	79 0e                	jns    c010b457 <do_kill+0x53>
                wakeup_proc(proc);
c010b449:	83 ec 0c             	sub    $0xc,%esp
c010b44c:	ff 75 f4             	pushl  -0xc(%ebp)
c010b44f:	e8 1b 06 00 00       	call   c010ba6f <wakeup_proc>
c010b454:	83 c4 10             	add    $0x10,%esp
            }
            return 0;
c010b457:	b8 00 00 00 00       	mov    $0x0,%eax
c010b45c:	eb 0c                	jmp    c010b46a <do_kill+0x66>
        }
        return -E_KILLED;
c010b45e:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010b463:	eb 05                	jmp    c010b46a <do_kill+0x66>
    }
    return -E_INVAL;
c010b465:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010b46a:	c9                   	leave  
c010b46b:	c3                   	ret    

c010b46c <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010b46c:	55                   	push   %ebp
c010b46d:	89 e5                	mov    %esp,%ebp
c010b46f:	57                   	push   %edi
c010b470:	56                   	push   %esi
c010b471:	53                   	push   %ebx
c010b472:	83 ec 1c             	sub    $0x1c,%esp
    int ret, len = strlen(name);
c010b475:	83 ec 0c             	sub    $0xc,%esp
c010b478:	ff 75 08             	pushl  0x8(%ebp)
c010b47b:	e8 3f 0d 00 00       	call   c010c1bf <strlen>
c010b480:	83 c4 10             	add    $0x10,%esp
c010b483:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010b486:	b8 04 00 00 00       	mov    $0x4,%eax
c010b48b:	8b 55 08             	mov    0x8(%ebp),%edx
c010b48e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010b491:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010b494:	8b 75 10             	mov    0x10(%ebp),%esi
c010b497:	89 f7                	mov    %esi,%edi
c010b499:	cd 80                	int    $0x80
c010b49b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010b49e:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010b4a1:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010b4a4:	5b                   	pop    %ebx
c010b4a5:	5e                   	pop    %esi
c010b4a6:	5f                   	pop    %edi
c010b4a7:	5d                   	pop    %ebp
c010b4a8:	c3                   	ret    

c010b4a9 <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010b4a9:	55                   	push   %ebp
c010b4aa:	89 e5                	mov    %esp,%ebp
c010b4ac:	83 ec 08             	sub    $0x8,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
#else
    KERNEL_EXECVE(exit);
c010b4af:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010b4b4:	8b 40 04             	mov    0x4(%eax),%eax
c010b4b7:	83 ec 04             	sub    $0x4,%esp
c010b4ba:	68 f6 f2 10 c0       	push   $0xc010f2f6
c010b4bf:	50                   	push   %eax
c010b4c0:	68 fc f2 10 c0       	push   $0xc010f2fc
c010b4c5:	e8 b9 4d ff ff       	call   c0100283 <cprintf>
c010b4ca:	83 c4 10             	add    $0x10,%esp
c010b4cd:	b8 38 79 00 00       	mov    $0x7938,%eax
c010b4d2:	83 ec 04             	sub    $0x4,%esp
c010b4d5:	50                   	push   %eax
c010b4d6:	68 14 4f 16 c0       	push   $0xc0164f14
c010b4db:	68 f6 f2 10 c0       	push   $0xc010f2f6
c010b4e0:	e8 87 ff ff ff       	call   c010b46c <kernel_execve>
c010b4e5:	83 c4 10             	add    $0x10,%esp
#endif
    panic("user_main execve failed.\n");
c010b4e8:	83 ec 04             	sub    $0x4,%esp
c010b4eb:	68 23 f3 10 c0       	push   $0xc010f323
c010b4f0:	68 34 03 00 00       	push   $0x334
c010b4f5:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010b4fa:	e8 62 62 ff ff       	call   c0101761 <__panic>

c010b4ff <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010b4ff:	55                   	push   %ebp
c010b500:	89 e5                	mov    %esp,%ebp
c010b502:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010b505:	e8 90 96 ff ff       	call   c0104b9a <nr_free_pages>
c010b50a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010b50d:	e8 46 d0 ff ff       	call   c0108558 <kallocated>
c010b512:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010b515:	83 ec 04             	sub    $0x4,%esp
c010b518:	6a 00                	push   $0x0
c010b51a:	6a 00                	push   $0x0
c010b51c:	68 a9 b4 10 c0       	push   $0xc010b4a9
c010b521:	e8 f4 ef ff ff       	call   c010a51a <kernel_thread>
c010b526:	83 c4 10             	add    $0x10,%esp
c010b529:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010b52c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b530:	7f 1c                	jg     c010b54e <init_main+0x4f>
        panic("create user_main failed.\n");
c010b532:	83 ec 04             	sub    $0x4,%esp
c010b535:	68 3d f3 10 c0       	push   $0xc010f33d
c010b53a:	68 3f 03 00 00       	push   $0x33f
c010b53f:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010b544:	e8 18 62 ff ff       	call   c0101761 <__panic>
    }

    while (do_wait(0, NULL) == 0) {
        schedule();
c010b549:	e8 ae 05 00 00       	call   c010bafc <schedule>
    int pid = kernel_thread(user_main, NULL, 0);
    if (pid <= 0) {
        panic("create user_main failed.\n");
    }

    while (do_wait(0, NULL) == 0) {
c010b54e:	83 ec 08             	sub    $0x8,%esp
c010b551:	6a 00                	push   $0x0
c010b553:	6a 00                	push   $0x0
c010b555:	e8 1c fd ff ff       	call   c010b276 <do_wait>
c010b55a:	83 c4 10             	add    $0x10,%esp
c010b55d:	85 c0                	test   %eax,%eax
c010b55f:	74 e8                	je     c010b549 <init_main+0x4a>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010b561:	83 ec 0c             	sub    $0xc,%esp
c010b564:	68 58 f3 10 c0       	push   $0xc010f358
c010b569:	e8 15 4d ff ff       	call   c0100283 <cprintf>
c010b56e:	83 c4 10             	add    $0x10,%esp
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010b571:	a1 04 1d 1b c0       	mov    0xc01b1d04,%eax
c010b576:	8b 40 70             	mov    0x70(%eax),%eax
c010b579:	85 c0                	test   %eax,%eax
c010b57b:	75 18                	jne    c010b595 <init_main+0x96>
c010b57d:	a1 04 1d 1b c0       	mov    0xc01b1d04,%eax
c010b582:	8b 40 74             	mov    0x74(%eax),%eax
c010b585:	85 c0                	test   %eax,%eax
c010b587:	75 0c                	jne    c010b595 <init_main+0x96>
c010b589:	a1 04 1d 1b c0       	mov    0xc01b1d04,%eax
c010b58e:	8b 40 78             	mov    0x78(%eax),%eax
c010b591:	85 c0                	test   %eax,%eax
c010b593:	74 19                	je     c010b5ae <init_main+0xaf>
c010b595:	68 7c f3 10 c0       	push   $0xc010f37c
c010b59a:	68 fd f0 10 c0       	push   $0xc010f0fd
c010b59f:	68 47 03 00 00       	push   $0x347
c010b5a4:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010b5a9:	e8 b3 61 ff ff       	call   c0101761 <__panic>
    assert(nr_process == 2);
c010b5ae:	a1 20 3d 1b c0       	mov    0xc01b3d20,%eax
c010b5b3:	83 f8 02             	cmp    $0x2,%eax
c010b5b6:	74 19                	je     c010b5d1 <init_main+0xd2>
c010b5b8:	68 c7 f3 10 c0       	push   $0xc010f3c7
c010b5bd:	68 fd f0 10 c0       	push   $0xc010f0fd
c010b5c2:	68 48 03 00 00       	push   $0x348
c010b5c7:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010b5cc:	e8 90 61 ff ff       	call   c0101761 <__panic>
c010b5d1:	c7 45 e4 58 3e 1b c0 	movl   $0xc01b3e58,-0x1c(%ebp)
c010b5d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5db:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010b5de:	8b 15 04 1d 1b c0    	mov    0xc01b1d04,%edx
c010b5e4:	83 c2 58             	add    $0x58,%edx
c010b5e7:	39 d0                	cmp    %edx,%eax
c010b5e9:	74 19                	je     c010b604 <init_main+0x105>
c010b5eb:	68 d8 f3 10 c0       	push   $0xc010f3d8
c010b5f0:	68 fd f0 10 c0       	push   $0xc010f0fd
c010b5f5:	68 49 03 00 00       	push   $0x349
c010b5fa:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010b5ff:	e8 5d 61 ff ff       	call   c0101761 <__panic>
c010b604:	c7 45 e8 58 3e 1b c0 	movl   $0xc01b3e58,-0x18(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010b60b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b60e:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010b610:	8b 15 04 1d 1b c0    	mov    0xc01b1d04,%edx
c010b616:	83 c2 58             	add    $0x58,%edx
c010b619:	39 d0                	cmp    %edx,%eax
c010b61b:	74 19                	je     c010b636 <init_main+0x137>
c010b61d:	68 08 f4 10 c0       	push   $0xc010f408
c010b622:	68 fd f0 10 c0       	push   $0xc010f0fd
c010b627:	68 4a 03 00 00       	push   $0x34a
c010b62c:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010b631:	e8 2b 61 ff ff       	call   c0101761 <__panic>
    assert(nr_free_pages_store == nr_free_pages());
c010b636:	e8 5f 95 ff ff       	call   c0104b9a <nr_free_pages>
c010b63b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010b63e:	74 19                	je     c010b659 <init_main+0x15a>
c010b640:	68 38 f4 10 c0       	push   $0xc010f438
c010b645:	68 fd f0 10 c0       	push   $0xc010f0fd
c010b64a:	68 4b 03 00 00       	push   $0x34b
c010b64f:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010b654:	e8 08 61 ff ff       	call   c0101761 <__panic>
    assert(kernel_allocated_store == kallocated());
c010b659:	e8 fa ce ff ff       	call   c0108558 <kallocated>
c010b65e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010b661:	74 19                	je     c010b67c <init_main+0x17d>
c010b663:	68 60 f4 10 c0       	push   $0xc010f460
c010b668:	68 fd f0 10 c0       	push   $0xc010f0fd
c010b66d:	68 4c 03 00 00       	push   $0x34c
c010b672:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010b677:	e8 e5 60 ff ff       	call   c0101761 <__panic>
    cprintf("init check memory pass.\n");
c010b67c:	83 ec 0c             	sub    $0xc,%esp
c010b67f:	68 87 f4 10 c0       	push   $0xc010f487
c010b684:	e8 fa 4b ff ff       	call   c0100283 <cprintf>
c010b689:	83 c4 10             	add    $0x10,%esp
    return 0;
c010b68c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b691:	c9                   	leave  
c010b692:	c3                   	ret    

c010b693 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010b693:	55                   	push   %ebp
c010b694:	89 e5                	mov    %esp,%ebp
c010b696:	83 ec 18             	sub    $0x18,%esp
c010b699:	c7 45 e8 58 3e 1b c0 	movl   $0xc01b3e58,-0x18(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b6a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b6a3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b6a6:	89 50 04             	mov    %edx,0x4(%eax)
c010b6a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b6ac:	8b 50 04             	mov    0x4(%eax),%edx
c010b6af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b6b2:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010b6b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b6bb:	eb 26                	jmp    c010b6e3 <proc_init+0x50>
        list_init(hash_list + i);
c010b6bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6c0:	c1 e0 03             	shl    $0x3,%eax
c010b6c3:	05 20 1d 1b c0       	add    $0xc01b1d20,%eax
c010b6c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b6cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6ce:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b6d1:	89 50 04             	mov    %edx,0x4(%eax)
c010b6d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6d7:	8b 50 04             	mov    0x4(%eax),%edx
c010b6da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6dd:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010b6df:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b6e3:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010b6ea:	7e d1                	jle    c010b6bd <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010b6ec:	e8 80 e8 ff ff       	call   c0109f71 <alloc_proc>
c010b6f1:	a3 00 1d 1b c0       	mov    %eax,0xc01b1d00
c010b6f6:	a1 00 1d 1b c0       	mov    0xc01b1d00,%eax
c010b6fb:	85 c0                	test   %eax,%eax
c010b6fd:	75 17                	jne    c010b716 <proc_init+0x83>
        panic("cannot alloc idleproc.\n");
c010b6ff:	83 ec 04             	sub    $0x4,%esp
c010b702:	68 a0 f4 10 c0       	push   $0xc010f4a0
c010b707:	68 5d 03 00 00       	push   $0x35d
c010b70c:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010b711:	e8 4b 60 ff ff       	call   c0101761 <__panic>
    }

    idleproc->pid = 0;
c010b716:	a1 00 1d 1b c0       	mov    0xc01b1d00,%eax
c010b71b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010b722:	a1 00 1d 1b c0       	mov    0xc01b1d00,%eax
c010b727:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010b72d:	a1 00 1d 1b c0       	mov    0xc01b1d00,%eax
c010b732:	ba 00 d0 12 c0       	mov    $0xc012d000,%edx
c010b737:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010b73a:	a1 00 1d 1b c0       	mov    0xc01b1d00,%eax
c010b73f:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010b746:	a1 00 1d 1b c0       	mov    0xc01b1d00,%eax
c010b74b:	83 ec 08             	sub    $0x8,%esp
c010b74e:	68 b8 f4 10 c0       	push   $0xc010f4b8
c010b753:	50                   	push   %eax
c010b754:	e8 7c e9 ff ff       	call   c010a0d5 <set_proc_name>
c010b759:	83 c4 10             	add    $0x10,%esp
    nr_process ++;
c010b75c:	a1 20 3d 1b c0       	mov    0xc01b3d20,%eax
c010b761:	83 c0 01             	add    $0x1,%eax
c010b764:	a3 20 3d 1b c0       	mov    %eax,0xc01b3d20

    current = idleproc;
c010b769:	a1 00 1d 1b c0       	mov    0xc01b1d00,%eax
c010b76e:	a3 08 1d 1b c0       	mov    %eax,0xc01b1d08

    int pid = kernel_thread(init_main, NULL, 0);
c010b773:	83 ec 04             	sub    $0x4,%esp
c010b776:	6a 00                	push   $0x0
c010b778:	6a 00                	push   $0x0
c010b77a:	68 ff b4 10 c0       	push   $0xc010b4ff
c010b77f:	e8 96 ed ff ff       	call   c010a51a <kernel_thread>
c010b784:	83 c4 10             	add    $0x10,%esp
c010b787:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010b78a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b78e:	7f 17                	jg     c010b7a7 <proc_init+0x114>
        panic("create init_main failed.\n");
c010b790:	83 ec 04             	sub    $0x4,%esp
c010b793:	68 bd f4 10 c0       	push   $0xc010f4bd
c010b798:	68 6b 03 00 00       	push   $0x36b
c010b79d:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010b7a2:	e8 ba 5f ff ff       	call   c0101761 <__panic>
    }

    initproc = find_proc(pid);
c010b7a7:	83 ec 0c             	sub    $0xc,%esp
c010b7aa:	ff 75 ec             	pushl  -0x14(%ebp)
c010b7ad:	e8 f8 ec ff ff       	call   c010a4aa <find_proc>
c010b7b2:	83 c4 10             	add    $0x10,%esp
c010b7b5:	a3 04 1d 1b c0       	mov    %eax,0xc01b1d04
    set_proc_name(initproc, "init");
c010b7ba:	a1 04 1d 1b c0       	mov    0xc01b1d04,%eax
c010b7bf:	83 ec 08             	sub    $0x8,%esp
c010b7c2:	68 d7 f4 10 c0       	push   $0xc010f4d7
c010b7c7:	50                   	push   %eax
c010b7c8:	e8 08 e9 ff ff       	call   c010a0d5 <set_proc_name>
c010b7cd:	83 c4 10             	add    $0x10,%esp

    assert(idleproc != NULL && idleproc->pid == 0);
c010b7d0:	a1 00 1d 1b c0       	mov    0xc01b1d00,%eax
c010b7d5:	85 c0                	test   %eax,%eax
c010b7d7:	74 0c                	je     c010b7e5 <proc_init+0x152>
c010b7d9:	a1 00 1d 1b c0       	mov    0xc01b1d00,%eax
c010b7de:	8b 40 04             	mov    0x4(%eax),%eax
c010b7e1:	85 c0                	test   %eax,%eax
c010b7e3:	74 19                	je     c010b7fe <proc_init+0x16b>
c010b7e5:	68 dc f4 10 c0       	push   $0xc010f4dc
c010b7ea:	68 fd f0 10 c0       	push   $0xc010f0fd
c010b7ef:	68 71 03 00 00       	push   $0x371
c010b7f4:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010b7f9:	e8 63 5f ff ff       	call   c0101761 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010b7fe:	a1 04 1d 1b c0       	mov    0xc01b1d04,%eax
c010b803:	85 c0                	test   %eax,%eax
c010b805:	74 0d                	je     c010b814 <proc_init+0x181>
c010b807:	a1 04 1d 1b c0       	mov    0xc01b1d04,%eax
c010b80c:	8b 40 04             	mov    0x4(%eax),%eax
c010b80f:	83 f8 01             	cmp    $0x1,%eax
c010b812:	74 19                	je     c010b82d <proc_init+0x19a>
c010b814:	68 04 f5 10 c0       	push   $0xc010f504
c010b819:	68 fd f0 10 c0       	push   $0xc010f0fd
c010b81e:	68 72 03 00 00       	push   $0x372
c010b823:	68 d0 f0 10 c0       	push   $0xc010f0d0
c010b828:	e8 34 5f ff ff       	call   c0101761 <__panic>
}
c010b82d:	90                   	nop
c010b82e:	c9                   	leave  
c010b82f:	c3                   	ret    

c010b830 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010b830:	55                   	push   %ebp
c010b831:	89 e5                	mov    %esp,%ebp
c010b833:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010b836:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010b83b:	8b 40 10             	mov    0x10(%eax),%eax
c010b83e:	85 c0                	test   %eax,%eax
c010b840:	74 f4                	je     c010b836 <cpu_idle+0x6>
            schedule();
c010b842:	e8 b5 02 00 00       	call   c010bafc <schedule>
        }
    }
c010b847:	eb ed                	jmp    c010b836 <cpu_idle+0x6>

c010b849 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010b849:	55                   	push   %ebp
c010b84a:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010b84c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b850:	75 11                	jne    c010b863 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010b852:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010b857:	c7 80 9c 00 00 00 01 	movl   $0x1,0x9c(%eax)
c010b85e:	00 00 00 
    else current->lab6_priority = priority;
}
c010b861:	eb 0e                	jmp    c010b871 <lab6_set_priority+0x28>
void
lab6_set_priority(uint32_t priority)
{
    if (priority == 0)
        current->lab6_priority = 1;
    else current->lab6_priority = priority;
c010b863:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010b868:	8b 55 08             	mov    0x8(%ebp),%edx
c010b86b:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
}
c010b871:	90                   	nop
c010b872:	5d                   	pop    %ebp
c010b873:	c3                   	ret    

c010b874 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010b874:	55                   	push   %ebp
c010b875:	89 e5                	mov    %esp,%ebp
c010b877:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010b87a:	9c                   	pushf  
c010b87b:	58                   	pop    %eax
c010b87c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010b87f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010b882:	25 00 02 00 00       	and    $0x200,%eax
c010b887:	85 c0                	test   %eax,%eax
c010b889:	74 0c                	je     c010b897 <__intr_save+0x23>
        intr_disable();
c010b88b:	e8 74 7c ff ff       	call   c0103504 <intr_disable>
        return 1;
c010b890:	b8 01 00 00 00       	mov    $0x1,%eax
c010b895:	eb 05                	jmp    c010b89c <__intr_save+0x28>
    }
    return 0;
c010b897:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b89c:	c9                   	leave  
c010b89d:	c3                   	ret    

c010b89e <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010b89e:	55                   	push   %ebp
c010b89f:	89 e5                	mov    %esp,%ebp
c010b8a1:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010b8a4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b8a8:	74 05                	je     c010b8af <__intr_restore+0x11>
        intr_enable();
c010b8aa:	e8 4e 7c ff ff       	call   c01034fd <intr_enable>
    }
}
c010b8af:	90                   	nop
c010b8b0:	c9                   	leave  
c010b8b1:	c3                   	ret    

c010b8b2 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010b8b2:	55                   	push   %ebp
c010b8b3:	89 e5                	mov    %esp,%ebp
c010b8b5:	53                   	push   %ebx
c010b8b6:	83 ec 04             	sub    $0x4,%esp
    cprintf("cur Enqueue proc, pid= %d; name= %s; stride= %d; priority= %d'\n", proc->pid, proc->name, proc->lab6_stride, proc->lab6_priority);
c010b8b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8bc:	8b 88 9c 00 00 00    	mov    0x9c(%eax),%ecx
c010b8c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8c5:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010b8cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8ce:	8d 58 48             	lea    0x48(%eax),%ebx
c010b8d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8d4:	8b 40 04             	mov    0x4(%eax),%eax
c010b8d7:	83 ec 0c             	sub    $0xc,%esp
c010b8da:	51                   	push   %ecx
c010b8db:	52                   	push   %edx
c010b8dc:	53                   	push   %ebx
c010b8dd:	50                   	push   %eax
c010b8de:	68 2c f5 10 c0       	push   $0xc010f52c
c010b8e3:	e8 9b 49 ff ff       	call   c0100283 <cprintf>
c010b8e8:	83 c4 20             	add    $0x20,%esp
    if (proc != idleproc) {
c010b8eb:	a1 00 1d 1b c0       	mov    0xc01b1d00,%eax
c010b8f0:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b8f3:	74 1a                	je     c010b90f <sched_class_enqueue+0x5d>
        sched_class->enqueue(rq, proc);
c010b8f5:	a1 3c 3d 1b c0       	mov    0xc01b3d3c,%eax
c010b8fa:	8b 40 08             	mov    0x8(%eax),%eax
c010b8fd:	8b 15 40 3d 1b c0    	mov    0xc01b3d40,%edx
c010b903:	83 ec 08             	sub    $0x8,%esp
c010b906:	ff 75 08             	pushl  0x8(%ebp)
c010b909:	52                   	push   %edx
c010b90a:	ff d0                	call   *%eax
c010b90c:	83 c4 10             	add    $0x10,%esp
    }
}
c010b90f:	90                   	nop
c010b910:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010b913:	c9                   	leave  
c010b914:	c3                   	ret    

c010b915 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010b915:	55                   	push   %ebp
c010b916:	89 e5                	mov    %esp,%ebp
c010b918:	53                   	push   %ebx
c010b919:	83 ec 04             	sub    $0x4,%esp
    cprintf("cur Dequeue proc, pid= %d; name= %s; stride= %u; priority= %u\n", proc->pid, proc->name, proc->lab6_stride, proc->lab6_priority);
c010b91c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b91f:	8b 88 9c 00 00 00    	mov    0x9c(%eax),%ecx
c010b925:	8b 45 08             	mov    0x8(%ebp),%eax
c010b928:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010b92e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b931:	8d 58 48             	lea    0x48(%eax),%ebx
c010b934:	8b 45 08             	mov    0x8(%ebp),%eax
c010b937:	8b 40 04             	mov    0x4(%eax),%eax
c010b93a:	83 ec 0c             	sub    $0xc,%esp
c010b93d:	51                   	push   %ecx
c010b93e:	52                   	push   %edx
c010b93f:	53                   	push   %ebx
c010b940:	50                   	push   %eax
c010b941:	68 6c f5 10 c0       	push   $0xc010f56c
c010b946:	e8 38 49 ff ff       	call   c0100283 <cprintf>
c010b94b:	83 c4 20             	add    $0x20,%esp
    sched_class->dequeue(rq, proc);
c010b94e:	a1 3c 3d 1b c0       	mov    0xc01b3d3c,%eax
c010b953:	8b 40 0c             	mov    0xc(%eax),%eax
c010b956:	8b 15 40 3d 1b c0    	mov    0xc01b3d40,%edx
c010b95c:	83 ec 08             	sub    $0x8,%esp
c010b95f:	ff 75 08             	pushl  0x8(%ebp)
c010b962:	52                   	push   %edx
c010b963:	ff d0                	call   *%eax
c010b965:	83 c4 10             	add    $0x10,%esp
}
c010b968:	90                   	nop
c010b969:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010b96c:	c9                   	leave  
c010b96d:	c3                   	ret    

c010b96e <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010b96e:	55                   	push   %ebp
c010b96f:	89 e5                	mov    %esp,%ebp
c010b971:	83 ec 08             	sub    $0x8,%esp
    return sched_class->pick_next(rq);
c010b974:	a1 3c 3d 1b c0       	mov    0xc01b3d3c,%eax
c010b979:	8b 40 10             	mov    0x10(%eax),%eax
c010b97c:	8b 15 40 3d 1b c0    	mov    0xc01b3d40,%edx
c010b982:	83 ec 0c             	sub    $0xc,%esp
c010b985:	52                   	push   %edx
c010b986:	ff d0                	call   *%eax
c010b988:	83 c4 10             	add    $0x10,%esp
}
c010b98b:	c9                   	leave  
c010b98c:	c3                   	ret    

c010b98d <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010b98d:	55                   	push   %ebp
c010b98e:	89 e5                	mov    %esp,%ebp
c010b990:	53                   	push   %ebx
c010b991:	83 ec 04             	sub    $0x4,%esp
    cprintf("cur Proc_Tick proc, pid= %d; name= %s; stride= %u; priority= %u\n", proc->pid, proc->name, proc->lab6_stride, proc->lab6_priority);
c010b994:	8b 45 08             	mov    0x8(%ebp),%eax
c010b997:	8b 88 9c 00 00 00    	mov    0x9c(%eax),%ecx
c010b99d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9a0:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010b9a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9a9:	8d 58 48             	lea    0x48(%eax),%ebx
c010b9ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9af:	8b 40 04             	mov    0x4(%eax),%eax
c010b9b2:	83 ec 0c             	sub    $0xc,%esp
c010b9b5:	51                   	push   %ecx
c010b9b6:	52                   	push   %edx
c010b9b7:	53                   	push   %ebx
c010b9b8:	50                   	push   %eax
c010b9b9:	68 ac f5 10 c0       	push   $0xc010f5ac
c010b9be:	e8 c0 48 ff ff       	call   c0100283 <cprintf>
c010b9c3:	83 c4 20             	add    $0x20,%esp
    if (proc != idleproc) {
c010b9c6:	a1 00 1d 1b c0       	mov    0xc01b1d00,%eax
c010b9cb:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b9ce:	74 1c                	je     c010b9ec <sched_class_proc_tick+0x5f>
        sched_class->proc_tick(rq, proc);
c010b9d0:	a1 3c 3d 1b c0       	mov    0xc01b3d3c,%eax
c010b9d5:	8b 40 14             	mov    0x14(%eax),%eax
c010b9d8:	8b 15 40 3d 1b c0    	mov    0xc01b3d40,%edx
c010b9de:	83 ec 08             	sub    $0x8,%esp
c010b9e1:	ff 75 08             	pushl  0x8(%ebp)
c010b9e4:	52                   	push   %edx
c010b9e5:	ff d0                	call   *%eax
c010b9e7:	83 c4 10             	add    $0x10,%esp
    }
    else {
        proc->need_resched = 1;
    }
}
c010b9ea:	eb 0a                	jmp    c010b9f6 <sched_class_proc_tick+0x69>
    cprintf("cur Proc_Tick proc, pid= %d; name= %s; stride= %u; priority= %u\n", proc->pid, proc->name, proc->lab6_stride, proc->lab6_priority);
    if (proc != idleproc) {
        sched_class->proc_tick(rq, proc);
    }
    else {
        proc->need_resched = 1;
c010b9ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9ef:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010b9f6:	90                   	nop
c010b9f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010b9fa:	c9                   	leave  
c010b9fb:	c3                   	ret    

c010b9fc <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010b9fc:	55                   	push   %ebp
c010b9fd:	89 e5                	mov    %esp,%ebp
c010b9ff:	83 ec 18             	sub    $0x18,%esp
c010ba02:	c7 45 f4 34 3d 1b c0 	movl   $0xc01b3d34,-0xc(%ebp)
c010ba09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ba0f:	89 50 04             	mov    %edx,0x4(%eax)
c010ba12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba15:	8b 50 04             	mov    0x4(%eax),%edx
c010ba18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba1b:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010ba1d:	c7 05 3c 3d 1b c0 88 	movl   $0xc012fa88,0xc01b3d3c
c010ba24:	fa 12 c0 

    rq = &__rq;
c010ba27:	c7 05 40 3d 1b c0 44 	movl   $0xc01b3d44,0xc01b3d40
c010ba2e:	3d 1b c0 
    rq->max_time_slice = MAX_TIME_SLICE;
c010ba31:	a1 40 3d 1b c0       	mov    0xc01b3d40,%eax
c010ba36:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010ba3d:	a1 3c 3d 1b c0       	mov    0xc01b3d3c,%eax
c010ba42:	8b 40 04             	mov    0x4(%eax),%eax
c010ba45:	8b 15 40 3d 1b c0    	mov    0xc01b3d40,%edx
c010ba4b:	83 ec 0c             	sub    $0xc,%esp
c010ba4e:	52                   	push   %edx
c010ba4f:	ff d0                	call   *%eax
c010ba51:	83 c4 10             	add    $0x10,%esp

    cprintf("sched class: %s\n", sched_class->name);
c010ba54:	a1 3c 3d 1b c0       	mov    0xc01b3d3c,%eax
c010ba59:	8b 00                	mov    (%eax),%eax
c010ba5b:	83 ec 08             	sub    $0x8,%esp
c010ba5e:	50                   	push   %eax
c010ba5f:	68 ed f5 10 c0       	push   $0xc010f5ed
c010ba64:	e8 1a 48 ff ff       	call   c0100283 <cprintf>
c010ba69:	83 c4 10             	add    $0x10,%esp
}
c010ba6c:	90                   	nop
c010ba6d:	c9                   	leave  
c010ba6e:	c3                   	ret    

c010ba6f <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010ba6f:	55                   	push   %ebp
c010ba70:	89 e5                	mov    %esp,%ebp
c010ba72:	83 ec 18             	sub    $0x18,%esp
    assert(proc->state != PROC_ZOMBIE);
c010ba75:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba78:	8b 00                	mov    (%eax),%eax
c010ba7a:	83 f8 03             	cmp    $0x3,%eax
c010ba7d:	75 16                	jne    c010ba95 <wakeup_proc+0x26>
c010ba7f:	68 fe f5 10 c0       	push   $0xc010f5fe
c010ba84:	68 19 f6 10 c0       	push   $0xc010f619
c010ba89:	6a 3f                	push   $0x3f
c010ba8b:	68 2e f6 10 c0       	push   $0xc010f62e
c010ba90:	e8 cc 5c ff ff       	call   c0101761 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010ba95:	e8 da fd ff ff       	call   c010b874 <__intr_save>
c010ba9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010ba9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010baa0:	8b 00                	mov    (%eax),%eax
c010baa2:	83 f8 02             	cmp    $0x2,%eax
c010baa5:	74 2d                	je     c010bad4 <wakeup_proc+0x65>
            proc->state = PROC_RUNNABLE;
c010baa7:	8b 45 08             	mov    0x8(%ebp),%eax
c010baaa:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010bab0:	8b 45 08             	mov    0x8(%ebp),%eax
c010bab3:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
            if (proc != current) {
c010baba:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010babf:	39 45 08             	cmp    %eax,0x8(%ebp)
c010bac2:	74 27                	je     c010baeb <wakeup_proc+0x7c>
                sched_class_enqueue(proc);
c010bac4:	83 ec 0c             	sub    $0xc,%esp
c010bac7:	ff 75 08             	pushl  0x8(%ebp)
c010baca:	e8 e3 fd ff ff       	call   c010b8b2 <sched_class_enqueue>
c010bacf:	83 c4 10             	add    $0x10,%esp
c010bad2:	eb 17                	jmp    c010baeb <wakeup_proc+0x7c>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010bad4:	83 ec 04             	sub    $0x4,%esp
c010bad7:	68 44 f6 10 c0       	push   $0xc010f644
c010badc:	6a 4b                	push   $0x4b
c010bade:	68 2e f6 10 c0       	push   $0xc010f62e
c010bae3:	e8 e7 5c ff ff       	call   c01017cf <__warn>
c010bae8:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010baeb:	83 ec 0c             	sub    $0xc,%esp
c010baee:	ff 75 f4             	pushl  -0xc(%ebp)
c010baf1:	e8 a8 fd ff ff       	call   c010b89e <__intr_restore>
c010baf6:	83 c4 10             	add    $0x10,%esp
}
c010baf9:	90                   	nop
c010bafa:	c9                   	leave  
c010bafb:	c3                   	ret    

c010bafc <schedule>:

void
schedule(void) {
c010bafc:	55                   	push   %ebp
c010bafd:	89 e5                	mov    %esp,%ebp
c010baff:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010bb02:	e8 6d fd ff ff       	call   c010b874 <__intr_save>
c010bb07:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010bb0a:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010bb0f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010bb16:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010bb1b:	8b 00                	mov    (%eax),%eax
c010bb1d:	83 f8 02             	cmp    $0x2,%eax
c010bb20:	75 11                	jne    c010bb33 <schedule+0x37>
            sched_class_enqueue(current);
c010bb22:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010bb27:	83 ec 0c             	sub    $0xc,%esp
c010bb2a:	50                   	push   %eax
c010bb2b:	e8 82 fd ff ff       	call   c010b8b2 <sched_class_enqueue>
c010bb30:	83 c4 10             	add    $0x10,%esp
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010bb33:	e8 36 fe ff ff       	call   c010b96e <sched_class_pick_next>
c010bb38:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bb3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bb3f:	74 0e                	je     c010bb4f <schedule+0x53>
            sched_class_dequeue(next);
c010bb41:	83 ec 0c             	sub    $0xc,%esp
c010bb44:	ff 75 f4             	pushl  -0xc(%ebp)
c010bb47:	e8 c9 fd ff ff       	call   c010b915 <sched_class_dequeue>
c010bb4c:	83 c4 10             	add    $0x10,%esp
        }
        if (next == NULL) {
c010bb4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bb53:	75 08                	jne    c010bb5d <schedule+0x61>
            next = idleproc;
c010bb55:	a1 00 1d 1b c0       	mov    0xc01b1d00,%eax
c010bb5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010bb5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb60:	8b 40 08             	mov    0x8(%eax),%eax
c010bb63:	8d 50 01             	lea    0x1(%eax),%edx
c010bb66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb69:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010bb6c:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010bb71:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010bb74:	74 0e                	je     c010bb84 <schedule+0x88>
            proc_run(next);
c010bb76:	83 ec 0c             	sub    $0xc,%esp
c010bb79:	ff 75 f4             	pushl  -0xc(%ebp)
c010bb7c:	e8 e0 e7 ff ff       	call   c010a361 <proc_run>
c010bb81:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010bb84:	83 ec 0c             	sub    $0xc,%esp
c010bb87:	ff 75 f0             	pushl  -0x10(%ebp)
c010bb8a:	e8 0f fd ff ff       	call   c010b89e <__intr_restore>
c010bb8f:	83 c4 10             	add    $0x10,%esp
}
c010bb92:	90                   	nop
c010bb93:	c9                   	leave  
c010bb94:	c3                   	ret    

c010bb95 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010bb95:	55                   	push   %ebp
c010bb96:	89 e5                	mov    %esp,%ebp
c010bb98:	83 ec 18             	sub    $0x18,%esp
     if (a == NULL) return b;
c010bb9b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bb9f:	75 08                	jne    c010bba9 <skew_heap_merge+0x14>
c010bba1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bba4:	e9 b4 00 00 00       	jmp    c010bc5d <skew_heap_merge+0xc8>
     else if (b == NULL) return a;
c010bba9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bbad:	75 08                	jne    c010bbb7 <skew_heap_merge+0x22>
c010bbaf:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbb2:	e9 a6 00 00 00       	jmp    c010bc5d <skew_heap_merge+0xc8>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010bbb7:	83 ec 08             	sub    $0x8,%esp
c010bbba:	ff 75 0c             	pushl  0xc(%ebp)
c010bbbd:	ff 75 08             	pushl  0x8(%ebp)
c010bbc0:	8b 45 10             	mov    0x10(%ebp),%eax
c010bbc3:	ff d0                	call   *%eax
c010bbc5:	83 c4 10             	add    $0x10,%esp
c010bbc8:	83 f8 ff             	cmp    $0xffffffff,%eax
c010bbcb:	75 49                	jne    c010bc16 <skew_heap_merge+0x81>
     {
          r = a->left;
c010bbcd:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbd0:	8b 40 04             	mov    0x4(%eax),%eax
c010bbd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010bbd6:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbd9:	8b 40 08             	mov    0x8(%eax),%eax
c010bbdc:	83 ec 04             	sub    $0x4,%esp
c010bbdf:	ff 75 10             	pushl  0x10(%ebp)
c010bbe2:	ff 75 0c             	pushl  0xc(%ebp)
c010bbe5:	50                   	push   %eax
c010bbe6:	e8 aa ff ff ff       	call   c010bb95 <skew_heap_merge>
c010bbeb:	83 c4 10             	add    $0x10,%esp
c010bbee:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010bbf1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbf4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010bbf7:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010bbfa:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbfd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bc00:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010bc03:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bc07:	74 08                	je     c010bc11 <skew_heap_merge+0x7c>
c010bc09:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc0c:	8b 55 08             	mov    0x8(%ebp),%edx
c010bc0f:	89 10                	mov    %edx,(%eax)

          return a;
c010bc11:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc14:	eb 47                	jmp    c010bc5d <skew_heap_merge+0xc8>
     }
     else
     {
          r = b->left;
c010bc16:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc19:	8b 40 04             	mov    0x4(%eax),%eax
c010bc1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010bc1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc22:	8b 40 08             	mov    0x8(%eax),%eax
c010bc25:	83 ec 04             	sub    $0x4,%esp
c010bc28:	ff 75 10             	pushl  0x10(%ebp)
c010bc2b:	50                   	push   %eax
c010bc2c:	ff 75 08             	pushl  0x8(%ebp)
c010bc2f:	e8 61 ff ff ff       	call   c010bb95 <skew_heap_merge>
c010bc34:	83 c4 10             	add    $0x10,%esp
c010bc37:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010bc3a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc3d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010bc40:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010bc43:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc46:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bc49:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010bc4c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bc50:	74 08                	je     c010bc5a <skew_heap_merge+0xc5>
c010bc52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc55:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bc58:	89 10                	mov    %edx,(%eax)

          return b;
c010bc5a:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010bc5d:	c9                   	leave  
c010bc5e:	c3                   	ret    

c010bc5f <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010bc5f:	55                   	push   %ebp
c010bc60:	89 e5                	mov    %esp,%ebp
c010bc62:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010bc65:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc68:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010bc6d:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010bc70:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc73:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010bc78:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010bc7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bc7e:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010bc84:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bc87:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010bc8d:	29 c2                	sub    %eax,%edx
c010bc8f:	89 d0                	mov    %edx,%eax
c010bc91:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010bc94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc98:	7e 07                	jle    c010bca1 <proc_stride_comp_f+0x42>
c010bc9a:	b8 01 00 00 00       	mov    $0x1,%eax
c010bc9f:	eb 12                	jmp    c010bcb3 <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010bca1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bca5:	75 07                	jne    c010bcae <proc_stride_comp_f+0x4f>
c010bca7:	b8 00 00 00 00       	mov    $0x0,%eax
c010bcac:	eb 05                	jmp    c010bcb3 <proc_stride_comp_f+0x54>
     else return -1;
c010bcae:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010bcb3:	c9                   	leave  
c010bcb4:	c3                   	ret    

c010bcb5 <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see proj13.1/libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010bcb5:	55                   	push   %ebp
c010bcb6:	89 e5                	mov    %esp,%ebp
c010bcb8:	83 ec 18             	sub    $0x18,%esp
     /* LAB6: YOUR CODE */
     cprintf("In stride_init()...\n");
c010bcbb:	83 ec 0c             	sub    $0xc,%esp
c010bcbe:	68 60 f6 10 c0       	push   $0xc010f660
c010bcc3:	e8 bb 45 ff ff       	call   c0100283 <cprintf>
c010bcc8:	83 c4 10             	add    $0x10,%esp
     list_init(&(rq->run_list));
c010bccb:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bcd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcd4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bcd7:	89 50 04             	mov    %edx,0x4(%eax)
c010bcda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcdd:	8b 50 04             	mov    0x4(%eax),%edx
c010bce0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bce3:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL;
c010bce5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bce8:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0;
c010bcef:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcf2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010bcf9:	90                   	nop
c010bcfa:	c9                   	leave  
c010bcfb:	c3                   	ret    

c010bcfc <stride_enqueue>:
 * 
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010bcfc:	55                   	push   %ebp
c010bcfd:	89 e5                	mov    %esp,%ebp
c010bcff:	53                   	push   %ebx
c010bd00:	83 ec 14             	sub    $0x14,%esp
     /* LAB6: YOUR CODE */
     cprintf("cur stride_Enqueue proc, pid= %d; name= %s; stride= %u; priority= %u\n", proc->pid, proc->name, proc->lab6_stride, proc->lab6_priority);
c010bd03:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd06:	8b 88 9c 00 00 00    	mov    0x9c(%eax),%ecx
c010bd0c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd0f:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010bd15:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd18:	8d 58 48             	lea    0x48(%eax),%ebx
c010bd1b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd1e:	8b 40 04             	mov    0x4(%eax),%eax
c010bd21:	83 ec 0c             	sub    $0xc,%esp
c010bd24:	51                   	push   %ecx
c010bd25:	52                   	push   %edx
c010bd26:	53                   	push   %ebx
c010bd27:	50                   	push   %eax
c010bd28:	68 78 f6 10 c0       	push   $0xc010f678
c010bd2d:	e8 51 45 ff ff       	call   c0100283 <cprintf>
c010bd32:	83 c4 20             	add    $0x20,%esp
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010bd35:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd38:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
c010bd3e:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd41:	8b 40 10             	mov    0x10(%eax),%eax
c010bd44:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bd47:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010bd4a:	c7 45 ec 5f bc 10 c0 	movl   $0xc010bc5f,-0x14(%ebp)
c010bd51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd54:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010bd57:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd5a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010bd60:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd63:	8b 10                	mov    (%eax),%edx
c010bd65:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd68:	89 50 08             	mov    %edx,0x8(%eax)
c010bd6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd6e:	8b 50 08             	mov    0x8(%eax),%edx
c010bd71:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd74:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010bd77:	83 ec 04             	sub    $0x4,%esp
c010bd7a:	ff 75 ec             	pushl  -0x14(%ebp)
c010bd7d:	ff 75 f0             	pushl  -0x10(%ebp)
c010bd80:	ff 75 f4             	pushl  -0xc(%ebp)
c010bd83:	e8 0d fe ff ff       	call   c010bb95 <skew_heap_merge>
c010bd88:	83 c4 10             	add    $0x10,%esp
c010bd8b:	89 c2                	mov    %eax,%edx
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
     /* LAB6: YOUR CODE */
     cprintf("cur stride_Enqueue proc, pid= %d; name= %s; stride= %u; priority= %u\n", proc->pid, proc->name, proc->lab6_stride, proc->lab6_priority);
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010bd8d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd90:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(list_empty(&(proc->run_link)));
     list_add_before(&(rq->run_list), &(proc->run_link));
#endif
     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010bd93:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd96:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010bd9c:	85 c0                	test   %eax,%eax
c010bd9e:	74 13                	je     c010bdb3 <stride_enqueue+0xb7>
c010bda0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bda3:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
c010bda9:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdac:	8b 40 0c             	mov    0xc(%eax),%eax
c010bdaf:	39 c2                	cmp    %eax,%edx
c010bdb1:	7e 0f                	jle    c010bdc2 <stride_enqueue+0xc6>
          proc->time_slice = rq->max_time_slice;
c010bdb3:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdb6:	8b 50 0c             	mov    0xc(%eax),%edx
c010bdb9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdbc:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
     }
     proc->rq = rq;
c010bdc2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdc5:	8b 55 08             	mov    0x8(%ebp),%edx
c010bdc8:	89 50 7c             	mov    %edx,0x7c(%eax)
     rq->proc_num ++;
c010bdcb:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdce:	8b 40 08             	mov    0x8(%eax),%eax
c010bdd1:	8d 50 01             	lea    0x1(%eax),%edx
c010bdd4:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdd7:	89 50 08             	mov    %edx,0x8(%eax)
}
c010bdda:	90                   	nop
c010bddb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010bdde:	c9                   	leave  
c010bddf:	c3                   	ret    

c010bde0 <stride_dequeue>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010bde0:	55                   	push   %ebp
c010bde1:	89 e5                	mov    %esp,%ebp
c010bde3:	53                   	push   %ebx
c010bde4:	83 ec 24             	sub    $0x24,%esp
     /* LAB6: YOUR CODE */
     cprintf("cur stride_Dequeue proc, pid= %d; name= %s; stride= %u; priority= %u\n", proc->pid, proc->name, proc->lab6_stride, proc->lab6_priority);
c010bde7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdea:	8b 88 9c 00 00 00    	mov    0x9c(%eax),%ecx
c010bdf0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdf3:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010bdf9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdfc:	8d 58 48             	lea    0x48(%eax),%ebx
c010bdff:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be02:	8b 40 04             	mov    0x4(%eax),%eax
c010be05:	83 ec 0c             	sub    $0xc,%esp
c010be08:	51                   	push   %ecx
c010be09:	52                   	push   %edx
c010be0a:	53                   	push   %ebx
c010be0b:	50                   	push   %eax
c010be0c:	68 c0 f6 10 c0       	push   $0xc010f6c0
c010be11:	e8 6d 44 ff ff       	call   c0100283 <cprintf>
c010be16:	83 c4 20             	add    $0x20,%esp
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010be19:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be1c:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
c010be22:	8b 45 08             	mov    0x8(%ebp),%eax
c010be25:	8b 40 10             	mov    0x10(%eax),%eax
c010be28:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010be2b:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010be2e:	c7 45 ec 5f bc 10 c0 	movl   $0xc010bc5f,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010be35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be38:	8b 00                	mov    (%eax),%eax
c010be3a:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010be3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be40:	8b 50 08             	mov    0x8(%eax),%edx
c010be43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be46:	8b 40 04             	mov    0x4(%eax),%eax
c010be49:	83 ec 04             	sub    $0x4,%esp
c010be4c:	ff 75 ec             	pushl  -0x14(%ebp)
c010be4f:	52                   	push   %edx
c010be50:	50                   	push   %eax
c010be51:	e8 3f fd ff ff       	call   c010bb95 <skew_heap_merge>
c010be56:	83 c4 10             	add    $0x10,%esp
c010be59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010be5c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010be60:	74 08                	je     c010be6a <stride_dequeue+0x8a>
c010be62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010be65:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010be68:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010be6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010be6e:	74 24                	je     c010be94 <stride_dequeue+0xb4>
     {
          if (p->left == b)
c010be70:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010be73:	8b 40 04             	mov    0x4(%eax),%eax
c010be76:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010be79:	75 0b                	jne    c010be86 <stride_dequeue+0xa6>
               p->left = rep;
c010be7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010be7e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010be81:	89 50 04             	mov    %edx,0x4(%eax)
c010be84:	eb 09                	jmp    c010be8f <stride_dequeue+0xaf>
          else p->right = rep;
c010be86:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010be89:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010be8c:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010be8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be92:	eb 03                	jmp    c010be97 <stride_dequeue+0xb7>
     }
     else return rep;
c010be94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
     /* LAB6: YOUR CODE */
     cprintf("cur stride_Dequeue proc, pid= %d; name= %s; stride= %u; priority= %u\n", proc->pid, proc->name, proc->lab6_stride, proc->lab6_priority);
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010be97:	8b 55 08             	mov    0x8(%ebp),%edx
c010be9a:	89 42 10             	mov    %eax,0x10(%edx)
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
     list_del_init(&(proc->run_link));
#endif
     rq->proc_num --;
c010be9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bea0:	8b 40 08             	mov    0x8(%eax),%eax
c010bea3:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bea6:	8b 45 08             	mov    0x8(%ebp),%eax
c010bea9:	89 50 08             	mov    %edx,0x8(%eax)
}
c010beac:	90                   	nop
c010bead:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010beb0:	c9                   	leave  
c010beb1:	c3                   	ret    

c010beb2 <stride_pick_next>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010beb2:	55                   	push   %ebp
c010beb3:	89 e5                	mov    %esp,%ebp
c010beb5:	53                   	push   %ebx
c010beb6:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     if (rq->lab6_run_pool == NULL) return NULL;
c010beb9:	8b 45 08             	mov    0x8(%ebp),%eax
c010bebc:	8b 40 10             	mov    0x10(%eax),%eax
c010bebf:	85 c0                	test   %eax,%eax
c010bec1:	75 07                	jne    c010beca <stride_pick_next+0x18>
c010bec3:	b8 00 00 00 00       	mov    $0x0,%eax
c010bec8:	eb 62                	jmp    c010bf2c <stride_pick_next+0x7a>
     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010beca:	8b 45 08             	mov    0x8(%ebp),%eax
c010becd:	8b 40 10             	mov    0x10(%eax),%eax
c010bed0:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010bed5:	89 45 f8             	mov    %eax,-0x8(%ebp)
          if ((int32_t)(p->lab6_stride - q->lab6_stride) > 0)
               p = q;
          le = list_next(le);
     }
#endif
     if (p->lab6_priority == 0)
c010bed8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bedb:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bee1:	85 c0                	test   %eax,%eax
c010bee3:	75 1a                	jne    c010beff <stride_pick_next+0x4d>
          p->lab6_stride += BIG_STRIDE;
c010bee5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bee8:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010beee:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010bef4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bef7:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
c010befd:	eb 2a                	jmp    c010bf29 <stride_pick_next+0x77>
     else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010beff:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bf02:	8b 88 98 00 00 00    	mov    0x98(%eax),%ecx
c010bf08:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bf0b:	8b 98 9c 00 00 00    	mov    0x9c(%eax),%ebx
c010bf11:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010bf16:	ba 00 00 00 00       	mov    $0x0,%edx
c010bf1b:	f7 f3                	div    %ebx
c010bf1d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010bf20:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bf23:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
     return p;
c010bf29:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010bf2c:	83 c4 10             	add    $0x10,%esp
c010bf2f:	5b                   	pop    %ebx
c010bf30:	5d                   	pop    %ebp
c010bf31:	c3                   	ret    

c010bf32 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010bf32:	55                   	push   %ebp
c010bf33:	89 e5                	mov    %esp,%ebp
c010bf35:	53                   	push   %ebx
c010bf36:	83 ec 04             	sub    $0x4,%esp
     /* LAB6: YOUR CODE */
     cprintf("cur Stride_Proc_Tick proc, pid= %d; name= %s; stride= %u; priority= %u\n", proc->pid, proc->name, proc->lab6_stride, proc->lab6_priority);
c010bf39:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf3c:	8b 88 9c 00 00 00    	mov    0x9c(%eax),%ecx
c010bf42:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf45:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010bf4b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf4e:	8d 58 48             	lea    0x48(%eax),%ebx
c010bf51:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf54:	8b 40 04             	mov    0x4(%eax),%eax
c010bf57:	83 ec 0c             	sub    $0xc,%esp
c010bf5a:	51                   	push   %ecx
c010bf5b:	52                   	push   %edx
c010bf5c:	53                   	push   %ebx
c010bf5d:	50                   	push   %eax
c010bf5e:	68 08 f7 10 c0       	push   $0xc010f708
c010bf63:	e8 1b 43 ff ff       	call   c0100283 <cprintf>
c010bf68:	83 c4 20             	add    $0x20,%esp
     if (proc->time_slice > 0) {
c010bf6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf6e:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010bf74:	85 c0                	test   %eax,%eax
c010bf76:	7e 15                	jle    c010bf8d <stride_proc_tick+0x5b>
          proc->time_slice --;
c010bf78:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf7b:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010bf81:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bf84:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf87:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
     }
     if (proc->time_slice == 0) {
c010bf8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf90:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010bf96:	85 c0                	test   %eax,%eax
c010bf98:	75 0a                	jne    c010bfa4 <stride_proc_tick+0x72>
          proc->need_resched = 1;
c010bf9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf9d:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
     }
}
c010bfa4:	90                   	nop
c010bfa5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010bfa8:	c9                   	leave  
c010bfa9:	c3                   	ret    

c010bfaa <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010bfaa:	55                   	push   %ebp
c010bfab:	89 e5                	mov    %esp,%ebp
c010bfad:	83 ec 18             	sub    $0x18,%esp
    int error_code = (int)arg[0];
c010bfb0:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfb3:	8b 00                	mov    (%eax),%eax
c010bfb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010bfb8:	83 ec 0c             	sub    $0xc,%esp
c010bfbb:	ff 75 f4             	pushl  -0xc(%ebp)
c010bfbe:	e8 d4 e9 ff ff       	call   c010a997 <do_exit>
c010bfc3:	83 c4 10             	add    $0x10,%esp
}
c010bfc6:	c9                   	leave  
c010bfc7:	c3                   	ret    

c010bfc8 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010bfc8:	55                   	push   %ebp
c010bfc9:	89 e5                	mov    %esp,%ebp
c010bfcb:	83 ec 18             	sub    $0x18,%esp
    struct trapframe *tf = current->tf;
c010bfce:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010bfd3:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bfd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010bfd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfdc:	8b 40 44             	mov    0x44(%eax),%eax
c010bfdf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010bfe2:	83 ec 04             	sub    $0x4,%esp
c010bfe5:	ff 75 f4             	pushl  -0xc(%ebp)
c010bfe8:	ff 75 f0             	pushl  -0x10(%ebp)
c010bfeb:	6a 00                	push   $0x0
c010bfed:	e8 7a e8 ff ff       	call   c010a86c <do_fork>
c010bff2:	83 c4 10             	add    $0x10,%esp
}
c010bff5:	c9                   	leave  
c010bff6:	c3                   	ret    

c010bff7 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010bff7:	55                   	push   %ebp
c010bff8:	89 e5                	mov    %esp,%ebp
c010bffa:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010bffd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c000:	8b 00                	mov    (%eax),%eax
c010c002:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010c005:	8b 45 08             	mov    0x8(%ebp),%eax
c010c008:	83 c0 04             	add    $0x4,%eax
c010c00b:	8b 00                	mov    (%eax),%eax
c010c00d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010c010:	83 ec 08             	sub    $0x8,%esp
c010c013:	ff 75 f0             	pushl  -0x10(%ebp)
c010c016:	ff 75 f4             	pushl  -0xc(%ebp)
c010c019:	e8 58 f2 ff ff       	call   c010b276 <do_wait>
c010c01e:	83 c4 10             	add    $0x10,%esp
}
c010c021:	c9                   	leave  
c010c022:	c3                   	ret    

c010c023 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010c023:	55                   	push   %ebp
c010c024:	89 e5                	mov    %esp,%ebp
c010c026:	83 ec 18             	sub    $0x18,%esp
    const char *name = (const char *)arg[0];
c010c029:	8b 45 08             	mov    0x8(%ebp),%eax
c010c02c:	8b 00                	mov    (%eax),%eax
c010c02e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010c031:	8b 45 08             	mov    0x8(%ebp),%eax
c010c034:	83 c0 04             	add    $0x4,%eax
c010c037:	8b 00                	mov    (%eax),%eax
c010c039:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010c03c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c03f:	83 c0 08             	add    $0x8,%eax
c010c042:	8b 00                	mov    (%eax),%eax
c010c044:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010c047:	8b 45 08             	mov    0x8(%ebp),%eax
c010c04a:	83 c0 0c             	add    $0xc,%eax
c010c04d:	8b 00                	mov    (%eax),%eax
c010c04f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010c052:	ff 75 e8             	pushl  -0x18(%ebp)
c010c055:	ff 75 ec             	pushl  -0x14(%ebp)
c010c058:	ff 75 f0             	pushl  -0x10(%ebp)
c010c05b:	ff 75 f4             	pushl  -0xc(%ebp)
c010c05e:	e8 db f0 ff ff       	call   c010b13e <do_execve>
c010c063:	83 c4 10             	add    $0x10,%esp
}
c010c066:	c9                   	leave  
c010c067:	c3                   	ret    

c010c068 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010c068:	55                   	push   %ebp
c010c069:	89 e5                	mov    %esp,%ebp
c010c06b:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010c06e:	e8 ed f1 ff ff       	call   c010b260 <do_yield>
}
c010c073:	c9                   	leave  
c010c074:	c3                   	ret    

c010c075 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010c075:	55                   	push   %ebp
c010c076:	89 e5                	mov    %esp,%ebp
c010c078:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010c07b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c07e:	8b 00                	mov    (%eax),%eax
c010c080:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010c083:	83 ec 0c             	sub    $0xc,%esp
c010c086:	ff 75 f4             	pushl  -0xc(%ebp)
c010c089:	e8 76 f3 ff ff       	call   c010b404 <do_kill>
c010c08e:	83 c4 10             	add    $0x10,%esp
}
c010c091:	c9                   	leave  
c010c092:	c3                   	ret    

c010c093 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010c093:	55                   	push   %ebp
c010c094:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010c096:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010c09b:	8b 40 04             	mov    0x4(%eax),%eax
}
c010c09e:	5d                   	pop    %ebp
c010c09f:	c3                   	ret    

c010c0a0 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010c0a0:	55                   	push   %ebp
c010c0a1:	89 e5                	mov    %esp,%ebp
c010c0a3:	83 ec 18             	sub    $0x18,%esp
    int c = (int)arg[0];
c010c0a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0a9:	8b 00                	mov    (%eax),%eax
c010c0ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010c0ae:	83 ec 0c             	sub    $0xc,%esp
c010c0b1:	ff 75 f4             	pushl  -0xc(%ebp)
c010c0b4:	e8 f0 41 ff ff       	call   c01002a9 <cputchar>
c010c0b9:	83 c4 10             	add    $0x10,%esp
    return 0;
c010c0bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c0c1:	c9                   	leave  
c010c0c2:	c3                   	ret    

c010c0c3 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010c0c3:	55                   	push   %ebp
c010c0c4:	89 e5                	mov    %esp,%ebp
c010c0c6:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010c0c9:	e8 15 a2 ff ff       	call   c01062e3 <print_pgdir>
    return 0;
c010c0ce:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c0d3:	c9                   	leave  
c010c0d4:	c3                   	ret    

c010c0d5 <sys_gettime>:

static uint32_t
sys_gettime(uint32_t arg[]) {
c010c0d5:	55                   	push   %ebp
c010c0d6:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010c0d8:	a1 58 3d 1b c0       	mov    0xc01b3d58,%eax
}
c010c0dd:	5d                   	pop    %ebp
c010c0de:	c3                   	ret    

c010c0df <sys_lab6_set_priority>:
static uint32_t
sys_lab6_set_priority(uint32_t arg[])
{
c010c0df:	55                   	push   %ebp
c010c0e0:	89 e5                	mov    %esp,%ebp
c010c0e2:	83 ec 18             	sub    $0x18,%esp
    uint32_t priority = (uint32_t)arg[0];
c010c0e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0e8:	8b 00                	mov    (%eax),%eax
c010c0ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010c0ed:	83 ec 0c             	sub    $0xc,%esp
c010c0f0:	ff 75 f4             	pushl  -0xc(%ebp)
c010c0f3:	e8 51 f7 ff ff       	call   c010b849 <lab6_set_priority>
c010c0f8:	83 c4 10             	add    $0x10,%esp
    return 0;
c010c0fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c100:	c9                   	leave  
c010c101:	c3                   	ret    

c010c102 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010c102:	55                   	push   %ebp
c010c103:	89 e5                	mov    %esp,%ebp
c010c105:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010c108:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010c10d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c110:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010c113:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c116:	8b 40 1c             	mov    0x1c(%eax),%eax
c010c119:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010c11c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c120:	78 64                	js     c010c186 <syscall+0x84>
c010c122:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c125:	3d ff 00 00 00       	cmp    $0xff,%eax
c010c12a:	77 5a                	ja     c010c186 <syscall+0x84>
        if (syscalls[num] != NULL) {
c010c12c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c12f:	8b 04 85 a0 fa 12 c0 	mov    -0x3fed0560(,%eax,4),%eax
c010c136:	85 c0                	test   %eax,%eax
c010c138:	74 4c                	je     c010c186 <syscall+0x84>
            arg[0] = tf->tf_regs.reg_edx;
c010c13a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c13d:	8b 40 14             	mov    0x14(%eax),%eax
c010c140:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010c143:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c146:	8b 40 18             	mov    0x18(%eax),%eax
c010c149:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010c14c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c14f:	8b 40 10             	mov    0x10(%eax),%eax
c010c152:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010c155:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c158:	8b 00                	mov    (%eax),%eax
c010c15a:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010c15d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c160:	8b 40 04             	mov    0x4(%eax),%eax
c010c163:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010c166:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c169:	8b 04 85 a0 fa 12 c0 	mov    -0x3fed0560(,%eax,4),%eax
c010c170:	83 ec 0c             	sub    $0xc,%esp
c010c173:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010c176:	52                   	push   %edx
c010c177:	ff d0                	call   *%eax
c010c179:	83 c4 10             	add    $0x10,%esp
c010c17c:	89 c2                	mov    %eax,%edx
c010c17e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c181:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010c184:	eb 37                	jmp    c010c1bd <syscall+0xbb>
        }
    }
    print_trapframe(tf);
c010c186:	83 ec 0c             	sub    $0xc,%esp
c010c189:	ff 75 f4             	pushl  -0xc(%ebp)
c010c18c:	e8 4b 75 ff ff       	call   c01036dc <print_trapframe>
c010c191:	83 c4 10             	add    $0x10,%esp
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010c194:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010c199:	8d 50 48             	lea    0x48(%eax),%edx
c010c19c:	a1 08 1d 1b c0       	mov    0xc01b1d08,%eax
c010c1a1:	8b 40 04             	mov    0x4(%eax),%eax
c010c1a4:	83 ec 08             	sub    $0x8,%esp
c010c1a7:	52                   	push   %edx
c010c1a8:	50                   	push   %eax
c010c1a9:	ff 75 f0             	pushl  -0x10(%ebp)
c010c1ac:	68 64 f7 10 c0       	push   $0xc010f764
c010c1b1:	6a 72                	push   $0x72
c010c1b3:	68 90 f7 10 c0       	push   $0xc010f790
c010c1b8:	e8 a4 55 ff ff       	call   c0101761 <__panic>
            num, current->pid, current->name);
}
c010c1bd:	c9                   	leave  
c010c1be:	c3                   	ret    

c010c1bf <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010c1bf:	55                   	push   %ebp
c010c1c0:	89 e5                	mov    %esp,%ebp
c010c1c2:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010c1c5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010c1cc:	eb 04                	jmp    c010c1d2 <strlen+0x13>
        cnt ++;
c010c1ce:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010c1d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1d5:	8d 50 01             	lea    0x1(%eax),%edx
c010c1d8:	89 55 08             	mov    %edx,0x8(%ebp)
c010c1db:	0f b6 00             	movzbl (%eax),%eax
c010c1de:	84 c0                	test   %al,%al
c010c1e0:	75 ec                	jne    c010c1ce <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010c1e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010c1e5:	c9                   	leave  
c010c1e6:	c3                   	ret    

c010c1e7 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010c1e7:	55                   	push   %ebp
c010c1e8:	89 e5                	mov    %esp,%ebp
c010c1ea:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010c1ed:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010c1f4:	eb 04                	jmp    c010c1fa <strnlen+0x13>
        cnt ++;
c010c1f6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010c1fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c1fd:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010c200:	73 10                	jae    c010c212 <strnlen+0x2b>
c010c202:	8b 45 08             	mov    0x8(%ebp),%eax
c010c205:	8d 50 01             	lea    0x1(%eax),%edx
c010c208:	89 55 08             	mov    %edx,0x8(%ebp)
c010c20b:	0f b6 00             	movzbl (%eax),%eax
c010c20e:	84 c0                	test   %al,%al
c010c210:	75 e4                	jne    c010c1f6 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010c212:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010c215:	c9                   	leave  
c010c216:	c3                   	ret    

c010c217 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010c217:	55                   	push   %ebp
c010c218:	89 e5                	mov    %esp,%ebp
c010c21a:	57                   	push   %edi
c010c21b:	56                   	push   %esi
c010c21c:	83 ec 20             	sub    $0x20,%esp
c010c21f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c222:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c225:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c228:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010c22b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c22e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c231:	89 d1                	mov    %edx,%ecx
c010c233:	89 c2                	mov    %eax,%edx
c010c235:	89 ce                	mov    %ecx,%esi
c010c237:	89 d7                	mov    %edx,%edi
c010c239:	ac                   	lods   %ds:(%esi),%al
c010c23a:	aa                   	stos   %al,%es:(%edi)
c010c23b:	84 c0                	test   %al,%al
c010c23d:	75 fa                	jne    c010c239 <strcpy+0x22>
c010c23f:	89 fa                	mov    %edi,%edx
c010c241:	89 f1                	mov    %esi,%ecx
c010c243:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010c246:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c249:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010c24c:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_STRCPY
    return __strcpy(dst, src);
c010c24f:	90                   	nop
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010c250:	83 c4 20             	add    $0x20,%esp
c010c253:	5e                   	pop    %esi
c010c254:	5f                   	pop    %edi
c010c255:	5d                   	pop    %ebp
c010c256:	c3                   	ret    

c010c257 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010c257:	55                   	push   %ebp
c010c258:	89 e5                	mov    %esp,%ebp
c010c25a:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010c25d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c260:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010c263:	eb 21                	jmp    c010c286 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010c265:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c268:	0f b6 10             	movzbl (%eax),%edx
c010c26b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c26e:	88 10                	mov    %dl,(%eax)
c010c270:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c273:	0f b6 00             	movzbl (%eax),%eax
c010c276:	84 c0                	test   %al,%al
c010c278:	74 04                	je     c010c27e <strncpy+0x27>
            src ++;
c010c27a:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010c27e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010c282:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010c286:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c28a:	75 d9                	jne    c010c265 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010c28c:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010c28f:	c9                   	leave  
c010c290:	c3                   	ret    

c010c291 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010c291:	55                   	push   %ebp
c010c292:	89 e5                	mov    %esp,%ebp
c010c294:	57                   	push   %edi
c010c295:	56                   	push   %esi
c010c296:	83 ec 20             	sub    $0x20,%esp
c010c299:	8b 45 08             	mov    0x8(%ebp),%eax
c010c29c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c29f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010c2a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c2a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c2ab:	89 d1                	mov    %edx,%ecx
c010c2ad:	89 c2                	mov    %eax,%edx
c010c2af:	89 ce                	mov    %ecx,%esi
c010c2b1:	89 d7                	mov    %edx,%edi
c010c2b3:	ac                   	lods   %ds:(%esi),%al
c010c2b4:	ae                   	scas   %es:(%edi),%al
c010c2b5:	75 08                	jne    c010c2bf <strcmp+0x2e>
c010c2b7:	84 c0                	test   %al,%al
c010c2b9:	75 f8                	jne    c010c2b3 <strcmp+0x22>
c010c2bb:	31 c0                	xor    %eax,%eax
c010c2bd:	eb 04                	jmp    c010c2c3 <strcmp+0x32>
c010c2bf:	19 c0                	sbb    %eax,%eax
c010c2c1:	0c 01                	or     $0x1,%al
c010c2c3:	89 fa                	mov    %edi,%edx
c010c2c5:	89 f1                	mov    %esi,%ecx
c010c2c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c2ca:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010c2cd:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010c2d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
#ifdef __HAVE_ARCH_STRCMP
    return __strcmp(s1, s2);
c010c2d3:	90                   	nop
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010c2d4:	83 c4 20             	add    $0x20,%esp
c010c2d7:	5e                   	pop    %esi
c010c2d8:	5f                   	pop    %edi
c010c2d9:	5d                   	pop    %ebp
c010c2da:	c3                   	ret    

c010c2db <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010c2db:	55                   	push   %ebp
c010c2dc:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010c2de:	eb 0c                	jmp    c010c2ec <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010c2e0:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010c2e4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c2e8:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010c2ec:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c2f0:	74 1a                	je     c010c30c <strncmp+0x31>
c010c2f2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2f5:	0f b6 00             	movzbl (%eax),%eax
c010c2f8:	84 c0                	test   %al,%al
c010c2fa:	74 10                	je     c010c30c <strncmp+0x31>
c010c2fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2ff:	0f b6 10             	movzbl (%eax),%edx
c010c302:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c305:	0f b6 00             	movzbl (%eax),%eax
c010c308:	38 c2                	cmp    %al,%dl
c010c30a:	74 d4                	je     c010c2e0 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010c30c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c310:	74 18                	je     c010c32a <strncmp+0x4f>
c010c312:	8b 45 08             	mov    0x8(%ebp),%eax
c010c315:	0f b6 00             	movzbl (%eax),%eax
c010c318:	0f b6 d0             	movzbl %al,%edx
c010c31b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c31e:	0f b6 00             	movzbl (%eax),%eax
c010c321:	0f b6 c0             	movzbl %al,%eax
c010c324:	29 c2                	sub    %eax,%edx
c010c326:	89 d0                	mov    %edx,%eax
c010c328:	eb 05                	jmp    c010c32f <strncmp+0x54>
c010c32a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c32f:	5d                   	pop    %ebp
c010c330:	c3                   	ret    

c010c331 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010c331:	55                   	push   %ebp
c010c332:	89 e5                	mov    %esp,%ebp
c010c334:	83 ec 04             	sub    $0x4,%esp
c010c337:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c33a:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010c33d:	eb 14                	jmp    c010c353 <strchr+0x22>
        if (*s == c) {
c010c33f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c342:	0f b6 00             	movzbl (%eax),%eax
c010c345:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010c348:	75 05                	jne    c010c34f <strchr+0x1e>
            return (char *)s;
c010c34a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c34d:	eb 13                	jmp    c010c362 <strchr+0x31>
        }
        s ++;
c010c34f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010c353:	8b 45 08             	mov    0x8(%ebp),%eax
c010c356:	0f b6 00             	movzbl (%eax),%eax
c010c359:	84 c0                	test   %al,%al
c010c35b:	75 e2                	jne    c010c33f <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010c35d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c362:	c9                   	leave  
c010c363:	c3                   	ret    

c010c364 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010c364:	55                   	push   %ebp
c010c365:	89 e5                	mov    %esp,%ebp
c010c367:	83 ec 04             	sub    $0x4,%esp
c010c36a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c36d:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010c370:	eb 0f                	jmp    c010c381 <strfind+0x1d>
        if (*s == c) {
c010c372:	8b 45 08             	mov    0x8(%ebp),%eax
c010c375:	0f b6 00             	movzbl (%eax),%eax
c010c378:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010c37b:	74 10                	je     c010c38d <strfind+0x29>
            break;
        }
        s ++;
c010c37d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010c381:	8b 45 08             	mov    0x8(%ebp),%eax
c010c384:	0f b6 00             	movzbl (%eax),%eax
c010c387:	84 c0                	test   %al,%al
c010c389:	75 e7                	jne    c010c372 <strfind+0xe>
c010c38b:	eb 01                	jmp    c010c38e <strfind+0x2a>
        if (*s == c) {
            break;
c010c38d:	90                   	nop
        }
        s ++;
    }
    return (char *)s;
c010c38e:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010c391:	c9                   	leave  
c010c392:	c3                   	ret    

c010c393 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010c393:	55                   	push   %ebp
c010c394:	89 e5                	mov    %esp,%ebp
c010c396:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010c399:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010c3a0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010c3a7:	eb 04                	jmp    c010c3ad <strtol+0x1a>
        s ++;
c010c3a9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010c3ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3b0:	0f b6 00             	movzbl (%eax),%eax
c010c3b3:	3c 20                	cmp    $0x20,%al
c010c3b5:	74 f2                	je     c010c3a9 <strtol+0x16>
c010c3b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3ba:	0f b6 00             	movzbl (%eax),%eax
c010c3bd:	3c 09                	cmp    $0x9,%al
c010c3bf:	74 e8                	je     c010c3a9 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010c3c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3c4:	0f b6 00             	movzbl (%eax),%eax
c010c3c7:	3c 2b                	cmp    $0x2b,%al
c010c3c9:	75 06                	jne    c010c3d1 <strtol+0x3e>
        s ++;
c010c3cb:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c3cf:	eb 15                	jmp    c010c3e6 <strtol+0x53>
    }
    else if (*s == '-') {
c010c3d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3d4:	0f b6 00             	movzbl (%eax),%eax
c010c3d7:	3c 2d                	cmp    $0x2d,%al
c010c3d9:	75 0b                	jne    c010c3e6 <strtol+0x53>
        s ++, neg = 1;
c010c3db:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c3df:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010c3e6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c3ea:	74 06                	je     c010c3f2 <strtol+0x5f>
c010c3ec:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010c3f0:	75 24                	jne    c010c416 <strtol+0x83>
c010c3f2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3f5:	0f b6 00             	movzbl (%eax),%eax
c010c3f8:	3c 30                	cmp    $0x30,%al
c010c3fa:	75 1a                	jne    c010c416 <strtol+0x83>
c010c3fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3ff:	83 c0 01             	add    $0x1,%eax
c010c402:	0f b6 00             	movzbl (%eax),%eax
c010c405:	3c 78                	cmp    $0x78,%al
c010c407:	75 0d                	jne    c010c416 <strtol+0x83>
        s += 2, base = 16;
c010c409:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010c40d:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010c414:	eb 2a                	jmp    c010c440 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010c416:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c41a:	75 17                	jne    c010c433 <strtol+0xa0>
c010c41c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c41f:	0f b6 00             	movzbl (%eax),%eax
c010c422:	3c 30                	cmp    $0x30,%al
c010c424:	75 0d                	jne    c010c433 <strtol+0xa0>
        s ++, base = 8;
c010c426:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c42a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010c431:	eb 0d                	jmp    c010c440 <strtol+0xad>
    }
    else if (base == 0) {
c010c433:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c437:	75 07                	jne    c010c440 <strtol+0xad>
        base = 10;
c010c439:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010c440:	8b 45 08             	mov    0x8(%ebp),%eax
c010c443:	0f b6 00             	movzbl (%eax),%eax
c010c446:	3c 2f                	cmp    $0x2f,%al
c010c448:	7e 1b                	jle    c010c465 <strtol+0xd2>
c010c44a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c44d:	0f b6 00             	movzbl (%eax),%eax
c010c450:	3c 39                	cmp    $0x39,%al
c010c452:	7f 11                	jg     c010c465 <strtol+0xd2>
            dig = *s - '0';
c010c454:	8b 45 08             	mov    0x8(%ebp),%eax
c010c457:	0f b6 00             	movzbl (%eax),%eax
c010c45a:	0f be c0             	movsbl %al,%eax
c010c45d:	83 e8 30             	sub    $0x30,%eax
c010c460:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c463:	eb 48                	jmp    c010c4ad <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010c465:	8b 45 08             	mov    0x8(%ebp),%eax
c010c468:	0f b6 00             	movzbl (%eax),%eax
c010c46b:	3c 60                	cmp    $0x60,%al
c010c46d:	7e 1b                	jle    c010c48a <strtol+0xf7>
c010c46f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c472:	0f b6 00             	movzbl (%eax),%eax
c010c475:	3c 7a                	cmp    $0x7a,%al
c010c477:	7f 11                	jg     c010c48a <strtol+0xf7>
            dig = *s - 'a' + 10;
c010c479:	8b 45 08             	mov    0x8(%ebp),%eax
c010c47c:	0f b6 00             	movzbl (%eax),%eax
c010c47f:	0f be c0             	movsbl %al,%eax
c010c482:	83 e8 57             	sub    $0x57,%eax
c010c485:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c488:	eb 23                	jmp    c010c4ad <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010c48a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c48d:	0f b6 00             	movzbl (%eax),%eax
c010c490:	3c 40                	cmp    $0x40,%al
c010c492:	7e 3c                	jle    c010c4d0 <strtol+0x13d>
c010c494:	8b 45 08             	mov    0x8(%ebp),%eax
c010c497:	0f b6 00             	movzbl (%eax),%eax
c010c49a:	3c 5a                	cmp    $0x5a,%al
c010c49c:	7f 32                	jg     c010c4d0 <strtol+0x13d>
            dig = *s - 'A' + 10;
c010c49e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4a1:	0f b6 00             	movzbl (%eax),%eax
c010c4a4:	0f be c0             	movsbl %al,%eax
c010c4a7:	83 e8 37             	sub    $0x37,%eax
c010c4aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010c4ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4b0:	3b 45 10             	cmp    0x10(%ebp),%eax
c010c4b3:	7d 1a                	jge    c010c4cf <strtol+0x13c>
            break;
        }
        s ++, val = (val * base) + dig;
c010c4b5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c4b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c4bc:	0f af 45 10          	imul   0x10(%ebp),%eax
c010c4c0:	89 c2                	mov    %eax,%edx
c010c4c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4c5:	01 d0                	add    %edx,%eax
c010c4c7:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010c4ca:	e9 71 ff ff ff       	jmp    c010c440 <strtol+0xad>
        }
        else {
            break;
        }
        if (dig >= base) {
            break;
c010c4cf:	90                   	nop
        }
        s ++, val = (val * base) + dig;
        // we don't properly detect overflow!
    }

    if (endptr) {
c010c4d0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c4d4:	74 08                	je     c010c4de <strtol+0x14b>
        *endptr = (char *) s;
c010c4d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c4d9:	8b 55 08             	mov    0x8(%ebp),%edx
c010c4dc:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010c4de:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010c4e2:	74 07                	je     c010c4eb <strtol+0x158>
c010c4e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c4e7:	f7 d8                	neg    %eax
c010c4e9:	eb 03                	jmp    c010c4ee <strtol+0x15b>
c010c4eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010c4ee:	c9                   	leave  
c010c4ef:	c3                   	ret    

c010c4f0 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010c4f0:	55                   	push   %ebp
c010c4f1:	89 e5                	mov    %esp,%ebp
c010c4f3:	57                   	push   %edi
c010c4f4:	83 ec 24             	sub    $0x24,%esp
c010c4f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c4fa:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010c4fd:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010c501:	8b 55 08             	mov    0x8(%ebp),%edx
c010c504:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c507:	88 45 f7             	mov    %al,-0x9(%ebp)
c010c50a:	8b 45 10             	mov    0x10(%ebp),%eax
c010c50d:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010c510:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010c513:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010c517:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c51a:	89 d7                	mov    %edx,%edi
c010c51c:	f3 aa                	rep stos %al,%es:(%edi)
c010c51e:	89 fa                	mov    %edi,%edx
c010c520:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010c523:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010c526:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c529:	90                   	nop
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010c52a:	83 c4 24             	add    $0x24,%esp
c010c52d:	5f                   	pop    %edi
c010c52e:	5d                   	pop    %ebp
c010c52f:	c3                   	ret    

c010c530 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010c530:	55                   	push   %ebp
c010c531:	89 e5                	mov    %esp,%ebp
c010c533:	57                   	push   %edi
c010c534:	56                   	push   %esi
c010c535:	53                   	push   %ebx
c010c536:	83 ec 30             	sub    $0x30,%esp
c010c539:	8b 45 08             	mov    0x8(%ebp),%eax
c010c53c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c53f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c542:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c545:	8b 45 10             	mov    0x10(%ebp),%eax
c010c548:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010c54b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c54e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010c551:	73 42                	jae    c010c595 <memmove+0x65>
c010c553:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c556:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c559:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c55c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c55f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c562:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010c565:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c568:	c1 e8 02             	shr    $0x2,%eax
c010c56b:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010c56d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c570:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c573:	89 d7                	mov    %edx,%edi
c010c575:	89 c6                	mov    %eax,%esi
c010c577:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c579:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010c57c:	83 e1 03             	and    $0x3,%ecx
c010c57f:	74 02                	je     c010c583 <memmove+0x53>
c010c581:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c583:	89 f0                	mov    %esi,%eax
c010c585:	89 fa                	mov    %edi,%edx
c010c587:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010c58a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c58d:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010c590:	8b 45 e4             	mov    -0x1c(%ebp),%eax
#ifdef __HAVE_ARCH_MEMMOVE
    return __memmove(dst, src, n);
c010c593:	eb 36                	jmp    c010c5cb <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010c595:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c598:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c59b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c59e:	01 c2                	add    %eax,%edx
c010c5a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c5a3:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010c5a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5a9:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010c5ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c5af:	89 c1                	mov    %eax,%ecx
c010c5b1:	89 d8                	mov    %ebx,%eax
c010c5b3:	89 d6                	mov    %edx,%esi
c010c5b5:	89 c7                	mov    %eax,%edi
c010c5b7:	fd                   	std    
c010c5b8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c5ba:	fc                   	cld    
c010c5bb:	89 f8                	mov    %edi,%eax
c010c5bd:	89 f2                	mov    %esi,%edx
c010c5bf:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010c5c2:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010c5c5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010c5c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010c5cb:	83 c4 30             	add    $0x30,%esp
c010c5ce:	5b                   	pop    %ebx
c010c5cf:	5e                   	pop    %esi
c010c5d0:	5f                   	pop    %edi
c010c5d1:	5d                   	pop    %ebp
c010c5d2:	c3                   	ret    

c010c5d3 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010c5d3:	55                   	push   %ebp
c010c5d4:	89 e5                	mov    %esp,%ebp
c010c5d6:	57                   	push   %edi
c010c5d7:	56                   	push   %esi
c010c5d8:	83 ec 20             	sub    $0x20,%esp
c010c5db:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5de:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c5e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c5e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c5e7:	8b 45 10             	mov    0x10(%ebp),%eax
c010c5ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010c5ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5f0:	c1 e8 02             	shr    $0x2,%eax
c010c5f3:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010c5f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c5f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5fb:	89 d7                	mov    %edx,%edi
c010c5fd:	89 c6                	mov    %eax,%esi
c010c5ff:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c601:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010c604:	83 e1 03             	and    $0x3,%ecx
c010c607:	74 02                	je     c010c60b <memcpy+0x38>
c010c609:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c60b:	89 f0                	mov    %esi,%eax
c010c60d:	89 fa                	mov    %edi,%edx
c010c60f:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010c612:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c615:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010c618:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_MEMCPY
    return __memcpy(dst, src, n);
c010c61b:	90                   	nop
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010c61c:	83 c4 20             	add    $0x20,%esp
c010c61f:	5e                   	pop    %esi
c010c620:	5f                   	pop    %edi
c010c621:	5d                   	pop    %ebp
c010c622:	c3                   	ret    

c010c623 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010c623:	55                   	push   %ebp
c010c624:	89 e5                	mov    %esp,%ebp
c010c626:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010c629:	8b 45 08             	mov    0x8(%ebp),%eax
c010c62c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010c62f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c632:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010c635:	eb 30                	jmp    c010c667 <memcmp+0x44>
        if (*s1 != *s2) {
c010c637:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c63a:	0f b6 10             	movzbl (%eax),%edx
c010c63d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c640:	0f b6 00             	movzbl (%eax),%eax
c010c643:	38 c2                	cmp    %al,%dl
c010c645:	74 18                	je     c010c65f <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010c647:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c64a:	0f b6 00             	movzbl (%eax),%eax
c010c64d:	0f b6 d0             	movzbl %al,%edx
c010c650:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c653:	0f b6 00             	movzbl (%eax),%eax
c010c656:	0f b6 c0             	movzbl %al,%eax
c010c659:	29 c2                	sub    %eax,%edx
c010c65b:	89 d0                	mov    %edx,%eax
c010c65d:	eb 1a                	jmp    c010c679 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010c65f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010c663:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010c667:	8b 45 10             	mov    0x10(%ebp),%eax
c010c66a:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c66d:	89 55 10             	mov    %edx,0x10(%ebp)
c010c670:	85 c0                	test   %eax,%eax
c010c672:	75 c3                	jne    c010c637 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010c674:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c679:	c9                   	leave  
c010c67a:	c3                   	ret    

c010c67b <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010c67b:	55                   	push   %ebp
c010c67c:	89 e5                	mov    %esp,%ebp
c010c67e:	83 ec 38             	sub    $0x38,%esp
c010c681:	8b 45 10             	mov    0x10(%ebp),%eax
c010c684:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c687:	8b 45 14             	mov    0x14(%ebp),%eax
c010c68a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010c68d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c690:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c693:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c696:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010c699:	8b 45 18             	mov    0x18(%ebp),%eax
c010c69c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c69f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c6a2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c6a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c6a8:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c6ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c6b1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c6b5:	74 1c                	je     c010c6d3 <printnum+0x58>
c010c6b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6ba:	ba 00 00 00 00       	mov    $0x0,%edx
c010c6bf:	f7 75 e4             	divl   -0x1c(%ebp)
c010c6c2:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010c6c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6c8:	ba 00 00 00 00       	mov    $0x0,%edx
c010c6cd:	f7 75 e4             	divl   -0x1c(%ebp)
c010c6d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c6d3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c6d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c6d9:	f7 75 e4             	divl   -0x1c(%ebp)
c010c6dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c6df:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010c6e2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c6e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c6e8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c6eb:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c6ee:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c6f1:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010c6f4:	8b 45 18             	mov    0x18(%ebp),%eax
c010c6f7:	ba 00 00 00 00       	mov    $0x0,%edx
c010c6fc:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010c6ff:	77 41                	ja     c010c742 <printnum+0xc7>
c010c701:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010c704:	72 05                	jb     c010c70b <printnum+0x90>
c010c706:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010c709:	77 37                	ja     c010c742 <printnum+0xc7>
        printnum(putch, putdat, result, base, width - 1, padc);
c010c70b:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010c70e:	83 e8 01             	sub    $0x1,%eax
c010c711:	83 ec 04             	sub    $0x4,%esp
c010c714:	ff 75 20             	pushl  0x20(%ebp)
c010c717:	50                   	push   %eax
c010c718:	ff 75 18             	pushl  0x18(%ebp)
c010c71b:	ff 75 ec             	pushl  -0x14(%ebp)
c010c71e:	ff 75 e8             	pushl  -0x18(%ebp)
c010c721:	ff 75 0c             	pushl  0xc(%ebp)
c010c724:	ff 75 08             	pushl  0x8(%ebp)
c010c727:	e8 4f ff ff ff       	call   c010c67b <printnum>
c010c72c:	83 c4 20             	add    $0x20,%esp
c010c72f:	eb 1b                	jmp    c010c74c <printnum+0xd1>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010c731:	83 ec 08             	sub    $0x8,%esp
c010c734:	ff 75 0c             	pushl  0xc(%ebp)
c010c737:	ff 75 20             	pushl  0x20(%ebp)
c010c73a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c73d:	ff d0                	call   *%eax
c010c73f:	83 c4 10             	add    $0x10,%esp
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010c742:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010c746:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010c74a:	7f e5                	jg     c010c731 <printnum+0xb6>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010c74c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c74f:	05 c4 f8 10 c0       	add    $0xc010f8c4,%eax
c010c754:	0f b6 00             	movzbl (%eax),%eax
c010c757:	0f be c0             	movsbl %al,%eax
c010c75a:	83 ec 08             	sub    $0x8,%esp
c010c75d:	ff 75 0c             	pushl  0xc(%ebp)
c010c760:	50                   	push   %eax
c010c761:	8b 45 08             	mov    0x8(%ebp),%eax
c010c764:	ff d0                	call   *%eax
c010c766:	83 c4 10             	add    $0x10,%esp
}
c010c769:	90                   	nop
c010c76a:	c9                   	leave  
c010c76b:	c3                   	ret    

c010c76c <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010c76c:	55                   	push   %ebp
c010c76d:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010c76f:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010c773:	7e 14                	jle    c010c789 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010c775:	8b 45 08             	mov    0x8(%ebp),%eax
c010c778:	8b 00                	mov    (%eax),%eax
c010c77a:	8d 48 08             	lea    0x8(%eax),%ecx
c010c77d:	8b 55 08             	mov    0x8(%ebp),%edx
c010c780:	89 0a                	mov    %ecx,(%edx)
c010c782:	8b 50 04             	mov    0x4(%eax),%edx
c010c785:	8b 00                	mov    (%eax),%eax
c010c787:	eb 30                	jmp    c010c7b9 <getuint+0x4d>
    }
    else if (lflag) {
c010c789:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c78d:	74 16                	je     c010c7a5 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010c78f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c792:	8b 00                	mov    (%eax),%eax
c010c794:	8d 48 04             	lea    0x4(%eax),%ecx
c010c797:	8b 55 08             	mov    0x8(%ebp),%edx
c010c79a:	89 0a                	mov    %ecx,(%edx)
c010c79c:	8b 00                	mov    (%eax),%eax
c010c79e:	ba 00 00 00 00       	mov    $0x0,%edx
c010c7a3:	eb 14                	jmp    c010c7b9 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010c7a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7a8:	8b 00                	mov    (%eax),%eax
c010c7aa:	8d 48 04             	lea    0x4(%eax),%ecx
c010c7ad:	8b 55 08             	mov    0x8(%ebp),%edx
c010c7b0:	89 0a                	mov    %ecx,(%edx)
c010c7b2:	8b 00                	mov    (%eax),%eax
c010c7b4:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010c7b9:	5d                   	pop    %ebp
c010c7ba:	c3                   	ret    

c010c7bb <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010c7bb:	55                   	push   %ebp
c010c7bc:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010c7be:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010c7c2:	7e 14                	jle    c010c7d8 <getint+0x1d>
        return va_arg(*ap, long long);
c010c7c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7c7:	8b 00                	mov    (%eax),%eax
c010c7c9:	8d 48 08             	lea    0x8(%eax),%ecx
c010c7cc:	8b 55 08             	mov    0x8(%ebp),%edx
c010c7cf:	89 0a                	mov    %ecx,(%edx)
c010c7d1:	8b 50 04             	mov    0x4(%eax),%edx
c010c7d4:	8b 00                	mov    (%eax),%eax
c010c7d6:	eb 28                	jmp    c010c800 <getint+0x45>
    }
    else if (lflag) {
c010c7d8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c7dc:	74 12                	je     c010c7f0 <getint+0x35>
        return va_arg(*ap, long);
c010c7de:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7e1:	8b 00                	mov    (%eax),%eax
c010c7e3:	8d 48 04             	lea    0x4(%eax),%ecx
c010c7e6:	8b 55 08             	mov    0x8(%ebp),%edx
c010c7e9:	89 0a                	mov    %ecx,(%edx)
c010c7eb:	8b 00                	mov    (%eax),%eax
c010c7ed:	99                   	cltd   
c010c7ee:	eb 10                	jmp    c010c800 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010c7f0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7f3:	8b 00                	mov    (%eax),%eax
c010c7f5:	8d 48 04             	lea    0x4(%eax),%ecx
c010c7f8:	8b 55 08             	mov    0x8(%ebp),%edx
c010c7fb:	89 0a                	mov    %ecx,(%edx)
c010c7fd:	8b 00                	mov    (%eax),%eax
c010c7ff:	99                   	cltd   
    }
}
c010c800:	5d                   	pop    %ebp
c010c801:	c3                   	ret    

c010c802 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010c802:	55                   	push   %ebp
c010c803:	89 e5                	mov    %esp,%ebp
c010c805:	83 ec 18             	sub    $0x18,%esp
    va_list ap;

    va_start(ap, fmt);
c010c808:	8d 45 14             	lea    0x14(%ebp),%eax
c010c80b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010c80e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c811:	50                   	push   %eax
c010c812:	ff 75 10             	pushl  0x10(%ebp)
c010c815:	ff 75 0c             	pushl  0xc(%ebp)
c010c818:	ff 75 08             	pushl  0x8(%ebp)
c010c81b:	e8 06 00 00 00       	call   c010c826 <vprintfmt>
c010c820:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c010c823:	90                   	nop
c010c824:	c9                   	leave  
c010c825:	c3                   	ret    

c010c826 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010c826:	55                   	push   %ebp
c010c827:	89 e5                	mov    %esp,%ebp
c010c829:	56                   	push   %esi
c010c82a:	53                   	push   %ebx
c010c82b:	83 ec 20             	sub    $0x20,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010c82e:	eb 17                	jmp    c010c847 <vprintfmt+0x21>
            if (ch == '\0') {
c010c830:	85 db                	test   %ebx,%ebx
c010c832:	0f 84 8e 03 00 00    	je     c010cbc6 <vprintfmt+0x3a0>
                return;
            }
            putch(ch, putdat);
c010c838:	83 ec 08             	sub    $0x8,%esp
c010c83b:	ff 75 0c             	pushl  0xc(%ebp)
c010c83e:	53                   	push   %ebx
c010c83f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c842:	ff d0                	call   *%eax
c010c844:	83 c4 10             	add    $0x10,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010c847:	8b 45 10             	mov    0x10(%ebp),%eax
c010c84a:	8d 50 01             	lea    0x1(%eax),%edx
c010c84d:	89 55 10             	mov    %edx,0x10(%ebp)
c010c850:	0f b6 00             	movzbl (%eax),%eax
c010c853:	0f b6 d8             	movzbl %al,%ebx
c010c856:	83 fb 25             	cmp    $0x25,%ebx
c010c859:	75 d5                	jne    c010c830 <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010c85b:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010c85f:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010c866:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c869:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010c86c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010c873:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c876:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010c879:	8b 45 10             	mov    0x10(%ebp),%eax
c010c87c:	8d 50 01             	lea    0x1(%eax),%edx
c010c87f:	89 55 10             	mov    %edx,0x10(%ebp)
c010c882:	0f b6 00             	movzbl (%eax),%eax
c010c885:	0f b6 d8             	movzbl %al,%ebx
c010c888:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010c88b:	83 f8 55             	cmp    $0x55,%eax
c010c88e:	0f 87 05 03 00 00    	ja     c010cb99 <vprintfmt+0x373>
c010c894:	8b 04 85 e8 f8 10 c0 	mov    -0x3fef0718(,%eax,4),%eax
c010c89b:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010c89d:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010c8a1:	eb d6                	jmp    c010c879 <vprintfmt+0x53>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010c8a3:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010c8a7:	eb d0                	jmp    c010c879 <vprintfmt+0x53>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010c8a9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010c8b0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c8b3:	89 d0                	mov    %edx,%eax
c010c8b5:	c1 e0 02             	shl    $0x2,%eax
c010c8b8:	01 d0                	add    %edx,%eax
c010c8ba:	01 c0                	add    %eax,%eax
c010c8bc:	01 d8                	add    %ebx,%eax
c010c8be:	83 e8 30             	sub    $0x30,%eax
c010c8c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010c8c4:	8b 45 10             	mov    0x10(%ebp),%eax
c010c8c7:	0f b6 00             	movzbl (%eax),%eax
c010c8ca:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010c8cd:	83 fb 2f             	cmp    $0x2f,%ebx
c010c8d0:	7e 39                	jle    c010c90b <vprintfmt+0xe5>
c010c8d2:	83 fb 39             	cmp    $0x39,%ebx
c010c8d5:	7f 34                	jg     c010c90b <vprintfmt+0xe5>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010c8d7:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010c8db:	eb d3                	jmp    c010c8b0 <vprintfmt+0x8a>
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
c010c8dd:	8b 45 14             	mov    0x14(%ebp),%eax
c010c8e0:	8d 50 04             	lea    0x4(%eax),%edx
c010c8e3:	89 55 14             	mov    %edx,0x14(%ebp)
c010c8e6:	8b 00                	mov    (%eax),%eax
c010c8e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010c8eb:	eb 1f                	jmp    c010c90c <vprintfmt+0xe6>

        case '.':
            if (width < 0)
c010c8ed:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c8f1:	79 86                	jns    c010c879 <vprintfmt+0x53>
                width = 0;
c010c8f3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010c8fa:	e9 7a ff ff ff       	jmp    c010c879 <vprintfmt+0x53>

        case '#':
            altflag = 1;
c010c8ff:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010c906:	e9 6e ff ff ff       	jmp    c010c879 <vprintfmt+0x53>
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
            goto process_precision;
c010c90b:	90                   	nop
        case '#':
            altflag = 1;
            goto reswitch;

        process_precision:
            if (width < 0)
c010c90c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c910:	0f 89 63 ff ff ff    	jns    c010c879 <vprintfmt+0x53>
                width = precision, precision = -1;
c010c916:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c919:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c91c:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010c923:	e9 51 ff ff ff       	jmp    c010c879 <vprintfmt+0x53>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010c928:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010c92c:	e9 48 ff ff ff       	jmp    c010c879 <vprintfmt+0x53>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010c931:	8b 45 14             	mov    0x14(%ebp),%eax
c010c934:	8d 50 04             	lea    0x4(%eax),%edx
c010c937:	89 55 14             	mov    %edx,0x14(%ebp)
c010c93a:	8b 00                	mov    (%eax),%eax
c010c93c:	83 ec 08             	sub    $0x8,%esp
c010c93f:	ff 75 0c             	pushl  0xc(%ebp)
c010c942:	50                   	push   %eax
c010c943:	8b 45 08             	mov    0x8(%ebp),%eax
c010c946:	ff d0                	call   *%eax
c010c948:	83 c4 10             	add    $0x10,%esp
            break;
c010c94b:	e9 71 02 00 00       	jmp    c010cbc1 <vprintfmt+0x39b>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010c950:	8b 45 14             	mov    0x14(%ebp),%eax
c010c953:	8d 50 04             	lea    0x4(%eax),%edx
c010c956:	89 55 14             	mov    %edx,0x14(%ebp)
c010c959:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010c95b:	85 db                	test   %ebx,%ebx
c010c95d:	79 02                	jns    c010c961 <vprintfmt+0x13b>
                err = -err;
c010c95f:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010c961:	83 fb 18             	cmp    $0x18,%ebx
c010c964:	7f 0b                	jg     c010c971 <vprintfmt+0x14b>
c010c966:	8b 34 9d 60 f8 10 c0 	mov    -0x3fef07a0(,%ebx,4),%esi
c010c96d:	85 f6                	test   %esi,%esi
c010c96f:	75 19                	jne    c010c98a <vprintfmt+0x164>
                printfmt(putch, putdat, "error %d", err);
c010c971:	53                   	push   %ebx
c010c972:	68 d5 f8 10 c0       	push   $0xc010f8d5
c010c977:	ff 75 0c             	pushl  0xc(%ebp)
c010c97a:	ff 75 08             	pushl  0x8(%ebp)
c010c97d:	e8 80 fe ff ff       	call   c010c802 <printfmt>
c010c982:	83 c4 10             	add    $0x10,%esp
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010c985:	e9 37 02 00 00       	jmp    c010cbc1 <vprintfmt+0x39b>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010c98a:	56                   	push   %esi
c010c98b:	68 de f8 10 c0       	push   $0xc010f8de
c010c990:	ff 75 0c             	pushl  0xc(%ebp)
c010c993:	ff 75 08             	pushl  0x8(%ebp)
c010c996:	e8 67 fe ff ff       	call   c010c802 <printfmt>
c010c99b:	83 c4 10             	add    $0x10,%esp
            }
            break;
c010c99e:	e9 1e 02 00 00       	jmp    c010cbc1 <vprintfmt+0x39b>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010c9a3:	8b 45 14             	mov    0x14(%ebp),%eax
c010c9a6:	8d 50 04             	lea    0x4(%eax),%edx
c010c9a9:	89 55 14             	mov    %edx,0x14(%ebp)
c010c9ac:	8b 30                	mov    (%eax),%esi
c010c9ae:	85 f6                	test   %esi,%esi
c010c9b0:	75 05                	jne    c010c9b7 <vprintfmt+0x191>
                p = "(null)";
c010c9b2:	be e1 f8 10 c0       	mov    $0xc010f8e1,%esi
            }
            if (width > 0 && padc != '-') {
c010c9b7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c9bb:	7e 76                	jle    c010ca33 <vprintfmt+0x20d>
c010c9bd:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010c9c1:	74 70                	je     c010ca33 <vprintfmt+0x20d>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010c9c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c9c6:	83 ec 08             	sub    $0x8,%esp
c010c9c9:	50                   	push   %eax
c010c9ca:	56                   	push   %esi
c010c9cb:	e8 17 f8 ff ff       	call   c010c1e7 <strnlen>
c010c9d0:	83 c4 10             	add    $0x10,%esp
c010c9d3:	89 c2                	mov    %eax,%edx
c010c9d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c9d8:	29 d0                	sub    %edx,%eax
c010c9da:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c9dd:	eb 17                	jmp    c010c9f6 <vprintfmt+0x1d0>
                    putch(padc, putdat);
c010c9df:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010c9e3:	83 ec 08             	sub    $0x8,%esp
c010c9e6:	ff 75 0c             	pushl  0xc(%ebp)
c010c9e9:	50                   	push   %eax
c010c9ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9ed:	ff d0                	call   *%eax
c010c9ef:	83 c4 10             	add    $0x10,%esp
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010c9f2:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010c9f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c9fa:	7f e3                	jg     c010c9df <vprintfmt+0x1b9>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010c9fc:	eb 35                	jmp    c010ca33 <vprintfmt+0x20d>
                if (altflag && (ch < ' ' || ch > '~')) {
c010c9fe:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010ca02:	74 1c                	je     c010ca20 <vprintfmt+0x1fa>
c010ca04:	83 fb 1f             	cmp    $0x1f,%ebx
c010ca07:	7e 05                	jle    c010ca0e <vprintfmt+0x1e8>
c010ca09:	83 fb 7e             	cmp    $0x7e,%ebx
c010ca0c:	7e 12                	jle    c010ca20 <vprintfmt+0x1fa>
                    putch('?', putdat);
c010ca0e:	83 ec 08             	sub    $0x8,%esp
c010ca11:	ff 75 0c             	pushl  0xc(%ebp)
c010ca14:	6a 3f                	push   $0x3f
c010ca16:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca19:	ff d0                	call   *%eax
c010ca1b:	83 c4 10             	add    $0x10,%esp
c010ca1e:	eb 0f                	jmp    c010ca2f <vprintfmt+0x209>
                }
                else {
                    putch(ch, putdat);
c010ca20:	83 ec 08             	sub    $0x8,%esp
c010ca23:	ff 75 0c             	pushl  0xc(%ebp)
c010ca26:	53                   	push   %ebx
c010ca27:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca2a:	ff d0                	call   *%eax
c010ca2c:	83 c4 10             	add    $0x10,%esp
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010ca2f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010ca33:	89 f0                	mov    %esi,%eax
c010ca35:	8d 70 01             	lea    0x1(%eax),%esi
c010ca38:	0f b6 00             	movzbl (%eax),%eax
c010ca3b:	0f be d8             	movsbl %al,%ebx
c010ca3e:	85 db                	test   %ebx,%ebx
c010ca40:	74 26                	je     c010ca68 <vprintfmt+0x242>
c010ca42:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010ca46:	78 b6                	js     c010c9fe <vprintfmt+0x1d8>
c010ca48:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010ca4c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010ca50:	79 ac                	jns    c010c9fe <vprintfmt+0x1d8>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010ca52:	eb 14                	jmp    c010ca68 <vprintfmt+0x242>
                putch(' ', putdat);
c010ca54:	83 ec 08             	sub    $0x8,%esp
c010ca57:	ff 75 0c             	pushl  0xc(%ebp)
c010ca5a:	6a 20                	push   $0x20
c010ca5c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca5f:	ff d0                	call   *%eax
c010ca61:	83 c4 10             	add    $0x10,%esp
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010ca64:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010ca68:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ca6c:	7f e6                	jg     c010ca54 <vprintfmt+0x22e>
                putch(' ', putdat);
            }
            break;
c010ca6e:	e9 4e 01 00 00       	jmp    c010cbc1 <vprintfmt+0x39b>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010ca73:	83 ec 08             	sub    $0x8,%esp
c010ca76:	ff 75 e0             	pushl  -0x20(%ebp)
c010ca79:	8d 45 14             	lea    0x14(%ebp),%eax
c010ca7c:	50                   	push   %eax
c010ca7d:	e8 39 fd ff ff       	call   c010c7bb <getint>
c010ca82:	83 c4 10             	add    $0x10,%esp
c010ca85:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ca88:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010ca8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca8e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ca91:	85 d2                	test   %edx,%edx
c010ca93:	79 23                	jns    c010cab8 <vprintfmt+0x292>
                putch('-', putdat);
c010ca95:	83 ec 08             	sub    $0x8,%esp
c010ca98:	ff 75 0c             	pushl  0xc(%ebp)
c010ca9b:	6a 2d                	push   $0x2d
c010ca9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010caa0:	ff d0                	call   *%eax
c010caa2:	83 c4 10             	add    $0x10,%esp
                num = -(long long)num;
c010caa5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010caa8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010caab:	f7 d8                	neg    %eax
c010caad:	83 d2 00             	adc    $0x0,%edx
c010cab0:	f7 da                	neg    %edx
c010cab2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cab5:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010cab8:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010cabf:	e9 9f 00 00 00       	jmp    c010cb63 <vprintfmt+0x33d>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010cac4:	83 ec 08             	sub    $0x8,%esp
c010cac7:	ff 75 e0             	pushl  -0x20(%ebp)
c010caca:	8d 45 14             	lea    0x14(%ebp),%eax
c010cacd:	50                   	push   %eax
c010cace:	e8 99 fc ff ff       	call   c010c76c <getuint>
c010cad3:	83 c4 10             	add    $0x10,%esp
c010cad6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cad9:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010cadc:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010cae3:	eb 7e                	jmp    c010cb63 <vprintfmt+0x33d>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010cae5:	83 ec 08             	sub    $0x8,%esp
c010cae8:	ff 75 e0             	pushl  -0x20(%ebp)
c010caeb:	8d 45 14             	lea    0x14(%ebp),%eax
c010caee:	50                   	push   %eax
c010caef:	e8 78 fc ff ff       	call   c010c76c <getuint>
c010caf4:	83 c4 10             	add    $0x10,%esp
c010caf7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cafa:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010cafd:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010cb04:	eb 5d                	jmp    c010cb63 <vprintfmt+0x33d>

        // pointer
        case 'p':
            putch('0', putdat);
c010cb06:	83 ec 08             	sub    $0x8,%esp
c010cb09:	ff 75 0c             	pushl  0xc(%ebp)
c010cb0c:	6a 30                	push   $0x30
c010cb0e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb11:	ff d0                	call   *%eax
c010cb13:	83 c4 10             	add    $0x10,%esp
            putch('x', putdat);
c010cb16:	83 ec 08             	sub    $0x8,%esp
c010cb19:	ff 75 0c             	pushl  0xc(%ebp)
c010cb1c:	6a 78                	push   $0x78
c010cb1e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb21:	ff d0                	call   *%eax
c010cb23:	83 c4 10             	add    $0x10,%esp
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010cb26:	8b 45 14             	mov    0x14(%ebp),%eax
c010cb29:	8d 50 04             	lea    0x4(%eax),%edx
c010cb2c:	89 55 14             	mov    %edx,0x14(%ebp)
c010cb2f:	8b 00                	mov    (%eax),%eax
c010cb31:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cb34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010cb3b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010cb42:	eb 1f                	jmp    c010cb63 <vprintfmt+0x33d>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010cb44:	83 ec 08             	sub    $0x8,%esp
c010cb47:	ff 75 e0             	pushl  -0x20(%ebp)
c010cb4a:	8d 45 14             	lea    0x14(%ebp),%eax
c010cb4d:	50                   	push   %eax
c010cb4e:	e8 19 fc ff ff       	call   c010c76c <getuint>
c010cb53:	83 c4 10             	add    $0x10,%esp
c010cb56:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cb59:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010cb5c:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010cb63:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010cb67:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cb6a:	83 ec 04             	sub    $0x4,%esp
c010cb6d:	52                   	push   %edx
c010cb6e:	ff 75 e8             	pushl  -0x18(%ebp)
c010cb71:	50                   	push   %eax
c010cb72:	ff 75 f4             	pushl  -0xc(%ebp)
c010cb75:	ff 75 f0             	pushl  -0x10(%ebp)
c010cb78:	ff 75 0c             	pushl  0xc(%ebp)
c010cb7b:	ff 75 08             	pushl  0x8(%ebp)
c010cb7e:	e8 f8 fa ff ff       	call   c010c67b <printnum>
c010cb83:	83 c4 20             	add    $0x20,%esp
            break;
c010cb86:	eb 39                	jmp    c010cbc1 <vprintfmt+0x39b>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010cb88:	83 ec 08             	sub    $0x8,%esp
c010cb8b:	ff 75 0c             	pushl  0xc(%ebp)
c010cb8e:	53                   	push   %ebx
c010cb8f:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb92:	ff d0                	call   *%eax
c010cb94:	83 c4 10             	add    $0x10,%esp
            break;
c010cb97:	eb 28                	jmp    c010cbc1 <vprintfmt+0x39b>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010cb99:	83 ec 08             	sub    $0x8,%esp
c010cb9c:	ff 75 0c             	pushl  0xc(%ebp)
c010cb9f:	6a 25                	push   $0x25
c010cba1:	8b 45 08             	mov    0x8(%ebp),%eax
c010cba4:	ff d0                	call   *%eax
c010cba6:	83 c4 10             	add    $0x10,%esp
            for (fmt --; fmt[-1] != '%'; fmt --)
c010cba9:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010cbad:	eb 04                	jmp    c010cbb3 <vprintfmt+0x38d>
c010cbaf:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010cbb3:	8b 45 10             	mov    0x10(%ebp),%eax
c010cbb6:	83 e8 01             	sub    $0x1,%eax
c010cbb9:	0f b6 00             	movzbl (%eax),%eax
c010cbbc:	3c 25                	cmp    $0x25,%al
c010cbbe:	75 ef                	jne    c010cbaf <vprintfmt+0x389>
                /* do nothing */;
            break;
c010cbc0:	90                   	nop
        }
    }
c010cbc1:	e9 68 fc ff ff       	jmp    c010c82e <vprintfmt+0x8>
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
            if (ch == '\0') {
                return;
c010cbc6:	90                   	nop
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010cbc7:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010cbca:	5b                   	pop    %ebx
c010cbcb:	5e                   	pop    %esi
c010cbcc:	5d                   	pop    %ebp
c010cbcd:	c3                   	ret    

c010cbce <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010cbce:	55                   	push   %ebp
c010cbcf:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010cbd1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cbd4:	8b 40 08             	mov    0x8(%eax),%eax
c010cbd7:	8d 50 01             	lea    0x1(%eax),%edx
c010cbda:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cbdd:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010cbe0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cbe3:	8b 10                	mov    (%eax),%edx
c010cbe5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cbe8:	8b 40 04             	mov    0x4(%eax),%eax
c010cbeb:	39 c2                	cmp    %eax,%edx
c010cbed:	73 12                	jae    c010cc01 <sprintputch+0x33>
        *b->buf ++ = ch;
c010cbef:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cbf2:	8b 00                	mov    (%eax),%eax
c010cbf4:	8d 48 01             	lea    0x1(%eax),%ecx
c010cbf7:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cbfa:	89 0a                	mov    %ecx,(%edx)
c010cbfc:	8b 55 08             	mov    0x8(%ebp),%edx
c010cbff:	88 10                	mov    %dl,(%eax)
    }
}
c010cc01:	90                   	nop
c010cc02:	5d                   	pop    %ebp
c010cc03:	c3                   	ret    

c010cc04 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010cc04:	55                   	push   %ebp
c010cc05:	89 e5                	mov    %esp,%ebp
c010cc07:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010cc0a:	8d 45 14             	lea    0x14(%ebp),%eax
c010cc0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010cc10:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc13:	50                   	push   %eax
c010cc14:	ff 75 10             	pushl  0x10(%ebp)
c010cc17:	ff 75 0c             	pushl  0xc(%ebp)
c010cc1a:	ff 75 08             	pushl  0x8(%ebp)
c010cc1d:	e8 0b 00 00 00       	call   c010cc2d <vsnprintf>
c010cc22:	83 c4 10             	add    $0x10,%esp
c010cc25:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010cc28:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010cc2b:	c9                   	leave  
c010cc2c:	c3                   	ret    

c010cc2d <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010cc2d:	55                   	push   %ebp
c010cc2e:	89 e5                	mov    %esp,%ebp
c010cc30:	83 ec 18             	sub    $0x18,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010cc33:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc36:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cc39:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc3c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010cc3f:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc42:	01 d0                	add    %edx,%eax
c010cc44:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cc47:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010cc4e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010cc52:	74 0a                	je     c010cc5e <vsnprintf+0x31>
c010cc54:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cc57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc5a:	39 c2                	cmp    %eax,%edx
c010cc5c:	76 07                	jbe    c010cc65 <vsnprintf+0x38>
        return -E_INVAL;
c010cc5e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010cc63:	eb 20                	jmp    c010cc85 <vsnprintf+0x58>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010cc65:	ff 75 14             	pushl  0x14(%ebp)
c010cc68:	ff 75 10             	pushl  0x10(%ebp)
c010cc6b:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010cc6e:	50                   	push   %eax
c010cc6f:	68 ce cb 10 c0       	push   $0xc010cbce
c010cc74:	e8 ad fb ff ff       	call   c010c826 <vprintfmt>
c010cc79:	83 c4 10             	add    $0x10,%esp
    // null terminate the buffer
    *b.buf = '\0';
c010cc7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc7f:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010cc82:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010cc85:	c9                   	leave  
c010cc86:	c3                   	ret    

c010cc87 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010cc87:	55                   	push   %ebp
c010cc88:	89 e5                	mov    %esp,%ebp
c010cc8a:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010cc8d:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc90:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010cc96:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010cc99:	b8 20 00 00 00       	mov    $0x20,%eax
c010cc9e:	2b 45 0c             	sub    0xc(%ebp),%eax
c010cca1:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010cca4:	89 c1                	mov    %eax,%ecx
c010cca6:	d3 ea                	shr    %cl,%edx
c010cca8:	89 d0                	mov    %edx,%eax
}
c010ccaa:	c9                   	leave  
c010ccab:	c3                   	ret    

c010ccac <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010ccac:	55                   	push   %ebp
c010ccad:	89 e5                	mov    %esp,%ebp
c010ccaf:	57                   	push   %edi
c010ccb0:	56                   	push   %esi
c010ccb1:	53                   	push   %ebx
c010ccb2:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010ccb5:	a1 a0 fe 12 c0       	mov    0xc012fea0,%eax
c010ccba:	8b 15 a4 fe 12 c0    	mov    0xc012fea4,%edx
c010ccc0:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010ccc6:	6b f0 05             	imul   $0x5,%eax,%esi
c010ccc9:	01 fe                	add    %edi,%esi
c010cccb:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
c010ccd0:	f7 e7                	mul    %edi
c010ccd2:	01 d6                	add    %edx,%esi
c010ccd4:	89 f2                	mov    %esi,%edx
c010ccd6:	83 c0 0b             	add    $0xb,%eax
c010ccd9:	83 d2 00             	adc    $0x0,%edx
c010ccdc:	89 c7                	mov    %eax,%edi
c010ccde:	83 e7 ff             	and    $0xffffffff,%edi
c010cce1:	89 f9                	mov    %edi,%ecx
c010cce3:	0f b7 da             	movzwl %dx,%ebx
c010cce6:	89 0d a0 fe 12 c0    	mov    %ecx,0xc012fea0
c010ccec:	89 1d a4 fe 12 c0    	mov    %ebx,0xc012fea4
    unsigned long long result = (next >> 12);
c010ccf2:	a1 a0 fe 12 c0       	mov    0xc012fea0,%eax
c010ccf7:	8b 15 a4 fe 12 c0    	mov    0xc012fea4,%edx
c010ccfd:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010cd01:	c1 ea 0c             	shr    $0xc,%edx
c010cd04:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cd07:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010cd0a:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010cd11:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cd14:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010cd17:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010cd1a:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010cd1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cd20:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cd23:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cd27:	74 1c                	je     c010cd45 <rand+0x99>
c010cd29:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cd2c:	ba 00 00 00 00       	mov    $0x0,%edx
c010cd31:	f7 75 dc             	divl   -0x24(%ebp)
c010cd34:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010cd37:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cd3a:	ba 00 00 00 00       	mov    $0x0,%edx
c010cd3f:	f7 75 dc             	divl   -0x24(%ebp)
c010cd42:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cd45:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cd48:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cd4b:	f7 75 dc             	divl   -0x24(%ebp)
c010cd4e:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010cd51:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010cd54:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cd57:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010cd5a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cd5d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010cd60:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010cd63:	83 c4 24             	add    $0x24,%esp
c010cd66:	5b                   	pop    %ebx
c010cd67:	5e                   	pop    %esi
c010cd68:	5f                   	pop    %edi
c010cd69:	5d                   	pop    %ebp
c010cd6a:	c3                   	ret    

c010cd6b <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010cd6b:	55                   	push   %ebp
c010cd6c:	89 e5                	mov    %esp,%ebp
    next = seed;
c010cd6e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd71:	ba 00 00 00 00       	mov    $0x0,%edx
c010cd76:	a3 a0 fe 12 c0       	mov    %eax,0xc012fea0
c010cd7b:	89 15 a4 fe 12 c0    	mov    %edx,0xc012fea4
}
c010cd81:	90                   	nop
c010cd82:	5d                   	pop    %ebp
c010cd83:	c3                   	ret    
